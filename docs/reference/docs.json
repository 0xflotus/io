{"Encryption":{"Blowfish":{"Blowfish":{"description":"The Blowfish object can be used to do encryption and decryption using \nthe <a href=http:\/\/en.wikipedia.org\/wiki\/Blowfish_(cipher)>Blowfish<\/a> keyed, symmetric block cipher.\n<p>\nExample encryption and decription;\n\n<pre>\t\nkey := \"secret\"\ndata := \"this is a message\"\n\nencryptedData := Blowfish clone setKey(key) encrypt(data)\ndecryptedData := Blowfish clone setKey(key) decrypt(encryptedData)\n<\/pre>\t\n\nOr using the stream API:\n<pre>\t\nkey := \"secret\"\ndata := \"this is a message\"\n\ncipher = Blowfish clone\ncipher setIsEncrypting(true)\ncipher setKey(key)\ncipher beginProcessing\ncipher inputBuffer appendSeq(data)\ncipher process\ncipher endProcess\nencryptedData := cipher outputBuffer\n\ncipher = Blowfish clone\ncipher setIsEncrypting(false)\ncipher setKey(key)\ncipher beginProcessing\ncipher inputBuffer appendSeq(encryptedData)\ncipher process\ncipher endProcess\ndecryptedData := cipher outputBuffer\n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"Blowfish","category":"Encryption\n","slots":{"inputBuffer":"Returns the input buffer.\n","setIsEncrypting(aBool)":"\tIf aBool is true, encrypting mode is on, otherwise, decrypting mode is on.\n","encrypt(aSequence)":" Returns an encrypted version of aSequence.\n","process":"\tProcess the inputBuffer and appends the result to the outputBuffer.\n\tThe processed inputBuffer is empties except for the spare \n\tbytes at the end which don't fit into a cipher block.\n","endProcessing":"\tFinish processing remaining bytes of inputBuffer.\n","beginProcessing":"\tSets the key from the key slot and initializes the cipher.\n","outputBuffer":"Returns the output buffer.\n","decrypt(aSequence)":" Returns an decrypted version of aSequence.\n"}}}},"Bridges":{"Python":{"Python":{"module":"Python","copyrigth":"Aslak Gronflaten, 2006\n","description":"This object provides access the world of python.\n","credit":"Based on code by Steve Dekorte\n","license":"BSD revised\n","category":"Bridges\n","slots":{}}},"CFFI":{"CFFI":{"slots":{},"module":"CFFI","license":"New BSD license\n","copyright":"Trevor Fancher, 2006\n","category":"Bridges\n"},"CFFIFunction":{"description":"An Io interface to C\n","copyright":"2006 Trevor Fancher. All rights reserved.\n","license":"BSD revised\n","module":"CFFI","category":"Bridges\n","slots":{}},"CFFIDataType":{"description":"An Io interface to C\n","copyright":"2006 Trevor Fancher. All rights reserved.\n","license":"BSD revised\n","module":"CFFI","category":"Bridges\n","slots":{}},"CFFIPointer":{"description":"An Io interface to C\n","copyright":"2006 Trevor Fancher. All rights reserved.\n","license":"BSD revised\n","module":"CFFI","category":"Bridges\n","slots":{}},"CFFILibrary":{"description":"An Io interface to C\n","copyright":"2006 Trevor Fancher. All rights reserved.\n","license":"BSD revised\n","module":"CFFI","category":"Bridges\n","slots":{}}},"ObjcBridge":{"ObjcBridge":{"slots":{"classNamed(aSeq)":" Returns a proxy to the ObjC class with the specified name or nil if no match is found.\n","debug":"On Turns debugging off. Returns self\n","main":"Calls NSApplicationMain().\n","autoLookupClassNamesOn":"Removes the ObjC forward method from the Lobby. Returns self.\n"},"module":"ObjcBridge","license":"Revised BSD\n","copyright":"2003, Steve Dekorte\n","category":"Bridges\n"}}},"Parsers":{"Fnmatch":{"Fnmatch":{"description":"The fnmatch add on adds support for the unix fnmatch function. \n(See fnmatch man page for details). \nNote: not all options are supported on all platforms.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"Fnmatch","category":"Parsers\n","slots":{"caseFoldOn":"\tIgnore case distinctions in both the pattern and the string.\n","noEscapeOn":"\tIf not set, a backslash character (\\) in pattern followed by any other \n\tcharacter will match that second character in string. \n\tIn particular, \"\\\\\" will match a backslash in string. \n\tIf set, a backslash character will be treated as an ordinary character.\n","hasMatch":"\tReturns true if a match is found, false otherwise.\n","matchFor(aString)":"\tReturns self if aString matches the pattern, otherwise returns nil.\n","setPattern(aString)":"\tSets the pattern string. Returns self.\n","noEscapeOff":"\tSee noEscapeOn.\n","pathNameOff":"\tSee pathNameOn.\n","leadingDirOff":"\tSee leadingDirOn.\n","periodOn":"\tIf set, a leading period in string will match a period in pattern; where the location of ``leading'' is indicated by the value of FNM_PATHNAME:\n<UL>\n<LI>If FNM_PATHNAME is set, a period is ``leading'' if it is the first character in string or if it immediately follows a slash.\n\n<LI>If FNM_PATHNAME is not set, a period is ``leading'' only if it is the first character of string.\n<\/UL>\n<p>\nIf not set, no special restrictions are placed on matching a period.\n","pathNameOn":"\tIf set, a slash (\/) character in string will be explicitly matched \n\tby a slash in pattern; it will not be matched by either the asterisk (*) \n\tor question-mark (?) special characters, nor by a bracket ([]) expression. \n\tIf not set, the slash character is treated as an ordinary character.\n","leadingDirOn":"\tIgnore rest after successful pattern matching.\n","caseFoldOff":"\tSee caseFoldOn.\n","pattern":"\tReturns the pattern string.\n","string":"\tThe string to do matching on.\n","setString(aString)":"\tSets the string to do matching on.\n","periodOff":"\t\"See periodOn.\n"}}},"Regex":{"RegexMatche":{"description":"","copyright":"Daniel Rosengren danne.rosengren@gmail.com\n","license":"BSD revised\n","module":"Regex","category":"Parsers\n","slots":{}},"RegexMatches":{"description":"A regular expression match iterator.\n","copyright":"Daniel Rosengren danne.rosengren@gmail.com\n","license":"BSD revised\n","module":"Regex","category":"Parsers\n","slots":{"reset":"\tResets the search position to the beginning of the string. Returns self.\n","setString(aString)":"\tSets the string to find matches in. Returns self.\n","map(value, message)":"\tLike <code>foreach<\/code>, but the result of each evaluation of <em>message<\/em> is returned\n\tin a list.\n","replace(name, message)":"\tReplaces each match in the string with the result of <em>message<\/em> and returns\n\tthe resulting string.\n","all":"\tReturns a list containing all matches in the string.\n","foreach(value, message)":"\tLoops through the matches, assigns each match to <em>value<\/em>, and evaluates <em>message<\/em>.\n\tReturns the result of the last evaluation.\n","splitString":"\tSplits the string being matched against into pieces using the regex as the delimiter\n\tand returns the piece as a list of strings.\n","setRegex(aRegexOrString)":"\tSets the regex to find matches in. Returns self.\n","disallowEmptyMatches":"\tTells the receiver not to allow zero length matches. Returns self.\n","setEndPosition(anIndex)":"\tSets the index in the string where the receiver should stop searching. It will be as\n\tif the string ends at that index. If <em>index<\/em> is nil, the end position will be set\n\tto the end of string.\n\tReturns self.\n\n\t<pre>\n\tIo> \"funkadelic\" matchesOfRegex(\"\\\\w+\") setEndPosition(4) next string\n\t==> funk\n\n\tIo> \"funkadelic\" matchesOfRegex(\"\\\\w+\") setEndPosition(nil) next string\n\t==> funkadelic\n\t<\/pre>\n","foreachInterval(value, matchMessage, nonMatchMessage)":"\tLike <code>foreach<\/code>, but takes an extra message that will be evaluated for the non-matching\n\ttext before each match, and the non-matching text after the last match.\n","regex":"\tReturns the Regex that the receiver uses for finding matching.\n","replaceAllWith(templateString)":"\tSame as:\n\t<pre>\n\treplace(match, match expandTo(templateString))\n\t<\/pre>\n","endPosition":"\tReturns the index in the string where the receiver stops searching.\n","last":"\tReturns the last match in the string.\n","allowEmptyMatches":"\tTells the receiver to allow zero length matches. Empty matches are allowed by default.\n\tReturns self.\n","string":"\tReturns the string that the receiver finds matches in.\n","position":"\tReturns the search position as an index in the string.\n","setPosition(aRegexOrString)":"\tSets the search position to the given index in the string. Returns self.\n","allowsEmptyMatches":"\tReturns true if the receiver allows empty matches, false if not.\n","next":"\tReturns the next match, or nil if there is none.\n","anchored":"\tLike <code>next<\/code>, but will only match at the current search position.\n"}},"Regex":{"description":"<p>The Regex addon adds support for Perl regular expressions\nusing the <a href=http:\/\/www.pcre.org\/>PCRE<\/a> library by Philip Hazel.<\/p>\n\n<h4>Example 1<\/h4>\n<pre>\t\nIo> re := \"is.*a\" asRegex\nIo> \"This is a test. This is also a test.\" \\\n    allMatchesOfRegex(\"is.*a\") replaceAllWith(\"is not a\")\n==> \"This is not a test. This is not a test.\n<\/pre>\n\n<h4>Example 2<\/h4>\n<pre>\t\nIo> \"11aabb\" allMatchesOfRegex(\"aa*\")\n==> list(\"a\", \"a\")\n\nIo> re := \"(wom)(bat)\" asRegex\nIo> \"wombats are cuddly\" matchesOfRegex(re) replaceAllWith(\"$2$1!\")\n==> batwom!s are cuddly\n<\/pre>\n","copyright":"Steve Dekorte 2005, Daniel Rosengren 2007\n","license":"BSD revised\n","module":"Regex","category":"Parsers\n","slots":{"isExtended":"\tReturns true if the receiver is in extended mode, false if not.\n","asString":"\tReturns a string containing a textual representation of the receiver.\n","with(pattern)":"\tReturns a new Regex created from the given pattern string.\n","notMultiline":"\tThe reverse of multiline.\n","pattern":"\tReturns the pattern string that the receiver was created from.\n","notCaseless":"\tThe reverse of caseless.\n","matchesIn(aString)":"\tReturns a RegexMatches object that enumerates the matches of the receiver\n\tin the given string.\n","names":"\tReturns a list of the name of each named capture.\n\tIf there are no named captures, the list will be empty.\n","isCaseless":"\tReturns true if the receiver is case insensitive, false if not.\n","namedCaptures":"\tReturns a Map that contains the index of each named group.\n","caseless":"\tReturns a case insensitive clone of the receiver, or self if the receiver itself is\n\tcase insensitive:\n\n\t<pre>\t\n\tIo> \"WORD\" matchesRegex(\"[a-z]+\")\n\t==> false\n\n\tIo> \"WORD\" matchesRegex(\"[a-z]+\" asRegex caseless)\n\t==> true\n\t<\/pre>\n","isDotAll":"\tReturns true if the receiver is in dotall mode, false if not.\n","notExtended":"\tThe reverse of extended.\n","multiline":"\t<p>Returns a clone of the receiver with the multiline option turned on,\n\tor self if the receiver itself has the option turned on.<\/p>\n\n\t<p>In multiline mode, \"^\" matches at the beginning of the string and at\n\tthe beginning of each line; and \"$\" matches at the end of the string,\n\tand at the end of each line.\n\tBy default \"^\" only matches at the beginning of the string, and \"$\"\n\tonly matches at the end of the string.<\/p>\n\n\t<pre>\t\n\tIo> \"A\\nB\\nC\" allMatchesForRegex(\"^.\")\n\t==> list(\"A\")\n\n\tIo> \"A\\nB\\nC\" allMatchesForRegex(\"^.\" asRegex multiline)\n\t==> list(\"A\", \"B\", \"C\")\n\t<\/pre>\n","version":"\tReturns a string with PCRE version information.\n","notDotAll":"\tThe reverse of dotAll.\n","dotAll":"\t<p>Returns a clone of the receiver with the dotall option turned on,\n\tor self if the receiver itself has the option turned on.<\/p>\n\n\t<p>In dotall mode, \".\" matches any character, including newline. By default\n\tit matches any character <em>except<\/em> newline.<\/p>\n\n\t<pre>\t\n\tIo> \"A\\nB\" matchesOfRegex(\".+\") next string\n\t==> A\n\n\tIo> \"A\\nB\" matchesOfRegex(\".+\" asRegex dotAll) next string\n\t==> A\\nB\n\t<\/pre>\n","isMultiline":"\tReturns true if the receiver is in multiline mode, false if not.\n","extended":"\t<p>Returns a clone of the receiver with the extended option turned on,\n\tor self if the receiver itself has the option turned on.<\/p>\n\n\t<p>In extended mode, a Regex ignores any whitespace character in the pattern\texcept\n\twhen escaped or inside a character class. This allows you to write clearer patterns\n\tthat may be broken up into several lines.<\/p>\n\n\t<p>Additionally, you can put comments in the pattern. A comment starts with a \"#\"\n\tcharacter and continues to the end of the line, unless the \"#\" is escaped or is\n\tinside a character class.<\/p>\n","asRegex":"\tReturns self.\n","nameTable":"\tReturns a list with the name of each capture.\n\tThe first element will always be nil, because it corresponds to the whole match.\n\tThe second element will contain the name of the first capture, or nil if the first\n\tcapture has no name.\n\tAnd so on.\n","captureCount":"\tReturns the number of captures defined by the pattern.\n"}},"RegexMatch":{"module":"Regex","description":"Contains the result of a regular expression match operation.\nIt acts as a read-only list of captured strings.\nThe first item is the entire matched string.\nEach item after that is a captured sub pattern (anything inbetween\nparenthesis in the pattern).\n\n<pre>\nIo> match := \"37signals\" findRegex(\"([0-9]+)([a-z]+)(!!)?\")\n==> RegexMatch: \"37signals\" \n\n# Item 0 is the entire matched string:\nIo> match at(0)\n==> 37signals\n\n# Item 1 is the first capture (\"[0-9]+\"):\nIo> match at(1)\n==> 37\n\n# Item 2 is the second capture (\"[a-z]+\"):\nIo> match at(2)\n==> signals\n\n# The third sub pattern wasn't part of the match, so item 3 is nil:\nIo> match at(3)\n==> nil\n\n# You can access captures by name:\nIo> match at(\"number\")\n==> 37\nIo> match at(\"word\")\n==> signals\n<\/pre>\n","category":"Parsers\n","slots":{"rangeOf(indexOrName)":"\tReturns the range of the capture with the given index or name.\n","startOf(indexOrName)":"\tReturns the index into the subject at which the capture with the given index or name starts.\n","captures":"\tReturns a list of captured strings. The first element is the whole match.\n","prefix":"\tReturns a slice of the subject string that contains all text before this match.\n\tEquivalent to:\n\t<pre>\n\tmatch subject slice(0, match start)\n\t<\/pre>\n","slice(startIndex, [endIndex])":"\tReturns a new list containing the subset of the receiver from the <em>startIndex<\/em> to the <em>endIndex<\/em>.\n\tThe <em>endIndex<\/em> argument is optional. If not given, it is assumed to be the end of the capture list.\n","asString":"\tReturns a string containing a textual representation of the receiver.\n","map([index], capture, message)":"\tLike <code>foreach<\/code>, but the result of each evaluation of <em>message<\/em> is returned in a list.\n","regex":"\tReturns the Regex that was used to find this match.\n","at(indexOrName)":"\tReturns the capture with the given index or name. <code>at(0)<\/code> is the entire match.\n","endOf(indexOrName)":"\tReturns the index into the subject at which the capture with the given index or name ends.\n","select([index], capture, message)":"\tLike <code>foreach<\/code>, but the values for which the result of evaluating <em>message<\/em> are non-nil are returned\n\tin a list.\n","end":"\tReturns the index into the subject at which the match ends.\n","sizeInChars":"\tReturns the length of the match, in characters.\n","indexOf(name)":"\tReturns the index of the capture with the given name.\n","ranges":"\tReturns a list containing the range of each capture.\n","nameOf(index)":"\tReturns the name of the capture with the given index.\n","names":"\tReturns a list of the name of each named capture.\n\tIf there are no named captures, the list will be empty.\n","postfix":"\tReturns a slice of the subject string that contains all text after this match.\n\tEquivalent to:\n\t<pre>\n\tmatch subject slice(match end)\n\t<\/pre>\n","subject":"\tReturns the string that this match was found in.\n","start":"\tReturns the index into the subject at which the match starts.\n","string":"\tReturns the matched string.\n","expandTo(templateString)":"\tReturns <em>templateString<\/em> with capture placeholders replaced with what they represent.\n\t<code>$0<\/code> is replaced with the whole match, <code>$1<\/code> is replaced with the first\n\tsub capture, etc. <code>${name}<\/code> is replaced with the capture of that name.\n","size":"\tReturns the number of captures.\n","range":"\tReturns the range of the match in the subject.\n","foreach([index], capture, message)":"\tLoops through the captures, assigns each capture to <em>capture<\/em>, and evaluates <em>message<\/em>.\n\tReturns a list with the result of each evaluation.\n"}}},"Libxml2":{"XmlReader":{"module":"Libxml2","category":"Parsers\n","slots":{}},"XmlWriter":{"module":"Libxml2","category":"Parsers\n","slots":{}}},"Yajl":{"YajlGenParser":{"description":"This object can be used to parse YajlGen \/ HTML \/ XML.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"Yajl","category":"Parsers\n","slots":{}},"YajlParser":{"description":"This object can be used to parse Yajl \/ HTML \/ XML.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"Yajl","category":"Parsers\n","slots":{}}},"SGML":{"SGMLParser":{"description":"This object can be used to parse SGML \/ HTML \/ XML.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"SGML","category":"Parsers\n","slots":{"parse(aSequence)":"\tParses aSequence and calls the following methods on self;\n<pre>\t\nstartElement(name)\nendElement(name)\nnewAttribute(key, value)\nnewText(text)\n<\/pre>\t\nfor each of the items it finds. Returns self.\n","tagForString(aSequence)":"Parses aSequence and returns an SGMLTag object.\n"}},"SGMLElement":{"Representation":"of an SGML \/ HTML \/ XML tag.\n","module":"SGML","category":"Parsers\n","slots":{"asString":"Returns a String representation of the tag and all of it's subitems.\n","attributes":"Returns a Map containing the tag's attributes.\n","name":"Returns the tag name\n","setName(aString)":" Sets the tag name. Returns self.\n","subitems":"Returns a List containing the tag's subitems.\n"}}}},"Compilers":{"Loki":{"Linker":{"description":"\tAn object that enables low level introspection into a running Io VM.\n","copyright":"Marc Fauconneau, 2006\n","license":"BSD revised\n","module":"Loki","category":"Compilers\n","slots":{"hexSeqToBytes(aSeq)":"Returns a Sequence containing a binary representation of the hex data in aSeq.\n","makeCFunction(aSeq, slotName, object)":"Creates a CFunction which users the beginning address of the data in aSeq as it's function pointer and \nadds the CFunction to the given object on slot slotName.\n","bytesToHexSeq(aSeq)":"Returns a Sequence containing a hex representation of aSeq.\n"}}}},"Databases":{"Postgres":{"Postgres":{"module":"Postgres","category":"Databases\n","slots":{}}},"SkipDB":{"SkipDB":{"description":"An ordered key\/value database implemented using a skiplist data structure.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"SkipDB","category":"Databases\n","slots":{"atPut(keySymbol, valueSequence)":"\tSets the value of valueSequence with the key keySymbol. Returns self.\n","cursor":"\tReturns a new cursor to enumerate the receiver.\n","atRemove(keySymbol)":"\tRemoves the specified key. Returns self\n","size":"\tReturns the number of keys in the receiver.\n","at(keySymbol)":"\tReturns a Sequence for the value at the given key or nil if there is no such key.\n","headerPid":"\tReturns the headerPid number.\n"}},"SkipDBCursor":{"description":"An iterator object for a SkipDB.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"SkipDB","category":"Databases\n","slots":{"first":"\tMove cursor to first item. Returns self.\n","key":"\tReturns the current cursor key, or nil if the cursor is out of range.\n","last":"\tMove cursor to last item. Returns self.\n","value":"\tReturns the current cursor key, or nil if the cursor is out of range.\n","goto(aKey)":"\tMove cursor to the specified key or nearest preceeding key. Returns self\n","next":"\tMove cursor to next item. Returns self.\n","previous":"\tMove cursor to previous item. Returns self.\n"}},"SkipDBM":{"description":"SkipDB is a skip-list based key-value database. SkipDBM manages any number of skipdbs within the same file. \nThe root skipdb can be accessed using the root method.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"SkipDB","category":"Databases\n","slots":{"open":"\tOpens the dbm. Returns self.\n","path":"\tReturns the path to the dbm. Returns self.\n","root":"\tReturns the root SkipDB.\n","at(pidNumber)":"\tReturns the SkipDB at the specified persistent ID or nil if it is not found.\n","delete":"\tDeletes the db. Returns self.\n","compact":"\tCompacts the database. Returns self.\n","setPath(aString)":"\tSets the path to the dbm folder. Returns self.\n","commitTransaction":"\tCommit a transaction. Returns self.\n","beginTransaction":"\tBegin a transaction. Returns self.\n","close":"\tCloses the dbm.\n"}}},"SQLite3":{"SQLite3":{"module":"SQLite3","description":"\tSQLite provides a embedded simple and fast \n\t(2x faster than PostgreSQL or MySQL) SQL database. \n\tSee http:\/\/www.hwaci.com\/sw\/sqlite\/ for details. \n\tIt's SQL command set is described \n\tat http:\/\/www.hwaci.com\/sw\/sqlite\/lang.html. \n\tSQLite was written by Dr. Richard Hipp who offers consulting \n\tservices for custom modifications and support of SQLite. Example:\n\t<p>\n<pre>\t\ndb := SQLite clone\ndb setPath(\"myDatabase.sqlite\")\ndb open\ndb exec(\"CREATE TABLE Dbm (key, value)\")\ndb exec(\"CREATE INDEX DbmIndex ON Dbm (key)\")\ndb exec(\"INSERT INTO Dbm ('key', 'value') VALUES ('a', '123')\")\ndb exec(\"INSERT INTO Dbm ('key', 'value') VALUES ('a', 'efg')\")\nrows := db exec(\"SELECT key, value FROM Dbm WHERE key='a'\")\ndb exec(\"DELETE FROM Dbm WHERE key='a'\")\nrows := db exec(\"SELECT key, value FROM Dbm WHERE key='a'\")\ndb close\n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","category":"\tDatabases\n","slots":{"viewNames":"\tReturns a list containing the names of all\n\tviews in the database.\n","timeoutSeconds":"\tReturns the number of seconds to wait before timing out an\n\topen call. If the number is 0, an open call will never timeout.\n","exec(aString)":"\tOpens the database if it is not already open and executes\n\taString as an sql command. Results a List of Map objects or Nil if\n\tthere was an error. Each map holds the contents of a row.\n\tThe key\/value pairs of the maps being column name\/column value\n\tpairs for a row.\n","tableNames":"\tReturns a list containing the names of all tables in the database.\n","version":"\tResults a string the version of SQLite being used.\n","lastInsertRowId":"\tReturns the number with the row id of the last row inserted.\n","close":"\tCloses the database if it is open. Returns self. If the database is open when the open is garbage collected, it will be automatically closed.\n","debugOff":"\tTurns off debugging.\n","changes":"\tReturns the number of rows that were changed by the most\n\trecent SQL statement. Or Nil if the database is closed.\n","debugOn":"\tTurns on debugging.\n","path":"\tReturns the path to the database file.\n","columnNamesOfTable(tableName)":"\tReturns a list containing the names of all columns in the specified table.\n","setTimeoutSeconds(aNumber)":"\tSets the open timeout to aNumber. If aNumber is 0, an open\n\tcall will never timeout. Returns self.\n","isOpen":"\tReturns true if the database is open, false otherwise.\n","error":"\tResults a string containing the current error. If there is no error, Nil is returned.\n","escapeString(aString)":"\tReturns a translated version of aString by making two copies of \n\tevery single-quote (') character. This has the effect of escaping the \n\tend-of-string meaning of single-quote within a string literal.\n","open(optionalPathString)":"\tOpens the database. If there is an optionalPathString argument,\n\tthe path is set to it's value before opening the database. If path is \"\" or \":memory:\"\n\ta database will be created in-memory, otherwise the file specified by path is opened.\n\tReturns self or Nil upon failure.\n\n\tIf the databse is locked, \"yield\" will be called until it is accessable or\n\ttimeoutSeconds has expired. \"\"\n","setPath":"\tSets the path to the database file. Returns self.\n"}}},"SqlDatabase":{"SqlDatabase":{"module":"SqlDatabase","category":"Databases\n","slots":{}}},"SQLite":{"SQLite":{"description":"SQLite provides a embedded simple and fast (2x faster than PostgreSQL or MySQL) SQL database. See http:\/\/www.hwaci.com\/sw\/sqlite\/ for details. It's SQL command set is described at http:\/\/www.hwaci.com\/sw\/sqlite\/lang.html. SQLite was written by Dr. Richard Hipp who offers consulting services for custom modifications and support of SQLite. Example:\n<pre>\t\ndb := SQLite clone\ndb setPath(\"myDatabase.sqlite\")\ndb open\ndb exec(\"CREATE TABLE Dbm (key, value)\")\ndb exec(\"CREATE INDEX DbmIndex ON Dbm (key)\")\ndb exec(\"INSERT INTO Dbm ('key', 'value') VALUES ('a', '123')\")\ndb exec(\"INSERT INTO Dbm ('key', 'value') VALUES ('a', 'efg')\")\nrows := db exec(\"SELECT key, value FROM Dbm WHERE key='a'\")\ndb exec(\"DELETE FROM Dbm WHERE key='a'\")\nrows := db exec(\"SELECT key, value FROM Dbm WHERE key='a'\")\ndb close\n<\/pre>\n","copyright":"\tSteve Dekorte, 2004\n","license":"\tBSD revised\n","module":"SQLite","category":"\tDatabases\n","slots":{"close":"\tCloses the database if it is open. Returns self. \n\tIf the database is open when the open is garbage collected, \n\tit will be automatically closed.\n","debugOff":"\tTurns off debugging.\n","lastInsertRowId":"\tReturns the number with the row id of the last row inserted.\n","setPath(aSeq)":"\tSets the path to the database file. Returns self.\n","setTimeoutSeconds(aNumber)":"\tSets the open timeout to aNumber. If aNumber is 0, an open \n\tcall will never timeout. Returns self.\n","tableNames":"\tReturns a list containing the names of all tables in the database.\n","columnNamesOfTable(tableName)":"\tReturns a list containing the names of all columns in the specified table.\n","exec(aString)":"\tOpens the database if it is not already open and executes\n\taString as an sql command. Results a List of Map objects or Nil if\n\tthere was an error. Each map holds the contents of a row.\n\tThe key\/value pairs of the maps being column name\/column value\n\tpairs for a row. \")\n","version":"\tResults a string the version of SQLite being used.\n","timeoutSeconds":"\tReturns the number of seconds to wait before timing out an open call. \n\tIf the number is 0, an open call will never timeout.\n","changes":"\tReturns the number of rows that were changed by the most \n\trecent SQL statement. Or Nil if the database is closed.\n","debugOn":"\tTurns on debugging.\n","path":"\tReturns the path to the database file.\n","viewNames":"\tReturns a list containing the names of all views in the database.\n","isOpen":"\tReturns true if the database is open, false otherwise.\n","error":"\tResults a string containing the current error. \n\tIf there is no error, Nil is returned.\n","escapeString(aString)":"\tReturns a translated version of aString by making two \n\tcopies of every single-quote (') character. This has the effect \n\tof escaping the end-of-string meaning of single-quote within a string literal.\n","open(optionalPathString)":"\tOpens the database.Returns self on success or nil upon failure.\n\tIf the databse is locked, \"yield\" will be called until it is \n\taccessable or timeoutSeconds has expired.\n"}}},"QDBM":{"QDBM":{"description":"An ordered key\/value database that supports transactions and arbitrary kay and value sizes.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"QDBM","category":"Databases\n","slots":{"sync":"\tSyncs the database. Returns self\n","cursorPut(value)":"\tSets the value at the current cursor postion. Returns self.\n","open(path)":"\tOpens the database.\n","atPut(keySymbol, valueSequence)":"\tSets the value of valueSequence with the key keySymbol. Returns self.\n","sizeAt(keySymbol)":"\tReturns the size of the value at the given key or nil if there is no such key.\n","cursorFirst":"\tMove cursor to first record. Returns self\n","close":"\tCloses the database.\n","cursorKey":"\tReturns current cursor key or nil.\n","cursorValue":"\tReturns current cursor value or nil.\n","cursorJumpBackward(key)":"\tMove cursor to previous record around key. Returns self\n","at(keySymbol)":"\tReturns a Sequence for the value at the given key or nil if there is no such key.\n","name":"\tReturns the name of the database.\n","cursorNext":"\tMove cursor to next record. Returns true if there is another key, \n\tor false if there is no next record.\n","commit":"\tCommit transaction. Returns self\n","size":"\tReturns number of records in database. Returns self\n","optimize":"\tOptimizes the database. Returns self\n","abort":"\tAbort transaction. Returns self\n","cursorJumpForward(key)":"\tMove cursor to next record around key. Returns self\n","cursorRemove":"\tRemoves the current cursor postion. Returns self.\n","atRemove(keySymbol)":"\tRemoves the specified key. Returns self\n","cursorLast":"\tMove cursor to last record. Returns self\n","begin":"\tBegin transaction. Returns self\n","cursorPrevious":"\tMove cursor to previous record. Returns true if there is another key, \n\tor false if there is no previous record.\n"}}},"Obsidian":{"PDB":{"proto":"Obsidian\n","module":"Obsidian","copyright":"Steve Dekorte 2008\n","credits":"Steve Dekorte & Rich Collins\n","license":"BSD revised\n","description":"An arbitrary graph database with support for on-disk garbage collection. Example use:\n\n<h4>Setup<\/h4>\n\n<pre>\nPDB open\nPDB root atPut(\"users\", PMap clone)\nPDB sync\nPDB close\n<\/pre>\n\nPMap is a Map\/Dictionary whose keys are lazily loaded from the database. \nPDB root is the root PMap in the database and the root object used for PDB's garbage collector. \nPDB sync needs to be called to write any changes to the database.\n\n<h4>Defining a Persistent Object<\/h4>\n\n<pre>\nUser := Object clone pSlots(name, email)\n<\/pre>\n\nThe pSlots(), declares which slots on the object should be persisted. \nThe List, Date, Sequence and Number primitives already know how to persist themselves.\n\n<h4>Inserting a Persistent Object<\/h4>\n\n<pre>\nPDB open \nuser := User clone setName(\"steve\") setEmail(\"steve@foo.com\")\nPDB root users atPut(\"steve\", user)\nPDB sync\nPDB close\n<\/pre>\n\n<h4>Accessing a Persistent Object<\/h4>\n\n<pre>\nuser := PDB root users at(\"steve\")\nwriteln(\"user name = \", user name, \" email = \", user email)\n<\/pre>\n\n<h4>Updating a Persistent Object<\/h4>\n\n<pre>\nuser setEmail(\"steve@newDomain.com\")\nPDB sync \n<\/pre>\n\nPDB sync will scan all persistent objects in the vm and save any with changes to their persistent slots. \nIf the object was already in the database, only it's updated slots will be written.\n\n<h4>Removing an entry in a PMap<\/h4>\n\n<pre>\nPDB root users removeAt(\"steve\")\n<\/pre>\n\n<h4>Removing a persistent object<\/h4>\n\nThis is never done explicitly, instead calling:\n\n<pre>\nPDB collectGarbage\n<\/pre>\n\nWill remove all objects unreachable by the reference graph from the root PMap.\n\n<p>\nNotes: Currently, PDB is a singleton.\n","category":"Databases\n","slots":{"close":"Close the persistence database.\n","collectGarbage":"Remove from PDB all objects not accessible via the root object.\n","sync":"Immediately persist data for all objects marked dirty by Collector whose \nshouldPersistByDefault is true, or that have specifically requested to be\npersisted since the last sync via addObjectToPersist.\n","reopen":"Sync, close and reopen the PDB store.\n","objectAtPpid":"Return the object associated in the database with a ppid.\n","root":"Return the root PMap object used to store and retrieve persistent objects and their slots.\n","addObjectToPersist":"Register an object to be persisted in the next PDB sync.\n","newId":"Generate a new PDB id number for use as a persistent object's ppid.\n","show":"Print to standard output a listing of all objects and IDs stored in PDB.\n"}},"Obsidian":{"credits":"In collaboration with Rich Collins\n","description":"A double key\/value database with cursors on first key. Basis for PDB.\n","copyright":"Steve Dekorte 2008\n","license":"BSD revised\n","module":"Obsidian","category":"Databases\n","slots":{"onAt":"Return the value associated with slotName of stored object whose ppid is objId.\n","delete":"Removes the persistence database file set via setPath.\n","close":"Closes the persistence database file.\n"}},"ObsidianServer":{"description":"\nA network interface for Obsidian.\n\n<h4>Starting a Server<\/h4>\n\n<pre>\noServer := ObsidianServer clone\noServer localObject setName(\"foo\") open\noServer start\n<\/pre>\n\n<h4>Example Client Code<\/h4>\n\n<pre>\nclient := MDOConnection clone setHost(\"127.0.0.1\") setPort(8000) connect\nclient onAtPut(\"1\", \"aKey\", \"aSlot\")\nclient onAtPut(\"1\", \"cKey\", \"cSlot\")\nclient onAtPut(\"1\", \"bKey\", \"bSlot\")\nclient first(\"1\", 5) println\na := client onAt(\"1\", \"aKey\")\nwriteln(\"a = \", a)\nb := client onAt(\"1\", \"bKey\")\nwriteln(\"b = \", b)\nclient close\n<\/pre>\n\nThe messages accepted by the Obsidian server include:\n\n<pre>\nonAtPut(id, key, value)\nonAt(id, key)\nonRemoveAt(id, key)\nonFirst(id, count)\nonLast(id, count)\nonAfter(id, key, count)\nonBefore(id, key, count)\n<\/pre>\n","copyright":"Steve Dekorte 2008\n","license":"BSD revised\n","module":"Obsidian","category":"Databases\n","slots":{}},"PObject":{"module":"Obsidian","category":"Databases\n","slots":{}},"PMap":{"module":"Obsidian","description":"PMap stores persistent data in a Map-like fashion and lazily loads\navailable slots from the PDB backing store. Values stored or loaded are cached\ninto local object slots.\n","category":"Databases\n","slots":{"removeSlot":"Marks a value for removal.\n","removeAt":"Marks a value for removal.\n","at(slotName)":"Tries to obtain a value for slot slotName from a local slot of that name,\nor tries to load it from the PDB if the local slot does not exist. When all else fails, returns nil.\n<p>\nIf slotName begins with an underscore (\"_\"), returns the id of the slot from PDB instead of the value.\n","objectsForKeys":"Returns a list of values for each key in the list given. Keys beginning with an\nunderscore (\"_\") are returned verbatim.\n","atPut(slotName, value)":" Records value in the slot named slotName.\n","persistSlots":"Cleans up dirty slots by committing them to PDB.\n","slotCount":"Returns the number of slots committed to PDB.\n","createIfAbsent":"Creates a slot with a new PMap clone if not already present.\n","persist":"Commits the PMap's slots to PDB.\n","shouldPersistByDefault":"PDB boolean flag indicating whether this object should be considered for persistence\nwhen persistence has not been specifically requested by calling ppid() or PDB addObjectToPersist.\nAlways true by default for PMap.\n","init":"Initialize a new PMap and automatically add it as a persistent object to PDB.\n"}},"ObsidianClient":{"module":"Obsidian","category":"Databases\n","slots":{}}},"TokyoCabinet":{"TokyoCabinet":{"description":"An ordered key\/value database that supports transactions and arbitrary kay and value sizes.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"TokyoCabinet","category":"Databases\n","slots":{"atPut(keySymbol, valueSequence)":"\tSets the value of valueSequence with the key keySymbol. Returns self.\n","compareType":"Returns the compare type function name used.\n","sync":"\tSyncs the database. Returns self\n","transactionalRemoveAt(key)":" Transactionally remove the given key. Returns self.\n","commit":"\tCommit transaction. Returns self\n","atRemove(keySymbol)":"\tRemoves the specified key. Returns self\n","sizeAt(keySymbol)":"\tReturns the size of the value at the given key or nil if there is no such key.\n","atApple(keySymbol, valueSequence)":"\tAppends valueSequence to the current value at keySymbol. Returns self.\n","transactionalAtPut(key, value)":" Transactionally insert the given key and value. Returns self.\n","open(path)":"\tOpens the database.\n","close":"\tCloses the database.\n","prefixCursor":"\tReturns a new prefix cursor object.\n","setPath(aPath)":" Sets the path of the database file. Returns self.\n","path":"Returns the path of the database file.\n","setCompareType(name)":"\tSets the compare type function used to compare keys in the database. Valid compare types include:\n\t\"lexical\", \"decimal\", \"int32\", \"int64\" and \"path\". Returns self.\n","abort":"\tAbort transaction. Returns self\n","cursor":"\tReturns a new cursor object.\n","begin":"\tBegin transaction. Returns self\n","optimize":"\tOptimizes the database. Returns self\n","at(keySymbol)":"\tReturns a Sequence for the value at the given key or nil if there is no such key.\n","size":"\tReturns number of records in database. Returns self\n"}},"TokyoCabinetPrefixCursor":{"description":"A database cursor.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"TokyoCabinet","category":"Databases\n","slots":{"close":"\tCloses the database.\n","jump(key)":"\tMove cursor to record before key. Returns self\n","first":"\tMove cursor to first record. Returns self\n","last":"\tMove cursor to last record. Returns self\n","value":"\tReturns current cursor value or nil.\n","put(value)":"\tSets the value at the current cursor postion. Returns self.\n","next":"\tMove cursor to next record. Returns true if there is another key, \n\tor false if there is no next record.\n","remove":"\tRemoves the current cursor postion. Returns self.\n","key":"\tReturns current cursor key or nil.\n","previous":"\tMove cursor to previous record. Returns true if there is another key, \n\tor false if there is no previous record.\n"}},"TokyoCabinetCursor":{"description":"A database cursor.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"TokyoCabinet","category":"Databases\n","slots":{"close":"\tCloses the database.\n","jump(key)":"\tMove cursor to record before key. Returns self\n","first":"\tMove cursor to first record. Returns self\n","last":"\tMove cursor to last record. Returns self\n","value":"\tReturns current cursor value or nil.\n","put(value)":"\tSets the value at the current cursor postion. Returns self.\n","next":"\tMove cursor to next record. Returns true if there is another key, \n\tor false if there is no next record.\n","remove":"\tRemoves the current cursor postion. Returns self.\n","key":"\tReturns current cursor key or nil.\n","previous":"\tMove cursor to previous record. Returns true if there is another key, \n\tor false if there is no previous record.\n"}}},"TagDB":{"TagDB":{"description":"Binding for <a href=http:\/\/www.dekorte.com\/projects\/opensource\/tagdb\/>tagdb<\/a> - a tagging database usefull for flickr-like tag searches.\n<p>\nExample use:\n<pre>\ntdb := TagDB clone\n\ntdb setPath(\"test\")\ntdb open\n\nwriteln(\"size = \", tdb size)\ntdb atKeyPutTags(\"f430 for sale\", list(\"red\", \"ferrari\"))\ntdb atKeyPutTags(\"lotus esprit\", list(\"lotus\", \"esprit\"))\nwriteln(\"size = \", tdb size)\nkeys := tdb keysForTags(list(\"lotus\"))\nwriteln(\"keys = \", tdb symbolForId(keys at(0)))\ntdb close\ntdb delete\n<\/pre>\n","copyright":"Steve Dekorte, 2007\n","license":"BSD revised\n","module":"TagDB","category":"Databases\n","slots":{"open":"\tOpen the tagdb. Returns self.\n","atKeyPutTags(key, tagNameList)":"\tSets the tags for key to those in tagNameList. Returns self.\n","keyAtIndex(indexNumber)":"\tReturns the key at the specified index of nil if the index is out of range.\n","size":"\tReturns number of keys in the database.\n","symbolForId(aNumber)":"\tReturns the TagDB symbol for aNumber.\n","idForSymbol(aSeq)":"\tReturns the TagDB id Number for the symbol specified by aSeq.\n","removeKey(aKey)":"\tRemoves the specified key if it is present. Returns self.\n","close":"\tClose the tagdb. Returns self.\n","setPath(aPath)":"\tSets the path to the tag database. Returns self.\n","uniqueTagNames":"Returns a list of all unique tag names.\n","delete":"\tDeletes all keys in the database.\n","keysForTags(aTagNameList)":"\tReturns list of keys whose tags contain all of the tags in aTagNameList.\n","tagsAtKey(key)":"\tReturns the tags for the specified key.\n","allUniqueTagIds":"\tReturns a list of all unique tag ids.\n"}}},"Memcached":{"Memcached":{"module":"Memcached","Aleksey":"Yeschenko, 2009\n","credits":"Aleksey Yeschenko, 2009\n","license":"BSD revised\n","description":"<a href=\"http:\/\/www.danga.com\/memcached\/\">memcached<\/a> is a high-performance,\ndistributed memory object caching system, generic in nature,\nbut intended for use in speeding up dynamic web applications\nby alleviating database load. Memcached is an Io client library for memcached,\nbased on C <a href=\"http:\/\/tangent.org\/552\/libmemcached.html\">libmemcached<\/a>.\n","category":"Databases\n","slots":{"flushAll([expiration])":"Asks memcached to invalidate all existing items immediately (by default)\nor after the expiration specified.\nAlways returns true.\n","getMulti(keys)":"Asks memcached to retrieve data corresponding to the list of keys.\nReturns a Map with the results.\nIf some of the keys appearing in a retrieval request are not sent back\nby the server in the item list this means that the server does not\nhold items with such keys\n","replace(key, value[, expiration])":"Asks memcached to store the value identified by the key,\nbut only if the server *does* already hold data for this key.\nReturns true on success, false if there is already data for this key.\nOtherwise raises an exception.\n","get(key)":"Asks memcached to retrieve data corresponding to the key.\nRaises \"NOT FOUND\" if the data is not there.\n","with(servers)":"\tReturns a new instance of Memcached.\n\tAccepts a Sequence or a List of server addresses.\n","atIfAbsentPut(key, value[, expiration])":"\tIf a value is present at the specified key, its value is returned.\n\tOtherwise, inserts the new value and returns it.\n","set(key, value[, expiration])":"Asks memcached to store the value identified by the key.\nReturns true on success, otherwise raises an exception.\n","addServer(address)":"Adds a memcached server. address is a \"host:port\" string, e.g., \"127.0.0.1:11211\"\nReturns self.\n","incr([offset])":"Asks memcached to increment data for some item in place. The data for the item is\ntreated as decimal representation of a 64-bit unsigned integer. If the\ncurrent data value does not conform to such a representation, the\ncommands behave as if the value were 0.\nDefault offset is 1.\nReturns the new value.\n","at(key, optionalDefaultValue)":"\tAsks memcached to retrieve data corresponding to the key.\n\tReturns nil if the data is not there (or if the data *is* nil).\n","prepend(key, value)":"Asks memcached to add this value to an existing key before existing value.\nReturns true on success, otherwise raises an exception.\nvalue should be a Sequence.\nSupported by memcached 1.2.4+\n","decr([offset])":"Asks memcached to decrement data for some item in place. The data for the item is\ntreated as decimal representation of a 64-bit unsigned integer. If the\ncurrent data value does not conform to such a representation, the\ncommands behave as if the value were 0.\nDefault offset is 1.\nReturns the new value.\n","append(key, value)":"Asks memcached to add this value to an existing key after existing value.\nReturns true on success, otherwise raises an exception.\nvalue should be a Sequence.\nSupported by memcached 1.2.4+\n","stats":"Returns a Map with servers' statistics. Keys are server addresses,\nvalues are maps with actual stats.\n","add(key, value[, expiration])":"Asks memcached to store the value identified by the key,\nbut only if the server *doesn't* already hold data for this key.\nReturns true on success, false in case of a collision.\nOtherwise raises an exception.\n","removeAt(key)":"\tAsks memcached to remove value with a given key. Returns self.\n","atPut(key, value[, expiration])":"\tAsks memcached to store the value identified by the key.\n\tSame as Memcached set, but returns self.\n","delete(key[, time])":"Asks memcached to delete an item with the given key.\ntime is the amount of time in seconds (or Unix time until which)\nthe client wishes the server to refuse \"add\" and \"replace\" commands\nwith this key.\nReturns true on success, false if there is no item with the given key.\nOtherwise raises an exception.\n"}}},"DBI":{"DBIRecord":{"copyrigth":"Jeremy Cowgar, 2006\n","license":"BSD revised\n","module":"DBI","description":"A DBI Record. When utilizing `foreach' or `populate' methods\nof a DBIResult object, you can pass an optional Object cloned from DBIRecord.\nThis object will be populated with the row contents making it possible to\nwrite objects that represent your SQL results. A simple example would be:\n\n<pre>\nPerson := DBIRecord clone do (fullName := method(firstName..\" \"..lastName))\nq := conn query(\"SELECT id, firstName, lastName FROM people\")\nq foreach(Person, p, writeln(\"Name = \", p fullName))\n<\/pre>\n\nAs you can see, fullName was not in the SQL query, however, a dynamic method\nin your Person class.\n\nDBIRecord in and of itself provides no real functionality. It simply acts\nas an Object and stores the values from the SQL query into a Map. You can\naccess the field information:\n\n<pre>\no := r populate(Person)\no firstName            \/\/ would retrieve the firstName value of the SQL query\no setFirstName(\"John\") \/\/ would update the object's firstName value to be John\n<\/pre>\n\nDo not confuse the above example as updating the actual database. The call\nto setFirstName <i>only<\/i> updates the objects representation of firstName.\n","category":"Databases\n","slots":{"with(aMap)":" Returns a new DBIRecord instance for the given value map.\n","forward":"Private method that implements getting and setting values.\n"}},"DBIResult":{"description":"A DBI Result created by a call to DBIConn query.\n","copyright":"Jeremy Cowgar, 2006\n","license":"BSD revised\n","module":"DBI","category":"Databases\n","slots":{"first":"Move the cursor to the first record.\n","seek(row_number)":" Move the cursor to the nth record.\n","fields":"Returns a list of field names in the result.\n","populate(object)":"\tPopulates a decendent of DBIRecord with the current record's contents. \n\tSee `DBIRecord' for further explanation and an example.\n","done":"\tClose and free the result. This <b>must<\/b> be called on\neach result. Failure to do so will cause memory leaks and open queries with\nthe database server.\n","last":"Move the cursor to the last record.\n","position":"Return the current row's position (or index).\n","size":"Returns the number of rows available.\n","next":"Move the cursor to the next record.\n","at(index_or_name)":"\t Returns the contents of the given field. \n\t The parameter can be a field index or a field name.\n","foreach([Object], value, message)":"Loops over the records in the result starting at either the first result \n(if the cursor has never been moved) or it's current location if moved. i.e.\n\n<pre>\nr := conn query(\"SELECT * FROM people\")\nr foreach(r, r at(1))\n<\/pre>\n\nThe above would start at the first row, however, you can move around in the\nresult set and then foreach would pickup where you left off, for instance, say\nyou wanted to skip the first three rows:\n\n<pre>\nr := conn query(\"SELECT * FROM people\")\nr seek(4)\nr foreach(r, r at (1))\n<\/pre>\n\nThe above would start at the record #4, not at the beginning.\n\nThe optional Object parameter would cause a decendent of DBIRecord to be\npopulate instead of the index being set. This allows for advanced\nfunctionality. Please see `DBIRecord' for further information and an example.\n","previous":"Move the cursor to the previous record.\n"}},"DBI":{"description":"An object for wrapping libdbi to allow Io access to\na multitude of database systems transparently.\n","copyright":"Jeremy Cowgar, 2006\n","license":"BSD revised\n","module":"DBI","category":"Databases\n","slots":{"drivers":"\tGet a list of drivers and it's associated information:\n\n\t<ol>\n\t\t<li>name<\/li>\n\t\t<li>description<\/li>\n\t\t<li>filename<\/li>\n\t\t<li>version<\/li>\n\t\t<li>date compiled<\/li>\n\t\t<li>maintainer<\/li>\n\t\t<li>url<\/li>\n\t<\/ol>\n","version":"Return string version of libdbi being used.\n","initWithDriversPath":"\tInitialize the DBI environment with the specified libdbi driver path.\n","with(driverName)":" Get a new connection with the given driver.\n","init":"Initialize the DBI environment with the default driver path.\n"}},"DBIConn":{"description":"An object that represents a DBI Connection.\n","copyright":"Jeremy Cowgar 2006\n","license":"BSD revised\n","module":"DBI","category":"Databases\n","slots":{"query(sql_query)":"\tPerform a database query returning a DBIResult object.\n","options":"Retrieve an option list of the connection.\n","ping":"\tPing the database to see if it's alive. \n\tWill return true if it is, otherwise false.\n","connect":"Connect to the database server.\n","queryOne([object], sql)":"\tPerform a query and return the first\n\tresult.\n\n\tIf [object] is supplied, the object is populated with the contents of the\n\tresult, the result is marked done and the object is returned.\n","quote(value)":"\tQuote a string value according to the database server's specifications.\n","sequenceLast([name])":"\tReturn the last inserted sequence value.\n","close":"Close the connection to the database.\n","optionClear(key)":" Clear a specific option associated with the connection.\n","sequenceNext([name])":"\tReturn the next sequence that will be used during an INSERT query.\n","optionPut(key,value)":" Add an option key, value pair to the connection.\n","execute(sql_query)":"\tPerform a database query that expects no results. \n\tReturns the number of rows affected.\n","option(key)":" Retrieve an option value for the connection.\n","optionsClear":"Clear all options associated with the connection\n","driver":"Return database driver name.\n"}}},"MySQL":{"MySQL":{"description":"<a href=\"http:\/\/www.mysql.com\/\">MySQL<\/a> is a fast, multi-threaded,\nmulti-user SQL database server. IoMySQL is a MySQL binding for Io,\nby <a href=\"http:\/\/dahlia.pe.kr\/\">Min-hee Hong<\/a>.\n\n<pre><code>\nmy := MySQL establish(&quot;localhost&quot;, &quot;user&quot;, &quot;password&quot;, &quot;database&quot;)\n\n# Get rows by Map\nmy queryThenMap(&quot;SELECT * FROM rel&quot;) foreach(at(&quot;col&quot;) println)\n# Get rows by List\nmy query(&quot;SELECT * FROM rel&quot;) foreach(at(0) println)\n\nmy close\n<\/code><\/pre>\n","copyright":"Min-hee Hong, 2007\n","license":"MIT License\n","module":"MySQL","category":"Databases\n","slots":{"connect(host, user, password, database, port, unixSocket, useSSL)":"\tConnect to a MySQL database.\n","lastInsertRowId":"\tReturns the value generated for an AUTO_INCREMENT column by the previous INSERT or UPDATE statement.\n","establish":"\tEstablish a connection to a MySQL database.\n","connected":"\tReturns true if connected to the database, false otherwise.\n","query(aQueryString)":"\tPerform a SQL query and return a list of results.\n\t<pre>\n\tdb query(\"SELECT * FROM accounts\") foreach(println)\n\t<\/pre>\n","close":"\tCloses a previously opened connection.\n"}}}},"UserInterface":{"Clutter":{"Clutter":{"module":"Clutter","description":"Clutter is a GObject based library for creating fast, visually rich, graphical user interfaces.\n\nClutter works by manipulating a scene-graph of 2D surfaces, or 'actors', inside a 3D space.\n\nClutterActor is the base class for such surfaces. All ClutterActors can be positioned, scaled and rotated in 3D space. In addition, other properties can be set, such as 2D clipping, children and opacity. Tranforms applied to a parent actor also apply to any children. Actors are also able to receive events.\n\nSubclasses of ClutterActor include ClutterStage, ClutterTexture, ClutterLabel, ClutterRectangle, ClutterEntry and ClutterGroup. ClutterActors are added to a parent, transformed and then made visible.\n\nClutterStage is the top level ClutterActor - it's the representation of a window, or framebuffer. It is created automatically when Clutter is initialised. ClutterStage is a ClutterGroup, a class implementing the ClutterCointainer interface.\n\nClutterTimelines provide the basis for Clutter's animation utilities. Multiple timelines can be synchronised using ClutterScore, and ClutterBehaviour and ClutterEffect allow for the creation of animation effects such as transitions.\n\nClutter further contains a number of utilities, including; ClutterScript - for loading 'UI definition' files formatted in JSON, ClutterShader - a class for applying GPU shaders to actors, ClutterModel - a utility class for MVC list type implementations, and fixed point math utilities.\n\nFor detailed docs, see <a href=http:\/\/clutter-project.org\/docs\/clutter\/stable\/>clutter-project<\/a>\n","category":"UserInterface\n","slots":{"setSharedInt(firstInt, ...)":"","grabKeyboard(actor)":"","grabPointer(actor[, deviceId])":"","setFontHinting(useFontHinting)":"If <code>useFontHinting<\/code> is <code>false<\/code>, <code>CLUTTER_FONT_MIPMAPPING<\/code> flag will be used.\n","fontHinting":"Returns <code>true<\/code> if <code>CLUTTER_FONT_HINTING<\/code>\n"}}}},"Concurrency":{"Thread":{"Thread":{"description":"\tFor native threads.\nExample use;\n<pre>\t\nThread createThread(\"1+1\") \/\/ evals 1+1 in a new thread and an independent Io VM\n<\/pre>\n","copyright":"Steve Dekorte, 2006\n","license":"BSD revised\n","module":"Thread","category":"Concurrency\n","slots":{"threadCount":"\tReturns the number of OS threads currently running in the process.\n","createThread(aSequence)":"\tCreates a new IoState and evals aSequence in it using a new OS thread. Returns self immediately.\n","endCurrentThread":"\tEnds the currently running OS thread.\n"}}}},"Server":{"Curses":{"Curses":{"module":"Curses","copyright":"Steve Dekorte, 2004\n","credits":"Original version by Edwin Zacharias. getCh method by Scott Dunlop.\n","license":"BSD revised\n","description":"Curses allows writing and reading at arbitrary positions on the terminal. You have to call init to set the terminal to curses mode and end to end curses mode. The terminal is not updated until refresh is called. It is a bad idea to use the standard io's read and write methods when the terminal is in curses mode. The Curses primitive was written by Edwin Zacharias.\n<BR><BR>\nHere's an example that prints Hello at column 5 and row 7;\n<p>\n<pre>\nCurses init\nCurses move(5, 7) print(\\\"Hello\\\")\nCurses refresh\nCurses end\n<\/pre>\n","category":"Server\n","slots":{"setBackgroundBlue":"\tSets the background color to blue.\n","print(aString)":"\tPrints the string to the current position on the terminal, \n\toverwriting existing text on the terminal. Returns self.\n","setForegroundYellow":"\tSets the foreground color to yellow.\n","end":"\tEnds curses mode. This should be called before standard io's read \n\tand write methods are used. Returs self.\n","setForegroundGreen":"\tSets the foreground color to green.\n","setBackgroundCyan":"\tSets the background color to cyan.\n","setForegroundRed":"\tSets the foreground color to red.\n","setForegroundCyan":"\tSets the foreground color to cyan.\n","setBackgroundBlack":"\tSets the background color to black.\n","setForegroundWhite":"\tSets the foreground color to white.\n","y":"\tReturns the cursor y position.\n","scrollok(aBoolean)":"    Enables \/ Disables automatic scrolling. Return self.\n","x":"\tReturns the cursor x position.\n","noEcho":"\tDoes not echo user input to terminal. Returns self.\n","setForegroundBlack":"\tSets the foreground color to black.\n","setBackgroundMagenta":"\tSets the background color to magenta.\n","nodelay(aBoolean)":"\tEnables or disables block during read. \n\tIf aNumber is zero, nodelay is set to be false, otherwise it is set to be true.\n","setBackgroundWhite":"\tSets the background color to white.\n","setBackgroundYellow":"\tSets the background color to yellow.\n","refresh":"\tCopies the current buffer to the screen. This must be called to make \n\tchanges to the screen. Returns self.\n","width":"\tReturns a Number containing the width of the current screen.\n","setForegroundBlue":"\tSets the foreground color to blue.\n","setBackgroundRed":"\tSets the background color to red.\n","setBackgroundGreen":"\tSets the background color to green.\n","writeCharacter(aCharacter)":"\tPrints the aCharacter to the current position on the terminal, \n\toverwriting existing text on the terminal. Returns self.\n","move(x, y)":"\tMoves the cursor to column y and row x on the terminal. \n\t(0, 0) is at the top-left of the terminal. Returns self.\n","setForegroundMagenta":"\tSets the foreground color to magenta.\n","echo":"\tEchoes user input to terminal. Returns self.\n","input(n)":"\tReturns user input up to a return, or a maximun of n characters.\n","height":"\tReturns a Number containing the height of the current screen.\n","clearToEndOfLine":"\tClears the text from the cursor to the end of the line. Returns self.\n","setScrollingRegion(top, bottom)":"    Sets the scrolling region; top and bottom are the line numbers of the top\n    and button margin. Returns self.\n","clear":"\tClears the terminal. Nicer than erase. Returns self.\n","getCh":"\tReads a single-byte character from the terminal associated with the \n\tcurrent or specified window. Returns a Number containing the byte.\n","cBreak(aString)":"\tDisables line buffering and erase\/kill character-processing. \n\tcBreak should be on for most purposes. Returns self.\n","scroll(num)":"    Scrolls up num lines.\n    num is optional and defaults to 1. Returns self.\n","insert(aString)":"\tInserts the string at the current position on the terminal, \n\tpushing existing text to the right. Returns self.\n","begin":"\tSets the terminal to curses mode. \n\tThis should be called before any other curses methods. \n\tReturns self.\n","noCBreak":"\tAllows line buffering and erase\/kill character-processing. \n\tcBreak should be on for most purposes. Returns self.\n","get(n)":"\tReturns n characters from the terminal. n is optional and defaults to 1.\n","delete(n)":"\tDeletes n characters at the current position. Text to the right is shifted left. \n\tn is optional and defaults to 1. Returns self.\n","hasColors":"\tReturns true if the terminal supports color, false otherwise.\n"}}},"EditLine":{"EditLine":{"description":"Binding to libedit (BSD version of readline).\n","copyright":"Jonathan Wright, 2007\n","license":"BSD revised\n","module":"EditLine","category":"Server\n","slots":{}}},"User":{"User":{"module":"User","copyright":"Steve Dekorte, 2004\n","credits":"Windows code by Mike Austin\n","license":"BSD revised\n","description":"\tThis object provides access to the local operating system's information \n\tabout the current user.\n","category":"Server\n","slots":{"name":"\tReturns the current user's name.\n","homeDirectory":"\tReturns the current user's home directory as a Directory object.\n"}}},"ReadLine":{"ReadLine":{"description":"Binding to GNU readline.\n","copyright":"Jonaa Eschenburg, 2007\n","license":"BSD revised\n","module":"ReadLine","category":"Server\n","slots":{}}},"SystemCall":{"SystemCall":{"license":"BSD revised\n","module":"SystemCall","description":"A binding for \"callsystem - system() on steorids\"\n\n<UL>\n<LI> asynchonous running of a child process\n<LI> setup of the environment\n<LI> substitution of environment variables\n<LI> connect all 3 standard streams to pipes, null devices, or files\n<LI> pathname handling\n<\/UL>\n\nExample use;\n<pre>\t\nsc = SystemCall clone\n<\/pre>\n","category":"Server\n","slots":{"asyncRun(command, argList, envMap)":" Run the system call.\n"}}},"Syslog":{"Syslog":{"description":"Provides access to a Unix system's system logger.\n<p>\n<pre>\nlogger = Syslog clone do(\n\tidentity(\"SyslogTest\")\n\tfacility(facilityMap at(\"LOG_USER\"))\n\toptions(List append(optionsMap at(\"LOG_PID\"), optionsMap at(\"LOG_CONS\")))\n\tpriority(priorityMap at(\"LOG_INFO\"))\n\topen(facility, options)\n\tmask(List append(maskMap at(\"LOG_PRIMASK\")))\n\tlog(priority, \"*** Merely a test ***\")\n\tclose\n)\n<\/pre>\t\n\n<p>\nNote: This is partially tested. Please let me know of any problems you happen to stumble across, or if it could be better. --Jeremy Tregunna\n<p>\n","copyright":"\tJeremy Tregunna, 2005\n","license":"\tRevised BSD Revised\n","module":"Syslog","category":"Server\n","slots":{"priorityMap":"\tContains key\/value pairs for logging priorities for use when calling the log() method. These include:\n\t<p>\n\t<ul>\n\t<li>LOG_EMERG<\/li>\n\t<li>LOG_ALERT<\/li>\n\t<li>LOG_CRIT<\/li>\n\t<li>LOG_ERR<\/li>\n\t<li>LOG_WARNING<\/li>\n\t<li>LOG_NOTICE<\/li>\n\t<li>LOG_INFO<\/li>\n\t<li>LOG_DEBUG<\/li>\n\t<\/ul>\n","facility(optionalFacility)":"\tSpecifies the logging facility, which can be one of any of the values \n\tfound in the facilityMap map. If optionalFacility is omitted, returns \n\tthe currently set facility.\n","log":"\tWrites the supplied data to the log. Requires 2 arguments:\n\t<p>\n\t<ul>\n\t<li>Logging Priority<\/li>\n\t<li>Message to log<\/li>\n\t<\/ul>\n","open(aPriority, someOptions, optionalIdentity)":"\tOpens the syslog for writing. optionalIdentity need not be entered \n\tand will default to the name of the distribution of Io you are running \n\tor if you have embedded Io into your application and set \n\tLobby distribution = \"foo\", it will be set to \"foo\".\n","mask(optionalMask)":"\tIf optionalMask is specified, optionalMask is a list which contains \n\tany one or more values stored in the maskMap hash that will be OR'd \n\ttogether, to provide the proper mask. Returns the logging mask (as a List).\n","maskMap":"\tContains keys\/value pairs which represent numbers that specify the \n\tlogging mask. These values may be any one (or more) of the following:\n\t<p>\n\t<ul>\n\t<li>LOG_PRIMASK<\/li>\n\t<li>LOG_FACMASK<\/li>\n\t<\/ul>\n","options(optionalOptions)":"\tIf optionalOptions is specified, it should represent a list of the logging \n\toptions you can find in the optionsMap slot. All the values in the supplied \n\taList will be OR'd together when you call the open or reopen slots. \n\tReturns the list of options if optionalFacility is omitted.\n","close":"\tCloses a log that has previously been opened for writing.\")\n","priority(optionalPriority)":"\tIf optionalPriority is specified, sets the value, and returns it. \n\tIf no value is specified, will return the previously stored value if \n\tone has been set previously.\n","identity(optionalIdentity)":"\tIf optionalIdentity is specified, provides an identity for all of the messages you will be sending to the syslog daemon. Returns the identity.\")\n","isOpen":"\tReturns self if the log is opened for writing. Otherwise, returns Nil.\")\n","optionsMap":"\tA map containing key\/value pairs holding all available options. These include:\n\t<p>\n\t<ul>\n\t<li>LOG_PID<\/li>\n\t<li>LOG_CONS<\/li>\n\t<li>LOG_ODELAY<\/li>\n\t<li>LOG_NDELAY<\/li>\n\t<li>LOG_NOWAIT<\/li>\n\t<li>LOG_PERROR<\/li>\n\t<\/ul>\n","facilityMap":"\tContains the following keys, which represent numbers that can be used when opening a log:\n\t<p>\n\t<ul>\n\t <li>LOG_KERN<\/li>\n\t <li>LOG_USER<\/li>\n\t <li>LOG_MAIL<\/li>\n\t <li>LOG_DAEMON<\/li>\n\t <li>LOG_AUTH<\/li>\n\t <li>LOG_SYSLOG<\/li>\n\t <li>LOG_LPR<\/li>\n\t <li>LOG_NEWS<\/li>\n\t <li>LOG_UUCP<\/li>\n\t <li>LOG_CRON<\/li>\n\t <li>LOG_AUTHPRIV<\/li>\n\t <li>LOG_FTP<\/li>\n\t <li>LOG_RESERVED0<\/li>\n\t <li>LOG_RESERVED1<\/li>\n\t <li>LOG_RESERVED2<\/li>\n\t <li>LOG_RESERVED3<\/li>\n\t <li>LOG_LOCAL0<\/li>\n\t <li>LOG_LOCAL1<\/li>\n\t <li>LOG_LOCAL2<\/li>\n\t <li>LOG_LOCAL3<\/li>\n\t <li>LOG_LOCAL4<\/li>\n\t <li>LOG_LOCAL5<\/li>\n\t <li>LOG_LOCAL6<\/li>\n\t <li>LOG_LOCAL7<\/li>\n\t<\/ul>\n","reopen(aFacility, someOptions, optionalIdentity)":"\tReopens an already open log session. This is useful if you wish to \n\tchange the facility you are logging to, the options you are logging \n\twith, or the identity of the session. Takes the same options as the open slot.\n"}}},"NullAddon":{"NullAddon":{"description":"A do-nothing addon for Io, primarily intended to serve as\na skeleton for writing your own addons, without having to\nrewrite all the boilerplate yourself. It implements only\none method, hello, which does the obvious job of greeting the world.\n","copyright":"Samuel A. Falvo II, 2007\n","license":"BSD revised\n","module":"NullAddon","category":"Server\n","slots":{}}}},"Apple":{"AppleExtras":{"AppleSensors":{"description":"A singleton which on Apple computers can:\n<ul>\n<li> get and set display and keyboard brightness\n<li> read left and right ambient light sensors (laptops only)\n<li> read accelerometer sensor (laptops only)\n<\/ul>\nExample use;\n<pre>\t\nsensors = AppleSensors clone\nvalue := sensors getRightLightSensor\n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"AppleExtras","category":"Apple\n","slots":{"getLeftLightSensor":"\t\tReturns a number for the left ambient light sensor.\n","setDisplayBrightness(aNumber)":"\t\tSets the display brightness. Returns self.\n","getRightLightSensor":"\t\tReturns a number for the right ambient light sensor.\n","getDisplayBrightness":"\t\tReturns a number for the display brightness.\n","setKeyboardBrightness(aNumber)":"\t\tSets the keyboard brightness. Returns self.\n","getKeyboardBrightness":"\t\tReturns a number for the keyboard brightness.\n","smsVector(aVector)":"\t\tSets aVector to the current x, y and z accelerometer values. \n\t\tReturns true on success and false on failure.\n"}}}},"Video":{"Theora":{"TheoraComment":{"description":"A wrapper around the libtheora th_comment object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Theora","category":"Video\n","slots":{"count":"\tReturns the number of comments.\n"}},"TheoraSetupInfo":{"description":"A wrapper around the libtheora th_setup_info object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Theora","category":"Video\n","slots":{}},"TheoraInfo":{"description":"A wrapper around the libtheora th_info object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Theora","category":"Video\n","slots":{"frameRate":"\t  The framerate of the video.\n","frameWidth":"\tThe encoded frame width.\n","frameHeight":"\tThe encoded frame height.\n"}},"TheoraDecodeContext":{"description":"A wrapper around the libtheora th_dec_ctx object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Theora","category":"Video\n","slots":{}}},"AVCodec":{"AVCodec":{"description":"An object for encoding and decoding audio and video streams.\n\n<p>\nWhen an input stream containing audio data is opened, the following slots will be set:\n<pre>\naudioChannels\naudioSampleRate\naudioBitRate\naudioDuration\naudioFrameCount\n<\/pre>\n\nWhen an input stream containing video data is opened, the following slots will be set:\n\n<pre>\nframePeriod\nvideoDuration\nvideoFrameCount\n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"AVCodec","category":"Video\n","slots":{"setCodecName(aSeq)":" Sets the codec name. Returns self. See: encodeCodecNames and decodeCodecNames\n","inputCoro":"Returns coroutine currently writing to the receiver.\n","setStreamDestination(anObject)":"Sets the streamDestination to anObject. The didProcess method will call:\n<pre>\nif(streamDestination, streamDestination write(outputBuffer))\noutputBuffer empty\n<\/pre>\n","streamDestination":" Returns the streamDestination.\n","setInternalCoro(aCoro)":" Private method for setting internalCoro. Returns self.\n","didProcess":"\tCalled after the receiver processes some more of the input buffer.\n","encodeCodecNames":"\tReturns a list of strings with the names of the encode codecs.\n","videoCodecName":"Returns the name of the video codec.\n","open":"\tOpens the input file. Return self on success or raises an exception on error.\n","audioOutputBuffer":"\tReturns the output buffer.\n","setInputCoro(aCoro)":" Private method for setting inputCoro. Returns self.\n","audioInputBuffer":"\tReturns the input buffer.\n","close":"\tCloses the input file if it's open. Returns self.\n","decode":"\tDecodes the next chunk of input data. \n\tOutput (if any) is placed in the outputBuffers. \n\tReturns self.\n","setPath(aSeq)":" Sets the path to file the receiver is reading or writing to. Returns self.\n","path":"Returns path to file the receiver is reading or writing to.\n","write(aSequence)":"\tAppends aSequence to the input buffer and resumes the receiver's coroutine in order to process it.\n\tThe calling coroutine (inputCoroutine) will be scheduled to resume when didProcess is called.\n","isAtEnd":"\tReturns true if the stream is at it's end, false otherwise.\n","internalCoro":"Returns coroutine used for the AVCodec to process data...\n","willProcess":"\tCalled before the receiver will process more of the input buffer. \n\tIf inputBuffer is empty, it pauses the receiver's coro.\n","codecName":"Returns name of audio or video codec.\n","decodeCodecNames":"\tReturns a list of strings with the names of the decode codecs.\n"}}},"Vorbis":{"VorbisComment":{"description":"A wrapper around the libvorbis vorbis_comment object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Vorbis","category":"Video\n","slots":{"count":"\tReturns number of comments.\n"}},"VorbisInfo":{"description":"A wrapper around the libvorbis vorbis_info object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Vorbis","category":"Video\n","slots":{"version":"\tReturns the vorbis version required for this data.\n","rate":"\tReturns the sample rate of the vorbis data.\n","channels":"\tReturns the number of channels in the vorbis data.\n"}},"VorbisBlock":{"description":"A wrapper around the libvorbis vorbis_comment object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Vorbis","category":"Video\n","slots":{"synthesis(packet)":"\tDecode the vorbis data from the packet, storing it in the\n\tblock.\n","setup":"\tInitialize for decoding using the information obtained\n\tfrom reading the Vorbis headers.\n"}},"VorbisDspState":{"description":"A wrapper around the libvorbis vorbis_comment object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Vorbis","category":"Video\n","slots":{"blockin(block)":"\tDecodes that data from the block, storing it in the dsp state.\n","headerin(info, comment, packet)":"\tTry to decode a vorbis header from the packet.\n","pcmout":"\tReturns array of audio data\n","setup(info)":"\tInitialize for decoding using the information obtained\n\tfrom reading the Vorbis headers.\n"}}}},"Physics":{"ODE":{"ODEBall":{"description":"ODEBall binding\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODEContactJoint":{"description":"ODEContactJoint binding\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODEJointGroup":{"description":"ODEJointGroup binding\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODEBox":{"description":"ODEBox binding\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODEFixed":{"copy":"Jonathan Wright\", 2006)\n","license":"BSD revised\n","module":"ODE","description":"ODEFixed binding\n","category":"Physics\n","slots":{}},"ODEHinge2":{"description":"ODEJoint binding\n","copyright":"Jonathan Wright\", 2006)\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODESimpleSpace":{"description":"ODESimpleSpace binding\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODEMass":{"description":"ODEMass binding\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODEBody":{"description":"ODEBody binding\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODEHinge":{"description":"ODEHinge binding\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODEPlane":{"copyrigth":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","description":"ODEPlane binding\n","category":"Physics\n","slots":{}},"ODEContact":{"description":"ODEContact binding\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODEWorld":{"description":"ODEWorld binding\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","module":"ODE","category":"Physics\n","slots":{}},"ODEJoint":{"module":"ODE","copyrigth":"Jonathan Wright, 2006\n","Jonathan":"Wright\", 2006)\n","copyright":"Jonathan Wright, 2006\n","license":"BSD revised\n","description":"ODEJoint binding\n","category":"Physics\n","slots":{}}}},"Filesystem":{"AsyncRequest":{"AsyncRequest":{"description":"Used for doing asynchronous file i\/o. When this addon is loaded, it will override\nthe File proto's readToBufferLength, readBufferOfLength and write methods to \nautomatically use AsyncRequests. \n<p>\nNote: This addon is only needed for async file request - all socket ops are already\nasynchronous in Io.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"AsyncRequest","category":"Filesystem\n","slots":{"cancel":"\tCancels the request. Returns nil on error or self otherwise.\n","copyBufferto(aSeq)":"\tCopies the request buffer's data to aSeq.\n\tReturns nil on error or self otherwise.\n","write(fileOffset, aSeq, bufferOffset, numberOfBytesToWrite)":"\tSubmits an async write request. Returns nil on error, self otherwise.\n","numberOfBytes":"\tReturns the number of bytes associated with the request.\n","read(aSeq, numberOfBytes)":"\tSubmits an async read request. Returns nil on error, self otherwise.\n","position":"\tReturns a Number for the position of the descriptor.\n","isDone":"\tReturns true if the request is done, false otherwise.\n","setDescriptor(aDescriptorNumber)":"\tSets the descriptor for the receiver. Returns self.\n","sync":"\tWaits for the request to complete. Returns nil on error or self otherwise.\n","error":"\tReturns sequence containing the last error or nil otherwise.\n","descriptor":"\tReturns the descriptor for the request.\n"}}}},"Audio":{"PortAudio":{"AudioMixer":{"module":"PortAudio","description":"A minimal audio mixer.\n","category":"Audio\n","slots":{"stop":"Stops the mixer if it is running.\n","appendSource(aSource)":" Adds aSource to sources list. Returns self.\n","processedSamples":"Returns the number of processed samples.\n","streamDestination":"The output stream object.\n","isRunning":"Returns true if the mixer is running, false otherwise..\n","process(sampleCount)":" Internal method used for processing a chunk of the input sources. Returns self.\n","removeSource(aSource)":" Removes aSource to sources list. Returns self.\n","start":"\t\tStart the mixer loop processing 1\/64th of a second chunks\n\t\tby calling process(22050) in a loop.\n\t\tWill not return until stop is called. Returns self.\n"}},"AudioDevice":{"description":"The AudioDevice object can used to write audio data as if directly to the audio buffer.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"PortAudio","category":"Audio\n","slots":{"isActive":"\tReturns self if the receiver is active, Nil otherwise.\n","asyncWrite(aBuffer)":"\tWrites aBuffer to the audio output buffer and returns immediately.\n","openForReadingAndWriting":"\tOpen audio output and input streams.\n","write(aSeq)":"\tWrites aSeq to the inputBuffer and yields until the \n\treceiver is ready for more input data. Returns self.\n","asyncRead":"\tReturns the audio read buffer.\n","open":"\tOpen an audio output stream.\n","streamTime":"\tReturns the audio stream time as a number.\n","writeBufferIsEmpty":"\tReturns the true if the audio buffer is empty, false otherwise.\n","needsData":"\tReturns true if the receiver can read more data.\n","error":"\tReturns an error string if an error has occured, Nil otherwise.\n","close":"\tClose the audio stream.\n"}}},"TagLib":{"TagLib":{"description":"Used to set meta data tags on the following audio formats:\n<pre>\nape\nflac\nmp3\nmpc\nmpeg\nogg\n<\/pre>\nSupports reading and writing the following attributes:\n<pre>title\nartist\nalbum\nyear\ntrack\ngenre \n<\/pre>\nAnd reading the attributes:\n<pre>\nbitRate\nsampleRate\nchannels\nlength\n<\/pre>\n\nExample use (load and modify a track genre):\n\n<pre>\nt := TagLib clone setPath(\"foo.mp3\") load\nwriteln(\"genre = \", t genre)\nt setGenre(\"ambient\")\nt save\n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"TagLib","category":"Audio\n","slots":{"setPath(aSeq)":" Sets the path to the file.\n","path":"Returns the path to the file.\n","save":"\tSaves the tag settings and returns self.\n","load":"\tLoads tag data from the file specified in the path slot. Returns self.\n"}}},"SampleRateConverter":{"SampleRateConverter":{"description":"\tA binding for <a href=\"http:\/\/www.mega-nerd.com\/SRC\/\">libsamplerate<\/a> \n\tuseful for up or downconverting the sample rate of a raw audio stream.\n\tStreams are assumed to be in 32bit float interleaved stereo.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"SampleRateConverter","category":"Audio\n","slots":{"setOutputToInputRatio(aNumber)":"\tReturns the output to input ration for the conversion.\n","inputBuffer":"\tReturns the input buffer.\n","setEndOFInput(aBool)":"\tSets the end of input flag.\n\tReturns self.\n","process":"\tProcess the input buffer to perform the conversion. \n\tReturns self.\n","outputBuffer":"\tReturns the output buffer.\n","start":"\tStops processing.\n\tReturns self.\n"}}},"Ogg":{"OggSyncState":{"description":"A wrapper around the libogg ogg_sync_state object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Ogg","category":"Audio\n","slots":{"reset":"\tResets the synchronization status to initial values.\n","pageout(page)":"\tOutputs a page from the synchronisation layer.\n","write(seq)":"        Copies the data from the sequence into the synchronisation\n\tlayer.\n","pageseek(page)":"\tFinds the borders of pages and resynchronises the stream.\n","clear":"\tFree's any internal storage and resets to the initial state.\n"}},"OggPage":{"description":"A wrapper around the libogg ogg_page object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Ogg","category":"Audio\n","slots":{"pageno":"\tReturns the sequential page number for this page.\n","serialno":"\tReturns the unique serial number of the logical bitstream\n        associated with this page.\n","granulepos":"\tReturns the precise playback location of this page.\n","version":"\tReturns the ogg_page version that this page uses.\n","setChecksum":"\tComputes and sets the checksum for this page.\n","eos":"\tIndicates if the current page is the end of the stream.\n","continued":"\tIndicates if the current page contains a continued\n        packet from the last page.\n","packets":"\tReturns the number of packets in the page.\n","bos":"\tIndicates if the current page is the beginning of the stream.\n"}},"OggPacket":{"description":"A wrapper around the libogg ogg_packet object. No methods - used internally.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Ogg","category":"Audio\n","slots":{}},"OggStreamState":{"description":"A wrapper around the libogg ogg_stream_state object.\n","copyright":"Chris Double, 2004\n","license":"BSD revised\n","module":"Ogg","category":"Audio\n","slots":{"packetout(packet)":"\t  Outputs a packet to the codec-specific decoding engine.\n","pagein(page)":"\t  Submits a complete page to the stream layer.\n","packetpeek(packet)":"\t  Provides access to the next packet in the bitstream\n\t  without advancing decoding.\n","setSerialNumber":"\tSets the serial number for this stream.\n","reset":"\t  Resets the stream status to its initial position.\n","eos":"\t  Indicates whether we are at the end of the stream.\n","clear":"\tClears the storage within the Ogg stream.\n"}}},"SoundTouch":{"SoundTouch":{"description":"\tUsed to change the tempo and\/or pitch of an audio stream. \n\tInput and output are in 32 bit floats in 2 channels at a rate \n\tof 44100 samples per second.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"SoundTouch","category":"Audio\n","slots":{"inputBuffer":"\tReturns the input buffer.\n","process":"\tProcesses a chunk of the inputBuffer and appends the results to the outputBuffer.\n","setTempo(aNumber)":"\tSets the tempo.\n","setChannels(aNumber)":"\tSets the number of input channels.\n","start":"\tCleans up SoundTouch.\n","setPitchSemitones(aNumber)":"\tSets the output increase in pitch semitones.\n","setTempoChange(aNumber)":"\tSets the tempo change amount.\n","setSampleRate(aNumber)":"\tSets the input sample rate in Hz.\n","outputBuffer":"\tReturns the output buffer.\n"}}},"LibSndFile":{"LibSndFile":{"description":"An object for encoding and decoding audio files (principally WAV and AIFF) using the \n<a href=http:\/\/www.mega-nerd.com\/libsndfile\/>Libsndfile<\/a> library.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"LibSndFile","category":"Audio\n","slots":{"setFormat(aSeq)":" Sets the format used for writing. Use the formatNames method to get a list of supported format names. Returns self.\n","openForWriting":"Opens the file at the path specified in the path slot for writing. The following slots should be set first to specify the output format:\n<pre>\nsampleRate\nchannels\nformat\n<\/pre>\nReturns self.\n","write(aSeq)":"Writes aSeq using the format specified by the slots:\n<pre>\nsampleRate\nchannels\nformat\n<\/pre>\nReturns the number of frames written.\n","outputBuffer":"\tReturns the output buffer.\n","formatNames":"\tReturns a list of strings with the names of the supported codecs.\n","close":"\tCloses the file if it is open. \n\tReturns self.\n","setPath(aPath)":" Sets path to audio file.\n","openForReading":"Opens the file at the path specified in the path slot and sets the following slots:\n<pre>\nframes\nsampleRate\nchannels\nformat\nseekable\n<\/pre>\nReturns self.\n","path":"Returns path to audio file.\n","format":"Returns format read from the audio file.\n","read(numberOfFrames)":"\tRead a given number of frames (sample pairs).\n\tReturns self.\n","sampleRate":"Returns sample rate read from the audio file.\n","channels":"Returns channels read from the audio file.\n"}},"Sound":{"module":"LibSndFile","description":"Encapsulates a audio file. Usefull for reading an audio file using LibSndFile.\n","category":"Audio\n","slots":{"setPath(aPath)":" Sets path to audio file.\n","path":"Returns path to audio file.\n","buffer":"Returns the buffer used to read the audio file.\n","sampleRate":"Returns number of channels read from the audio file.\n","format":"Returns format read from the audio file.\n","load":"Returns Loads the file data into the buffer in interleaved stereo 32bit float format and sets the sampleRate, channels and format slots. Returns self.\n"}}}},"Digests":{"SHA1":{"SHA1":{"description":"An object for calculating SHA1 hashes. Each has calculation \nshould instiate it's own SHA1 instance.\n\n<p>\nExample:\n<pre>\ndigest := SHA1 clone\ndigest appendSeq(\"this is a message\")\nout := digest md5String\n<\/pre>\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"SHA1","category":"Digests\n","slots":{"sha1":"\tCompletes the SHA1 calculation and returns the hash as a Buffer.\n\tOnce this method is called, append() should not be called again on the receiver or it will raise an exception.\n","sha1String":"\tReturns a string containing a hexadecimal representation of the sha1 hash.\n","appendSeq(aSequence)":"\tAppends aSequence to the hash calculation. Returns self.\n"}}},"MD5":{"MD5":{"description":"An object for calculating MD5 hashes. Each has calculation should instiate it's own MD5 instance.\n<p>\nExample:\n<pre>\ndigest := MD5 clone\ndigest appendSeq(\"this is a message\")\nout := digest md5String\n<\/pre>\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"MD5","category":"Digests\n","slots":{"md5":"\tCompletes the MD5 calculation and returns the hash as a Buffer. Once this method is called, append() should not be called again on the receiver or it will raise an exception.\n","appendSeq(aSequence)":"\tAppends aSequence to the hash calculation. Returns self.\n","md5String":"\tReturns a string containing a hexadecimal representation of the md5 hash.\n"}}},"UUID":{"UUID":{"description":"\tGenerates <a href=http:\/\/en.wikipedia.org\/wiki\/Universally_Unique_Identifier>Universally Unique Identifiers <\/a> (UUID\/GUID).\n","copyright":"\tJonathan Wright, 2006\n","license":"\tBSD revised\n","module":"UUID","category":"\tDigests\n","slots":{"uuidTime":"\tReturns a new time and mac uuid (type 1) in string format.\n","urn":"Returns the uuid with \"urn:uuid:\" prepended to it.\n","uuidRandom":"\tReturns a new random uuid (type 4) in string format.\n","uuid":"\tReturns a new uuid in string format.\n"}}}},"Core":{"Range":{"Range":{"description":"Simple datastructure representing the items at and between two specific points.\n","copyright":"Jeremy Tregunna, 2006\n","license":"BSD\n","module":"Range","category":"Core\n","slots":{"first":"\tMoves the current cursor to the beginning of the range, and returns it.\n","index":"Returns the current index number starting from zero and extending \noutward up to the maximum number of items in the range.\n","nextInSequence(skipVal)":" Returns the next item in the sequence.  The optional skipVal parameter allows you to skip ahead skipVal places.\n","levenshtein(other)":" Returns the levenshtein distance to other.\n","foreach(optionalIndex, value, message)":"\tIterates over each item beginning with the starting point, and finishing at \n\tthe ending point inclusive. This method can operate several ways; these include: \n\t(1) Takes one argument, the message tree to be executed during each iteration; (2) \n\tTakes two arguments, the first argument is the name of the current value being \n\titerated over, and the second is the message tree to be executed during each \n\titeration; (3) Takes three arguments: the first is the current index within the \n\trange, the second is the name of the current value being iterated over, and the \n\tthird is the message tree to be executed during each iteration. \n\tFor example:\n<pre>\n\/\/ First method (operating on numbers)\n1 to(10) foreach(\"iterating\" print) \/\/ prints \"iterating\" 10 times\n\/\/ Second method (operating on numbers)\n1 to(10) foreach(v, v print) \/\/ prints each value\n\/\/ Third method (operating on numbers)\n1 to(10) foreach(i, v, writeln(i .. \": \" .. v)) \/\/ prints \"index: value\"\n<\/pre>\n","contains":"Returns a boolean value if the range contains the argument. This works independant of any increment value.\n","indexOf(aValue)":" Calculates each value, checking to see if it matches the aValue parameter. If so, return the position within the range. NOTE: This method rewinds the range before searching. If you need to revert back to your original position, make a duplicate of the range, and use indexOf on it instead.\n","toBy(endingPoint, incrementValue)":" Convenience constructor that returns a cursor object representing the range of numbers from the receiver to the 'endingPoint' parameter. Increments over each item in that range by the 'incrementValue' parameter.\n","rewind":"\tSets the current item and the index to the values the receiver started out with.\n","previous":"\tSets the current item in the range to the previous item in the range, \n\tand returns a boolean value indicating whether it is not at the beginning of the range.\n","asList":"Returns a list containing all the items within and including the ranges starting and ending points.\n","at(position)":" Rewinds the range, skips forward until we're at the supplied position then returns the value at that position. Raises an exception if the position is out of bounds.\n","value":"\tReturns the value of the current item in the range.\n","slice(start, end, [by])":" Returns a list containing the values from the Range starting at the start parameter, ending at the end parameter, and optionally incremented by the by parameter.\n","to":"Convenience constructor that returns a cursor object representing the range of numbers from the receiver to the 'endingPoint' parameter. Increments over each item in that range by 1.\n","toBy(endpoint, increment)":" Convenience constructor that returns a range of sequences from the receiver to the endpoint argument. Increments over each item in that range by the value of the increment parameter. The increment parameter must be positive.\n","next":"\t\tSets the current item in the range to the next item in the range, \n\t\tand returns a boolean value indicating whether it is not at the end of the range.\n","map([value], body)":" Returns a new list which contains the result of the 'body' for every element stepped over in the range, from the starting point to the ending point inclusive.\n","setRange(start, end, increment)":"\tHas several modes of operation. First, if only two parameters are specified, \n\tthe increment value is set to 1 by default, while the first parameter represents\n\tthe point to start from, and the second parameter represents the point to end at. \n\tIf the second parameter is smaller than the first, the range will operate backwards. \n\tIf the third parameter is specified, a custom iteration value will be used instead of 1.\n","last":"\tMoves the current cursor to the end of the range, and returns it.\n","to(endpoint)":" Convenience constructor that returns a range of sequences from the receiver to the endpoint argument. Increments over each item in that range by 1.\n","select":"Operates the same as 'List select'\n"}}},"Core":{"Compiler":{"description":"Contains methods related to the compiling code.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"tokensForString(aString)":"\tReturns a list of token objects lexed from the input string.\n","messageForString2(aString)":"\tReturns the compiled message object for aString. (Runs raw string against lexer directly.)\n","messageForTokens(aList)":"\tReturns the compiled message object for the given token list.\n","messageForString(aString, optionalLabelString)":"\tReturns the compiled message object for aString.\n"}},"Message":{"description":"A Message object encapsulates the action of a message send. \nBlocks are composed of a Message and its children.\n<p>\nTerminology\n<pre>\nExample:\n  Io> msg := message(A B(C D); E F)\n  ==> A B(C D); E F\n  \nIn the above example:\n  msg name            =>  A\n  msg next            =>  B(C D); E F\n  msg next arguments  =>  list(C D)\n  msg next next name  =>  ;\n  msg next next next  =>  E F\n<\/pre>\nImportant: Modifying the message tree of a block currently in use may cause\na crash if a garbage collection cycle occurs. If the implementation were\nchanged to retain every called message, this could be avoided.\nBut the cost to performance seems to outweigh the need to cover this case for now.\n","copyright":"\tSteve Dekorte; Jonathan Wright, 2002, 2006\n","license":"\tBSD revised\n","module":"Core","category":"Core\n","slots":{"code":"\tReturns a String containing a decompiled code representation of the receiver.\n","argsEvaluatedIn(anObject)":"\tReturns a List containing the argument messages evaluated in the\n\tcontext of anObject.\n","last":"\tReturns the last message in the chain.\n","argCount":"Returns the number of arguments this message has. A faster way to do, msg arguments size. Examples,\n<pre>\t\nIo> message(a(1,2,3)) argCount\n==> 3\n\nIo> message(a) argCount\n==> 0\n<\/pre>\n","clone":"\tReturns a Message that is a deep copy of the receiver.\n","nextIgnoreEndOfLines":"\tReturns the next message in the message chain which is not an \n\tEndOfLine or nil if there is no next message.\n","setNext(aMessageOrNil)":"\tSets the next message in the message chain to a deep copy of\n\taMessage or it removes the next message if aMessage is nil.\n","asString":"\tSame as code().\n","evaluatedArgs":"\tReturns a List containing the argument messages evaluated in the context.\n","argAt(indexNumber)":"\tReturns Message object for the specified argument or Nil if none exists.\n","setCachedResult(anObject)":"\tSets the cached result of the message. Returns self.\n","fromString(aString)":"\tReturns a new Message object for the compiled(but not executed)\n\tresult of aString.\n","setCachedArgs(listOfValues)":" Appends evaluated arguments to a message. Returns self.\n","codeOfLength(n)":"\t\tSame as <tt>Message code<\/tt>, but returns first <tt>n<\/tt> characters only.\n","hasCachedResult":"\tReturns true if there is a cached result. Nil is a valid cached result.\n","isEndOfLine":"\tReturns true if the message marks the end of the line. A ';' message.\n","name":"\tReturns the name of the receiver.\n","description":"Returns a string containing a short description of the method.\n","next":"\tReturns the next message in the message chain or nil if there is no next message.\n","previous":"\tReturns the previous message in the message chain or Nil if there is no previous message.\n","lineNumber":"\tReturns the line number of the message. The charcter number\n\tis typically the line number in the source text from with the message was read.\n","setName(aString)":"\tSets the name of the receiver. Returns self.\n","cachedResult":"\tReturns the cached result of the Message or Nil if there is none.\n","asMessageWithEvaluatedArgs(optionalContext)":"\tReturns a copy of receiver with arguments evaluated in the context of sender if\n\toptionalContext is nil.\n","setCharacterNumber(aNumber)":"\tSets the character number of the message. Returns self.\n","label":"\tReturns the message label. The label is typically set the the\n\tname of the file from which the source code for the message was read.\n","asSimpleString":"Returns one-line string representation up to 40 characters long.\n","characterNumber":"\tReturns the message character number. The charcter number is typically\n\tthe beggining character index in the source text from with the message was read.\n","fluxSource":" The directory of Flux where Flux.io is located. This directory is added to the Importer searchPaths.\n","setLabel(aString)":"\tSets the label of the message and its children. Returns self.\n","removeCachedResult":"\tRemoves the cached result of the Message.\n","appendArg(aMessage)":"Adds aMessage to the argument list of receiver. Examples,\n<pre>\t\nIo> message(a) appendArg(message(b))\n==> a(b)\n\nIo> message(a(1,2)) appendArg(message(3))\n==> a(1, 2, 3)\n<\/pre>\n","arguments":"\tReturns a list of the message objects that act as the\n\treceiver's arguments. Modifying this list will not alter the actual\n\tlist of arguments. Use the arguments_() method to do that.\n","union(other) Creates a union of the receiver and the other parameter.":"\tReturns a new message object with the receivers message as the first argument of the returned message, \n\tand the other parameter's arguments as each successive argument to the new message.\n\t<br\/>\n\t<pre>\n  Io> message(a) union(message(b))\n  ==> [unnamed](a, b)\n  <\/pre>\n","appendCachedArg(aValue)":"\tAdds aValue to the argument list of receiver as a cachedResult.\n","setArguments(aListOfMessages)":"\tSets the arguments of the receiver to deep copies of\n\tthose contained in aListOfMessages.  Returns self.\n","lastBeforeEndOfLine":"\tReturns the last message in the chain before the EndOfLine or nil.\n","doInContext(anObject, locals)":"\tEvaluates the receiver in the context of anObject. Optional <tt>locals<\/tt> \n\tobject is used as message sender. <tt>anObject<\/tt> is used as sender otherwise.\n","setPrevious(aMessageOrNil)":"\tSets the previous message in the message chain to a deep copy of\n\taMessage or it removes the previous message if aMessage is Nil.\n","setLineNumber(aNumber)":"\tSets the line number of the message. Returns self.\n","asStackEntry":"Returns a string containing message name, file and line.\n","fluxPath":" The directory where the .io files for the Flux views are located. This directory is added to the Importer searchPaths.\n"}},"Number":{"description":"A container for a double (a 64bit floating point number on most platforms).\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"bitwiseOr(aNumber)":"\tReturns a new number with the bitwise AND of the receiver and aNumber.\n","floatMax":"\tReturns the maximum double precision float value.\n","asHex":"Returns the number as hex digits inside a string. 97 asHex -> \"61\"\n","asLowercase":"\tReturns a new Number containing a lower case version of the receiver.\n","combinations(size)":" Returns the combinations where the receiver is the number of different objects and size is the number to be arranged.\n","&(aNumber)":"\tReturns a new number with the bitwise AND of the receiver and aNumber.\n","isDigit":"\tReturns true if \n\treceiver is a numeric digit value\n\t, false otherwise.\n","integerMax":"\tReturns the maximum integer value.\n","sqrt":"\tReturns the square root of the receiver.\n","squared":"\tReturns the square of the receiver.\n","asUint32Buffer":"\tReturns a Sequence containing a 4 byte representation of the uint32 value of the receiver.\n","isSpace":"\tReturns true if \n\tthe receiver is a space, formfeed, newline carriage return, tab or vertical tab character value\n\t, false otherwise.\n","isNan":"\tReturns true if the receiver is not a number. Otherwise returns false.\n","asNumber":"\tReturns self.\n","between(aNumber1, aNumber2)":"\tReturns the true if the receiver's value is between or\n\tequal to aNumber1 and aNumber2, otherwise returns false.\n","\/(aNumber)":"\tReturns a new number with the value of the receiver diveded by aNumber.\n","asOctal":"Returns the number as octal digits inside a string. 436 asOctal -> \"664\"\n","cubed":"\tReturns the cube of the receiver.\n","-(aNumber)":"\tReturns a new number that is the difference of the receiver and aNumber.\n","roundDown":"\tReturns the a number with the receiver's value rounded down to\n\tthe nearest integer if it's fraction component is <= .5 or rounded up the the nearest integer otherwises.\n","atan2(aNumber)":"\tReturns a number with the arc tangent of y\/x where y is the receiver and x is aNumber.\n","integerMin":"\tReturns the minimum integer value.\n","tan":"\tReturns the tangent of the receiver.\n","isLowercase":"\tReturns true if \n\tthe receiver is a lowercase character value\n\t, false otherwise.\n","isUppercase":"\tReturns true if \n\tthe receiver is a uppercase character value\n\t, false otherwise.\n","unsignedShortMax":"\tReturns the minimum unsigned int value.\n","exp":"\tReturns e to the power of the receiver.\n","**(aNumber)":"\tSame as pow(aNumber).\n","isEven":"\tReturns true if \n\tinteger form of the receiver is even\n\t, false otherwise.\n","asin":"\tReturns a number with the arc sine of the receiver.\n","log10":"\tReturns the base 10 logarithm of the receiver.\n","isGraph":"\tReturns true if \n\tthe receiver is a printing character value except space\n\t, false otherwise.\n","longMax":"\tReturns the maximum long value.\n","sin":"\tReturns the sine of the receiver.\n","abs":"\tReturns a number with the absolute value of the receiver.\n","factorial":"\tReturns the factorial of the receiver.\n","asBuffer(optionalNumberOfBytes)":"\tReturns a Buffer containing a the number of bytes specified by\n\toptionalNumberOfBytes (up to the size of a double on the platform) of the reciever.\n\tIf no optionalNumberOfBytes is specified, it is assumed to be the number of bytes\n\tin a double on the host platform.\n","bitwiseAnd(aNumber)":"\tReturns a new number with the bitwise AND of the receiver and aNumber.\n","cos":"\tReturns the cosine of the receiver.\n","floatMin":"\tReturns the minimum float value.\n","shortMin":"\tReturns the minimum short value.\n","negate":"\tReturns new number that is negated version of the receiver.\n","pi":"Returns the constant pi.\n","*(aNumber)":"\tReturns a new number that is the product of the receiver and aNumber.\n","toBase(base)":" Returns the number in another base. 42 toBase(2) -> \"101010\"\n","isAlphaNumeric":"\tReturns true if \n\treceiver is an alphanumeric character value\n\t, false otherwise.\n","|(aNumber)":"\tReturns a new number with the bitwise OR of the receiver and aNumber.\n","log":"\tReturns the logarithm of the receiver.  The base\n\tis taken as the value of the first argument or the constant e if\n\tthe first argument is omitted.\n","asString(optionalIntegerDigits, optionalFactionDigits)":"Returns a string representation of the receiver. For example:\n<pre>\n1234.5678 asString(0, 2)\n<\/pre>\t\nwould return:\n<pre>\n1234.57\n<\/pre>\n","bitwiseXor(aNumber)":"\tReturns a new number with the bitwise XOR of the receiver and aNumber.\n","asCharacter":"\tReturns a String containing a single character whose\n\tvalue is the value of the first byte of the receiver.\n\tReturns nil if the number has no valid UCS mapping.\n","isPunctuation":"\tReturns true if \n\tthe receiver is a punctuation character value\n\t, false otherwise.\n","asBinary":"Returns the number as binary digits inside a string. 42 asBinary -> \"101010\"\n","atan":"\tReturns a number with the arc tangent of the receiver.\n","isControlCharacter":"\tReturns true if \n\treceiver is a control character value\n\t, false otherwise.\n","permutations(size)":" Returns the permutations where the receiver is the number of different objects and size is the number to be arranged.\n","mod(aNumber)":"\tReturns the receiver modulus aNumber.\n","at(bitIndexNumber)":"\tReturns a new Number containing 1 if the receiver cast to a long\n\thas it's bit set to 1 at bitIndexNumber. Otherwise returns 0.\n","justSerialized(stream)":" Writes the receiver's code into the stream.\n","log2":"\tReturns the base 2 logarithm of the receiver.\n","minMax(low, high)":" Returns a number between or equal to low and high. If the receiver is equal to or between low and high, the reciever is returned. If the reciever is less than low, low is returned. If the receiver is greater than high, high is returned.\n","toggle":"\tReturns 1 if the receiver is 0. Returns 0 otherwise.\n","repeat(optionalIndex, expression)":"\tEvaluates message a number of times that corresponds to the receivers\n\tinteger value. This is significantly  faster than a for() or while() loop.\n","<<(aNumber)":"\tShifts the bits of the receiver left by the number of places specified by aNumber.\n","asUppercase":"\tReturns a new Number containing a upper case version of the receiver.\n","toBaseWholeBytes(base)":" Returns the number in another base printing out entire bytes. 42 toBaseWholeBytes(2) -> \"00101010\"\n","shortMax":"\tReturns the maximum short value.\n","bitwiseComplement":"\tReturns a new number with the bitwise complement of the\n\treceiver. (Turns the 0 bits of become 1s and the 1 bits become 0s. )\n","unsignedIntMax":"\tReturns the maximum unsigned int value.\n","%(aNumber)":"\tReturns the receiver modulus aNumber.\n","print":"\tPrints the number.\n","unsignedLongMax":"\tReturns the maximum unsigned long value.\n","round":"\tReturns the a number with the receiver's value rounded up to\n\tthe nearest integer if it's fraction component is >= .5 or rounded up the the nearest integer otherwises..\n","isLetter":"\tReturns true if \n\treceiver is a letter character value\n\t, false otherwise.\n","isInASequenceSet":"Return true if receiver is in one of the Sequence sequenceSets, otherwise false.\n","min(aNumber)":"\tReturns the lesser of the receiver and aNumber.\n","max(aNumber)":"\tReturns the greater of the receiver and aNumber.\n","isHexDigit":"\tReturns true if \n\tthe receiver is a hexadecimal character value\n\t, false otherwise.\n","^(aNumber)":"\tReturns the bitwise xor with the receiver (both numbers are converted to longs for the operation).\n","nan":"Returns a infinity constant.\n","isPrint":"\tReturns true if \n\tthe receiver is a printing character value, including space\n\t, false otherwise.\n",">>(aNumber)":"\tShifts the bits of the receiver right by the number of places specified by aNumber.\n","doubleMin":"\tReturns the minimum double precision float value.\n","e":"Returns the constant e.\n","floor":"\tReturns the a number with the receiver's value rounded\n\tdown to the nearest integer if it's fractional component is not 0.\n","ceil":"\tReturns the a number with the receiver's value rounded up to\n\tthe nearest integer if it's fractional component is greater than 0.\n","longMin":"\tReturns the minimum long value.\n","pow(aNumber)":"\tReturns the value of the receiver to the aNumber power.\n","constants":"Object containing number constants e, inf, nan and pi.\n","inf":"Returns a not-a-number constant.\n","acos":"\tReturns a number with the arc cosine of the receiver.\n","+(aNumber)":"\tReturns a new number that is the sum of the receiver and aNumber.\n","clip(aNumber1, aNumber2)":"\tReturns self if the receiver is between aNumber1 and aNumber2.\n\tReturns aNumber1 if it is less than aNumber1. Returns aNumber2 if it is greater than aNumber2.\n","isOdd":"\tReturns true if \n\tinteger form of the receiver is odd\n\t, false otherwise.\n"}},"Directory":{"credits":"Cygwin code by Mike Austin. WIN32 code by Daniel Vollmer.\n","description":"The Directory object supports accessing filesystem directories. A note on paths;\nif a path begins with a \"\/\" it's the root,\nif it beings with a \".\/\" it's the launch path,\nif not specified, \".\/\" is assumed.\"\"\")\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"create":"\tCreate the directory if it doesn't exist. \n\tReturns self on success (or if the directory already exists), nil on failure.\n","createFileNamed(name)":" Deprecated. Returns a new file object in the directory with the specified name.\n","with(aPath)":" Returns a new instance with the provided path.\n","folders":"Deprecated. Replaced by directories().\n","folderNamedCreateIfAbsent(name)":" Deprecated. Returns a new Directory object in the directory with the specified name.\n","parents":"Deprecated. Replaced by ancestorDirectories.\n","at(aString)":"\tReturns a File or Directory object matching the name specified\n\tby aString or Nil if no such file or directory exists.\n","name":"\tReturns the receiver's last path component.\n","items":"\tReturns a list object containing File and Directory objects\n\tfor the files and directories of the receiver's path.\n","setPath(aString)":"\tSets the directory path. Returns self.\n","createIfAbsent":"Creates the directory (and any missing ancestor directories) if they don't exist. Returns self.\n","accessibleAncestors":"Returns a list of accessizble ancestor directories.\n","directories":"Returns a list of subdirectories in the receiver.\n","path":"\tReturns the directory path. The default path is '.'.\n","accessibleParents":"Deprecated. Replaced by accessibleAncestors.\n","size":"\tReturns a Number containing the number of file and directory\n\tobjects at the receiver's path.\n","folderNamed(aName)":" Deprecated. Replaced by directoryNamed().\n","recursiVeFilesOftypes(suffixes)":" Deprecated. Alias for recursiveFilesOfTypes(suffixes).\n","currentWorkingDirectory":"\tReturns the current working directory path.\n","recursiveFilesOfTypes(suffixes)":" Returns a list containing all files in the directory or any subdirectory that has any of the specified suffixes.\n","exists(optionalPath)":"\tReturns true if the Directory path exists, and false otherwise.\n\tIf optionalPath string is provided, it tests the existance of that path instead.\n","directoryNamed(aName)":" Returns a Directory object for the specified file name whether or not it exists.\n","isAccessible":"Returns true if the directory can be accessed, false otherwise.\n","fileNames":"Returns a list of strings for the names of the files (no subdirectories) in the directory.\n","setCurrentWorkingDirectory(pathString)":"\tSet's the current working directory path.\n\tReturns true on success or false on error.\n","moveTo(aPath)":" Moves the directory to the specified path.\n","parentDirectory":"Returns the parent directory object or nil if there is no parent directory.\n","files":"Returns a list of File objects for the files in the Directory (no directories).\n","filesWithExtension(aString)":" Returns a list of File objects for the files in the Directory (no directories) with the specified file extension.\n","createSubdirectory(name)":"\tCreate a subdirectory with the specified name.\n","fileNamed(aName)":" Returns a File object for the specified file name whether it exists or not.\n","remove":"Removes the directory.\n","ancestorDirectories":"Returns a list of ancestor directories.\n"}},"Object":{"description":"An Object is a key\/value dictionary with string keys and values of any type.\nThe prototype Object contains a clone slot that is a CFuntion that creates new objects.\nWhen cloned, an Object will call it's init slot (with no arguments).\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"coroFor(code)":"\t\tReturns a new coro to be run in a context of sender.\n","hasLocalSlot(slotNameString)":"\tReturns true if the slot exists in the receiver or false otherwise.\n","or(arg)":" Returns true.\n","ppid":"This PDB extension returns a unique identifier for this object and registers it\nfor persistence with PDB.\n","forward":"Called when the receiver is sent a message it doesn't recognize.\nDefault implementation raises an \"Object doesNotRespond\" exception.\nSubclasses can override this method to implement proxies or special error handling.\n<p>\nExample:\n<p>\n<pre>\nmyProxy forward = method(\n\tmessageName := thisMessage name\n\targuments := thisMessage arguments\n\tmyObject doMessage(thisMessage)\n)\n<\/pre>\n","handleActorException(exception)":"  Callback for handling exceptions during asynchronous message processing.\n  <br\/>\n  Default value: method(e, e showStack)\n","getSlot(slotNameString)":"\tReturns the value of the slot named slotNameString\n\t(following the lookup path) or nil if no such slot is found.\n","switch(<key1>, <expression1>, <key2>, <expression2>, ...)":"\tExecute an expression depending on the value of the caller. (This is an equivalent to C switch\/case)\n\t<code>\n\thour := Date hour switch(\n\t\t12, \"midday\",\n\t\t0, \"midnight\",\n\t\t17, \"teatime\",\n\t\tDate hour asString\n\t)\n\t<\/code>\n","actorProcessQueue":"Processes each message in a queue, yielding between each message.\n","block(args..., body)":"\tCreates a block and binds it to the sender context (i.e. lexical context).\n\tIn other words, block locals' proto is sender's locals.\n\t<tt>args<\/tt> is a list of formal arguments (can be empty). <br\/>\n\t<tt>body<\/tt> is evaluated in the context of Locals object.<br\/>\n\tSee also <tt>Object method<\/tt>.\n\t<br\/>\n\t<pre>\n\tIo> block(x, x*2) scope == thisContext\n  ==> true\n\t<\/pre>\n",">=(expression)":"\tEvaluates argument and returns self if self is greater\n\tthan or equal to it, or Nil if not.\n","coroDoLater(code)":"\t\tReturns a new coro to be run in a context of sender.\n\t\tNew coro is moved to the top of the yieldingCoros queue to be executed \n\t\twhen current coro yields.\n\t\t<br\/>\n\t\tNote: run target is <tt>self<\/tt> (i.e. receiver), not <tt>call sender<\/tt> as in coroDo.\n","compare(anObject)":"\tReturns a number containing the comparison value of the target with anObject.\n","..(arg)":" .. is an alias for: method(arg, self asString append(arg asString))\n","type":"\tReturns a string containing the name of the type of Object (Number, String, etc).\n","foreachSlot(slotName, slotValue, code)":"  Iterates over all the slots in a receiver. Provides slotValue (non-activated)\n  along with slotName. Code is executed in context of sender. <tt>slotName<\/tt> and <tt>slotValue<\/tt>\n  become visible in the receiver (no Locals created! Maybe, it is not the best decision).\n  <br\/>\n  <pre>\n  Io> thisContext foreachSlot(n, v, n println)\n  Lobby\n  Protos\n  exit\n  forward\n  n\n  v\n  ==> false\n  <\/pre>\n","uniqueHexId":"  Returns uniqueId in a hexadecimal form (with a \"0x\" prefix)\n  <pre>\n  Io> Object uniqueId\n  ==> 3146784\n  Io> Object uniqueHexId\n  ==> 0x300420\n  <\/pre>\n","doRelativeFile(pathString)":"\t\tEvaluates the File in the context of the receiver. Returns the result. \n\t\tpathString is relative to the file calling doRelativeFile. (Duplicate of relativeDoFile)\n","break(optionalReturnValue)":"\tBreak the current loop, if any.\n","lazySlot(code)":"  Defines a slot with a lazy initialization code. \n  Code is run only once: the first time slot is accessed. \n  Returned value is stored in a regular slot.\n  <br\/>\n  <pre>\n  Io> x := lazySlot(\"Evaluated!\" println; 17)\n  Io> x\n  Evaluated!\n  ==> 17\n  Io> x\n  ==> 17\n  Io> x\n  ==> 17\n  <\/pre>\n  <br\/>\n  Another form is <tt>lazySlot(name, code)<\/tt>:\n  <br\/>\n  <pre>\n  Io> lazySlot(\"x\", \"Evaluated!\" println; 17)\n  Io> x\n  Evaluated!\n  ==> 17\n  Io> x\n  ==> 17\n  Io> x\n  ==> 17\n  <\/pre>\n","continue":"\tSkip the rest of the current loop iteration and start on\n\tthe next, if any.\n","method(args..., body)":"\tCreates a method. \n\t<tt>args<\/tt> is a list of formal arguments (can be empty). <br\/>\n\t<tt>body<\/tt> is evaluated in the context of Locals object.<br\/>\n\tLocals' proto is a message receiver (i.e. self).\n\t<br\/>\n\tSlot with a method is <em>activatable<\/em>. Use getSlot(name) to retrieve \n\tmethod object without activating it (i.e. calling).\n\t<br\/>\n\tSee also <tt>Object block<\/tt>.\n","not":"Returns nil.\n","unpersist":"PDB extension to populate this object with the data associated with this object's ppid from PDB.\n","resend":"\tSend the message used to activate the current method to the Object's proto.\n  For example:\n  <pre>\n  Dog := Mammal clone do(\n    init := method(\n  \t  resend\n    )\n  )\n  <\/pre>\n\tCalling Dog init will send an init method to Mammal, but using the Dog's context.\n","yield":"  Yields to another coroutine. Does nothing if yieldingCoros queue is empty.\n  <br\/>\n  See Coroutine documentation for more details.\n","for(<counter>, <start>, <end>, <do message>)":"\tA for-loop control structure. See the io Programming Guide for a full description.\n","updateSlot(slotNameString, valueObject)":"\tSame as setSlot(), but raises an error if the slot does not\n\talready exist in the receiver's slot lookup path.\n","ifNonNilEval(arg)":" Evaluates argument and returns the result.\n","isKindOf(anObject)":" Returns true if anObject is in the receiver's ancestors.\n","serializedSlots(stream)":" Writes all slots to a stream.\n","setIsActivatable(aValue)":"\tWhen called with a non-Nil aValue, sets the object\n\tto call it's activate slot when accessed as a value. Turns this behavior\n\toff if aValue is Nil. Only works on Objects which are not Activatable\n\tPrimitives (such as CFunction or Block). Returns self.\n","argIsActivationRecord":"  Note: seems to be an obsolete method.\n","writeln(<any number of arguments>)":"\tSame as write() but also writes a return character at the end. Returns Nil.\n","setProto(anObject)":"\tSets the first proto of the receiver to anObject, replacing the\n\tcurrent one, if any. Returns self.\n","memorySizeOfState":"\tReturns the number of bytes in the IoState\n\t(this may not include memory allocated by C libraries).\n","raiseIfError":"Does nothing, returns self.\n","pause":"\tRemoves current coroutine from the yieldingCoros queue and\n\tyields to another coro. Exits if no coros left.\n\t<br\/>\n  See Coroutine documentation for more details.\n","setSlotWithType(slotNameString, valueObject)":"\tSets the slot slotNameString in the receiver to\n\thold valueObject and sets the type slot of valueObject\n\tto be slotNameString. Returns valueObject.\n","shallowCopy":"\tReturns a shallow copy of the receiver.\n","@":"  Sends asynchronous message to an object, returns a FutureProxy.\n  <br\/>\n  Caller coroutine is paused when proxy is accessed (i.e. message is sent)\n  till result is ready. Proxy will become an actual result when it is ready.\n  <br\/>\n  See IoGuide for more information.\n  <br\/>\n  Usage: obj @someMethod(a, b, c)\n","stopStatus":"\tReturns the internal IoState->stopStatus.\n","clone":"\tReturns a clone of the receiver.\n","localsForward":"\tCFunction used by Locals prototype for forwarding.\n","removeAllSlots":"\tRemoves all of the receiver's slots. Returns self.\n","argIsCall(arg)":"\tReturns true if arg is an activation context (i.e. Call object)\n\t<br\/>\n\tNote: this is used internally in one place only (Coroutine callStack).\n\tRefactoring should be considered.\n","compactState":"\tAttempt to compact the memory of the IoState if possible.\n","foreach([name,] value, message)":"For each slot, set name to the slot's\nname and value to the slot's value and execute message. Examples:\n<p>\n<pre>\nmyObject foreach(n, v,\n\twriteln(\"slot \", n, \" = \", v type)\n)\n\nmyObject foreach(v,\n\twriteln(\"slot type \", v type)\n)\n<\/pre>\n","message(expression)":"\tReturn the message object for the argument or Nil if there is no argument.\n\tNote: returned object is a mutable singleton. Use \"message(foo) clone\" if\n  you wish to modify it.\n","!=(aValue)":"\tReturns true the receiver is not equal to aValue, false otherwise.\n","justSerialized(stream)":"  Writes serialized representation to a SerializationStream. Returns stream contents. \n  [This is unintended side effect! Returned value may change in the future.]\n","removeSlot(slotNameString)":"\tRemoves the specified slot (only) in the receiver if it exists. Returns self.\n","getLocalSlot(slotNameString)":"\tReturns the value of the slot named slotNameString\n\t(not looking in the object's protos) or nil if no such slot is found.\n","setSlot(slotNameString, valueObject)":"\tSets the slot slotNameString in the receiver to\n\thold valueObject. Returns valueObject.\n","uniqueId":"\tReturns a Number containing a unique id for the receiver.\n","try(code)":"\t\tExecutes particular code in a new coroutine.\n\t\tReturns exception or nil if no exception is caught.\n\t\t<br\/>\n\t\tSee also documentation for Exception catch and pass.\n","print":"\tPrints a string representation of the object. Returns Nil.\n","perform(methodName, <arg1>, <arg2>, ...)":"\tPerforms the method corresponding to methodName with the arguments supplied.\n","ifNil(arg)":" Does nothing, returns self.\n","thisLocalContext":"\tReturns current locals.\n","@@":"  Same as Object @, but returns nil instead of FutureProxy.\n  <br\/>\n  Might be useful in a command line or as a last expression in a block\/method when\n  you don't want to return a future.\n","isIdenticalTo(aValue)":"\tReturns true if the receiver is identical to aValue, false otherwise.\n","protos":"\tReturns a copy of the receiver's protos list.\n","persistData":"Force immediate persistence of this object's serialized form (using asSerialization)\ninto PDB, if possible.\n","slotSummary":"  Returns a formatted <tt>slotDescriptionMap<\/tt>.\n  <br\/>\n  <pre>\n  Io> slotSummary\n  ==>  Object_0x30c590:\n    Lobby            = Object_0x30c590\n    Protos           = Object_0x30c880\n    exit             = method(...)\n    forward          = method(...)\n  <\/pre>\n","-(aNumber)":"\tReturns the negative version of aNumber.\n\tRaises an exception if argument is not a number.\n","thisContext":"\tSynonym to self.\n","ifNonNil(arg)":" Evaluates argument and returns self.\n","deprecatedWarning(optionalNewName)":"\tPrints a warning message that the current method is deprecated.\n\tIf optionalNewName is supplied, the warning will suggest using that instead.\n\tReturns self.\n","<(expression)":"\tEvaluates argument and returns self if self is less or Nil if not.\n","while(<condition>, expression)":"\tKeeps evaluating message until condition return Nil.\n\tReturns the result of the last message evaluated or Nil if none were evaluated.\n","doMessage(aMessage, optionalContext)":"\tEvaluates the message object in the context of the receiver.\n\tReturns the result. optionalContext can be used to specific the locals\n\tcontext in which the message is evaluated.\n","?(aMessage)":"\tdescription: Sends the message aMessage to the receiver if it can respond to it. Example:\n\t<pre>\n\tMyObject test \/\/ performs test\n\tMyObject ?test \/\/ performs test if MyObject has a slot named test\n\t<\/pre>\n\tThe search for the slot only follows the receivers proto chain.\n","self":"\tReturns self.\n","tailCall(expression)":"Does a tailCall on the currently executing Block. Example:\n<pre>\t\nIo> a := method(x, x = x + 1; if(x > 10, return x); tailCall(x))\n==> method(x, updateSlot(\"x\", x +(1));\n\t\tif(x >(10), return(x));\n\t\ttailCall(x))\nIo> a(1)\n==> 11\n<\/pre>\n","serialized":"  Returns a serialized representation of the receiver.\n  <br\/>\n  <pre>\n  Io> Object clone do(x:=1) serialized\n  ==> Object clone do(\n  \tx := 1\n  )\n  <\/pre>\n","ifNilEval(arg)":" Does nothing, returns self.\n","ancestors":"Returns a list of all of the receiver's ancestors as found by recursively following the protos links.\n","doFile(pathString)":"\tEvaluates the File in the context of the receiver. Returns the result.\n\tpathString is relative to the current working directory.\n","actorRun":"Starts actor mode if not started already. Basically, sets actorProcessQueue for later execution.\n","appendProto(anObject)":"\tAppends anObject to the receiver's proto list. Returns self.\n","if(<condition>, <trueMessage>, <optionalFalseMessage>)":"\tEvaluates trueMessage if condition evaluates to a non-Nil.\n\tOtherwise evaluates optionalFalseMessage if it is present.\n\tReturns the result of the evaluated message or Nil if none was evaluated.\n","ancestorWithSlot(slotName)":"\tReturns the first ancestor of the receiver that contains\n\ta slot of the specified name or Nil if none is found.\n","isActivatable":"\tReturns true if the receiver is activatable, false otherwise.\n","localsUpdateSlot(slotNameString, valueObject)":"\tLocal's version of updateSlot mthod.\n","doURL(urlString)":" Fetches the URL and evals it in the context of the receiver.\n","slotNames":"\tReturns a list of strings containing the names of the\n\tslots in the receiver (but not in it's lookup path).\n","serializedSlotsWithNames(names, stream)":" Writes selected slots to a stream.\n","shouldPersistByDefault":"PDB boolean flag indicating whether this object should be considered for persistence\nwhen persistence has not been specifically requested by calling ppid() or PDB addObjectToPersist.\nAlways false by default for Object.\n","persist":"Force immediate persistence of this object with PDB.\n","relativeDoFile(pathString)":"\t\tEvaluates the File in the context of the receiver. Returns the result. \n\t\tpathString is relative to the file calling doRelativeFile. (Duplicate of doRelativeFile)\n","ifDebug(code)":" Executes code if debugWriteln is not nil.\n","asString":"Same as <tt>slotSummary<\/tt>.\n","super(aMessage)":"\tSends the message aMessage to the receiver's proto with the context of self. Example:\n\t<pre>\n\tself test(1, 2)   \/\/ performs test(1, 2) on self\n\tsuper(test(1, 2)) \/\/ performs test(1, 2) on self proto but with the context of self\n\t<\/pre>\n","become(anotherObject)":"\tReplaces receiver with <tt>anotherObject<\/tt> and returns self.\n\tUseful for implementing transparent proxies. See also <tt>FutureProxy<\/tt> and <tt>Object @<\/tt>.\n\t<br\/>\n\tNote: primitives cannot become new values.\n","setPpid":"PDB extension to set the value returned by ppid.\n","returnIfError":"Does nothing, returns self.\n","wait(s)":"\tPauses current coroutine for at least <tt>s<\/tt> seconds.\n\t<br\/>\n\tNote: current coroutine may wait much longer than designated number of seconds\n\tdepending on circumstances.\n","performWithArgList(methodName, argList)":"\tPerforms the method corresponding to methodName with the arguments in the argList.\n","debugWriteln":"Method for writing debug messages (nil\/writeln by default)\n","return(anObject)":"\tReturn anObject from the current execution block.\n","debugOn":"Sets debugWriteln to writeln. Returns self.\n","persistSlots":"Force immediate persistence of this object's dirty slots into PDB.\n","in(aList)":" Same as: aList contains(self)\n","evalArgAndReturnNil(expression)":"\tEvaluates the argument and returns nil.\n","cloneWithoutInit":"\tReturns a clone of the receiver but does not call init.\n","println":"Same as print, but also prints a new line. Returns self.\n","<=(expression)":"\tEvaluates argument and returns self if self is less\n\tthan or equal to it, or Nil if not.\n","and(arg)":" Evaluates argument and returns the result.\n","hasProto(anObject)":"\tReturns true if anObject is found in the proto path of the target, false otherwise.\n","markClean":"Cleans object's slots.\n","coroDo(code)":"\t\tCreates a new coro to be run in a context of sender and yields to it.\n\t\tReturns a coro.\n","removeProto(anObject)":"\tRemoves anObject from the receiver's proto list if it\n\tis present. Returns self.\n","isTrue":"Returns true.\n","isNil":"Returns false.\n","isLaunchScript":"Returns true if the current file was run on the command line. Io's version of Python's __file__ == \"__main__\"\n","doString(aString)":"\tEvaluates the string in the context of the receiver. Returns the result.\n","launchFile(pathString)":" Eval file at pathString as if from the command line in it's folder.\n","slotDescriptionMap":"  Returns raw map of slot names and short values' descriptions.\n  See also <tt>Object slotSummary<\/tt>.\n","prependProto(anObject)":"\tPrepends anObject to the receiver's proto list. Returns self.\n","(expression)":"\tThe '' method evaluates the argument and returns the result.\n","write(<any number of arguments>)":"\tSends a print message to the evaluated result of each argument. Returns Nil.\n","returnIfNonNil":"\tReturns the receiver from the current execution block if it is non nil. \n\tOtherwise returns the receiver locally.\n","coroWith(code)":" Returns a new coro to be run in a context of receiver.\n","do(expression)":"\tEvaluates the message in the context of the receiver. Returns self.\n","==(aValue)":"\tReturns true if receiver and aValue are equal, false otherwise.\n","evalArgAndReturnSelf(expression)":"\tEvaluates the argument and returns the target.\n","removeAllProtos":"\tRemoves all of the receiver's protos. Returns self.\n","apropos":"Prints out <tt>Protos Core<\/tt> slot descriptions.\n","ifError":"Does nothing, returns self.\n","slotValues":"\tReturns a list of the values held in the slots of the receiver.\n","hasSlot(name)":"  Returns <tt>true<\/tt> if slot is found somewhere in the inheritance chain \n  (including receiver itself).\n","isError":"Returns false if not an error.\n","setProtos(aList)":"\tReplaces the receiver's protos with a copy of aList. Returns self.\n",">(expression)":"\tEvaluates argument and returns self if self is greater than it, or Nil if not.\n","asSimpleString":"Returns <type>_<uniqueHexId> string.\n","evalArg(expression)":"\tThe '' method evaluates the argument and returns the result.\n","pSlots":"PDB extension to set a list of slots to persist with PDB.\nCreates the specified slots using newSlot and sets them to nil.\n","thisMessage":"\tReturns the calling message (i.e. thisMessage itself, huh).\n","contextWithSlot(slotName)":"\tReturns the first context (starting with the receiver and following the lookup path)\n\tthat contains a slot of the specified name or Nil if none is found.\n","ownsSlots":"  A debug method.\n","proto":"\tSame as; method(self protos first)\n","debugOff":"Sets debugWriteln to nil. Returns self.\n","NullCharacter":"A sequence with a single zero byte.\n","memorySize":"\tReturn the amount of memory used by the object.\n","inlineMethod":"  Creates a method which is executed directly in a receiver (no Locals object is created).\n  <br\/>\n  <pre>\n  Io> m := inlineMethod(x := x*2)\n  Io> x := 1\n  ==> 1\n  Io> m\n  ==> 2\n  Io> m\n  ==> 4\n  Io> m\n  ==> 8\n  <\/pre>\n","newSlot(slotName, aValue)":"\tCreates a getter and setter for the slot with the name slotName\n\tand sets it's default the value aValue. Returns self. For example,\n\tnewSlot(\"foo\", 1) would create slot named foo with the value 1 as well as a setter method setFoo().\n","checkMemory()":"\taccesses memory in the IoObjectData struct that should be accessible.  Should cause a memory access\n\texception if memory is corrupt.\n","list(...)":" Returns a List containing the arguments.\n","compact":"\tCompact the memory for the object if possible. Returns self.\n","currentCoro":"Returns the currently running coroutine.\n","loop(expression)":"\tKeeps evaluating message until a break.\n","persistMetaData":"Force immediate persistence of this object's type data into PDB\n"}},"Debugger":{"description":"Contains methods related to the IoVM debugger.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"debuggerCoroutine":"Returns the coroutine used for the debugger.\n","vmWillSendMessage":"Override this method to implement your own debugging mechanisms. Default behavior is to print every message sent.\n","description":"\tTo start debugging a coroutine, call\n\t<code>\n\tCoroutine currentCoroutine setMessageDebugging(true)\n\t<\/code>\n\tThen each message sent within that coroutine will cause the Debugger \n\tvmWillSendMessage slot to be activated and the Debugger slots: \n\tmessageCoroutine, messageSelf, messageLocals, and message will be set with the \n\tvalues related to the current message send. You can override vmWillSendMessage to \n\timplement your own debugging mechanisms.\n","start":"Starts the debugger.\n"}},"Sandbox":{"description":"Sandbox can be used to run separate instances of Io within the same process.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"messageCount":"\tReturns a number containing the messageCount limit of the Sandbox.\n","setTimeLimit(aDouble)":"\tSets the time limit of the Sandbox.\n","timeLimit":"\tReturns a number containing the time limit of calls made to the Sandbox.\n","setMessageCount(anInteger)":"\tSets the messageCount limit of the receiver.\n","printCallback(string)":" default implementation is; method(string, string print)\n","doSandboxString(aString)":"\tEvaluate aString inside the Sandbox.\n"}},"List":{"description":"A mutable array of values. The first index is 0.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"reverse":"Reverses the ordering of all the items of the receiver. Returns copy of receiver.\n","select(optionalIndex, value, message)\",":"\t\t\"Like foreach, but the values for which the result of\nmessage are non-nil are returned in a new List. Example:\n<code>list(1, 5, 7, 2) select(i, v, v > 3) print\n==> 5, 7\n\nlist(1, 5, 7, 2) select(v, v > 3) print\n==> 5, 7<\/code>\n","flatten":"\tCreates a new list, with all contained lists flattened into the new list. For example:\n<code>\nlist(1,2,list(3,4,list(5))) flatten\n==> list(1, 2, 3, 4, 5)\n<\/code>\n","union(list)":" Returns a new list containing items from the target and items which are only in the argument list.\n","join(optionalString)":"\t\tReturns a Sequence of the concatenated items with \n\t\toptionalString between each item or simply the concatenation of the items if no optionalString is supplied.\n","mapInPlace":"Same as <tt>map<\/tt>, but result replaces self.\n","asEncodedList":"\tReturns a Sequence with an encoding of the list. \n\tNil, Number and Symbol objects are copied into the encoding, for other object\n\ttypes, referenceIdForObject(item) will be called to request a reference id for \n\tthe object.\n\t\n\tAlso see: List fromEncodedList.\n","swapIndices(index1, index2)":"\tExchanges the object at index1 with the object at index2.\n\tRaises an exception if either index is out of bounds. Returns self.\n","reverseForeach(index, value, message)":"\tSame as foreach, but in reverse order.\n","anyOne":"Returns a random element of the receiver or nil if the receiver is empty.\n","prepend(anObject1, anObject2, ...)":"\tInserts the values at the beginning of the list. Returns self.\n","second":"Returns third element (same as <tt>at(2)<\/tt>)\n","insertBefore(item, beforeItem)":" Inserts item before first occurance of beforeItem or to the end of the list if beforeItem is not found. Returns self.\n","atInsert(index, anObject)":"\tInserts anObject at the index specified by index.\n\tAdds anObject if the index equals the current count of the receiver.\n\tRaises an exception if the index is out of bounds. Returns self.\n","selectInPlace":"Same as <tt>select<\/tt>, but result replaces self.\n","last(optionalSize)":"\tReturns the last item or Nil if the list is empty.\n\tIf optionalSize is provided, that number of the last items in the list are returned.\n","empty":"\tRemoves all items from the receiver.\n","removeFirst":"Returns the first item and removes it from the list. nil is returned if the list is empty.\n","setSize":"\tSets the size of the receiver by either removing excess items or adding nils as needed.\n","reverseReduce":"Also known as foldr and inject. Combines values in target starting on the right. reverseReduce(+) or reverseReduce(x, y, x + y).\n","average":"Returns the average of the items.\n","insertAt(item, index)":" Inserts item at the specified index. Raises an exception if the index is out of bounds. Returns self.\n","uniqueCount":"Returns a list of list(value, count) for each unique value in self.\n","unique":"Returns a new list containing all the values in the target, but no duplicates.\n","at(index)":"\tReturns the value at index. Returns Nil if the index is out of bounds.\n","removeAt(index)":"\tRemoves the item at the specified index and returns the value removed.\n\tRaises an exception if the index is out of bounds.\n","fromEncodedList(aSeq)":"\tReturns a List with the decoded Nils, Symbols and Numbers from the input raw array. \n\tFor each object reference encounters, objectForReferenceId(id) will be called to \n\tallow the reference to be resolved. \n\t\n\tAlso see: List asEncodedList.\n","removeSeq":"Removes each of the items from the current list which are contained in the sequence passed in.\n","copy(v)":" Replaces self with <tt>v<\/tt> list items. Returns self.\n","size":"\tReturns the number of items in the receiver.\n","sortInPlace(optionalExpression)":"\tSorts the list using the compare method on the items. Returns self.\n\tIf an optionalExpression is provided, the sort is done on the result of the evaluation\n\tof the optionalExpression on each value.\n","pop":"\tReturns the last item in the list and removes it\n\tfrom the receiver. Returns nil if the receiver is empty.\n","rest":"Returns a copy of the list but with the first element removed.\n","remove(anObject, ...)":"\tRemoves all occurrences of the arguments from the receiver. Returns self.\n","join(optionalSeperator)":"\tReturns a String with the elements of the receiver concatenated into one String. \n\tIf optionalSeperator is provided, it is used to separate the concatenated strings.\n\tThis operation does not respect string encodings.\n","appendIfAbsent(anObject)":"\tAdds each value not already contained by the receiver, returns self.\n","shuffleInPlace":"Randomizes the order of the elements in the receiver. Returns self.\n","reverseInPlace":"\tReverses the ordering of all the items in the receiver. Returns self.\n","foreach(optionalIndex, value, message)":"Loops over the list values setting the specified index and\nvalue slots and executing the message. Returns the result of the last\nexecution of the message. Example:\n<p>\n<pre>\nlist(1, 2, 3) foreach(i, v, writeln(i, \" = \", v))\nlist(1, 2, 3) foreach(v, writeln(v))<\/pre>\n","containsAny(list)":" Returns true the target contains any of the items in the argument list.\n","map(optionalIndex, value, message)":" Same as calling mapInPlace() on a clone of the receiver, but more efficient.\n","appendSeq(aList1, aList2, ...)":"\tAdd the items in the lists to the receiver. Returns self.\n","shuffle":"Randomizes the ordering of all the items of the receiver. Returns copy of receiver.\n","capacity":"\tReturns the number of potential elements the receiver can hold before it needs to grow.\n","append(anObject1, anObject2, ...)":"\tAppends the arguments to the end of the list. Returns self.\n","reduce":"Also known as foldl or inject. Combines values in target start on the left. reduce(+) or reduce(x, y, x + y).\n","asMessage":"\tConverts each element in the list to unnamed messages \n\twith their cached result set to the value of the element (without activating). \n\tReturns an unnamed message whose arguments map 1:1 with the elements (after being converted to messages themselves).\n","containsAll(list)":" Returns true the target contains all of the items in the argument list.\n","insertAfter(item, afterItem)":"\tInserts item after first occurance of afterItem and returns self. \n\tIf afterItem is not found, item is appended to the end of the list.\n","indexOf(anObject)":"\tReturns the index of the first occurrence of anObject\n\tin the receiver. Returns Nil if the receiver doesn't contain anObject.\n","sliceInPlace(startIndex, endIndex)":"\tReturns the receiver containing the subset of the\n\treceiver from the startIndex to the endIndex. The endIndex argument\n\tis optional. If not given, it is assumed to be the end of the string.\n","atPut(index, anObject)":"\tReplaces the existing value at index with anObject.\n\tRaises an exception if the index is out of bounds. Returns self.\n","push(anObject1, anObject2, ...)":"\tSame as add(anObject1, anObject2, ...).\n","contains(anObject)":"\tReturns true if the receiver contains anObject, otherwise returns false.\n","containsIdenticalTo(anObject)":"\tReturns true if the receiver contains a value identical to anObject, otherwise returns false.\n","first(optionalSize)":"\tReturns the first item or Nil if the list is empty.\n\tIf optionalSize is provided, that number of the first items in the list are returned.\n","detect(optionalIndex, value, message)":"\tReturns the first value for which the message evaluates to a non-nil. Example:\n<code>list(1, 2, 3, 4) detect(i, v, v > 2)\n==> 3\n\nlist(1, 2, 3, 4) detect(v, v > 2)\n==> 3<\/code>\n","preallocateToSize(aNumber)":"\tPreallocates array memory to hold aNumber number of items.\n","sum":"Returns the sum of the items.\n","slice(startIndex, endIndex)":"\tReturns a new string containing the subset of the\n\treceiver from the startIndex to the endIndex. The endIndex argument\n\tis optional. If not given, it is assumed to be the end of the string.\n","itemCopy":"Returns a new list containing the items from the receiver.\n","justSerialized(stream)":" Writes the receiver's code into the stream.\n","removeLast":"Returns the last item and removes it from the list. nil is returned if the list is empty.\n","cursor":"Returns a ListCursor for the receiver.\n","intersect(list)":" Returns a new list containing the common values from the target and argument lists.\n","sortInPlaceBy(aBlock)":"\tSort the list using aBlock as the compare function. Returns self.\n","difference(list)":" Returns a new list containing items from the target list which aren't in the argument list.\n","with(anObject, ...)":"\tReturns a new List containing the arguments.\n","asMap":"The reverse of Map asList: converts a list of lists (key-value pairs) into a Map. The first item of each pair list must be a sequence. The second item is the value.\n"}},"Exception":{"module":"Core","description":"The Exception proto is used for raising exceptions and instances are used to hold rexception related info. \n\n<p><b>Raise<\/b><p>\n\nAn exception can be raised by calling raise() on an exception proto.\nException raise(\"generic foo exception\")\n\n<p><b>Try and Catch<\/b><p>\n\nTo catch an exception, the try() method of the Object proto is used. try() will catch any exceptions that occur within it and return the caught exception or nil if no exception is caught.\n\n<pre>\ne := try(<doMessage>)\n<\/pre>\n\nTo catch a particular exception, the Exception catch() method can be used. Example:\n\n<pre>\ne := try(\n    \/\/ ...\n) \n\ne catch(Exception,\n    writeln(e coroutine backtraceString)\n)\n<\/pre>\n\nThe first argument to catch indicates which types of exceptions will be caught. catch() returns the exception if it doesn't match and nil if it does.\n\n<p><b>Pass<\/b><p>\n\nTo re-raise an exception caught by try(), use the pass method. This is useful to pass the exception up to the next outer exception handler, usually after all catches failed to match the type of the current exception:\n<pre>\ne := try(\n    \/\/ ...\n) \n\ne catch(Error,\n    \/\/ ...\n) catch(Exception,\n    \/\/ ...\n) pass\n<\/pre>\n\n<p><b>Custom Exceptions<\/b><p>\n\nCustom exception types can be implemented by simply cloning an existing Exception type:\n<pre>\nMyErrorType := Error clone\n<\/pre>\n","category":"Core\n","slots":{"originalCall":"Returns the call object associated with the exception.\n","catch(exceptionProto)":" Catch an exception with the specified exception prototype.\n","nestedException":"Returns the nestedException if there is one.\n","showStack":"Print the exception and related stack.\n","caughtMessage":"Returns the message object associated with the exception.\n","raise(error, optionalNestedException)":" Raise an exception with the specified error message.\n","pass":"Pass the exception up the stack.\n","error":"Returns the coroutine that the exception occurred in.\n"}},"CFunction":{"description":"A container for a pointer to a C function binding. \nCFunction's can only be defined from the C side and act \nlike blocks in that when placed in a slot, are called when the \nslot is activated. The for, if, while and clone methods of the Lobby \nare examples of CFunctions. CFunctions are useful for implementing \nmethods that require the speed of C or binding to a C library.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"id":"\tReturns a number containing a unique id for the receiver's internal C function.\n","asString":"Same as asSimpleString.\n","==(anObject)":"\tReturns self if the argument is a CFunction with the same internal C function pointer.\n","name":"Returns the CFunction name in the form CFunction_Pointer.\")\n","performOn(target, blockLocals, optionalMessage, optionalContext)":"\tActivates the CFunctions with the supplied settings.\n","typeName":"\tReturns the owning type of the CFunction or nil if the CFunction can be called on any object.\n","uniqueName":"\tReturns the name given to the CFunction.\n","asSimpleString":"Returns the CFunction name.\n"}},"Collector":{"description":"A singleton containing methods related to Io's garbage collector. \nIo currently uses a incremental, non-moving, generational \ncollector based on the tri-color (black\/gray\/white) \nalgorithm with a write-barrier.\n<p>\nEvery N number of object allocs, the collector will walk \nsome of the objects marked as gray, marking their connected \nwhite objects as gray and turning themselves black. \nEvery M allocs, it will pause for a sweep where it makes sure \nall grays are marked black and io_frees all whites.\n<p>\nIf the sweepsPerGeneration is set to zero, it will immediately mark \nall blacks as white again and mark the root objects as gray. Otherwise, \nit will wait until the sweepsPerGeneration count is reached to do this. \nBy adjusting the allocsPerSweep and sweepsPerGeneration appropriately, the \ncollector can be tuned efficiently for various usage cases. \n\nGenerally, the more objects in your heap, the larger you'll want this number.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"reset":"\tResets the profilerTime on all Block objects in the system.\n","allocatedStep":"\tReturn the allocation step value as a Number.\n","setDebug(aBool)":"\tTurns on\/off printing of collector debugging messages. Returns self.\n","maxAllocatedBytes":"\tReturns the maximum number of bytes allocated by the collector.\n","resetMaxAllocatedBytes":"\tResets maximum number of bytes allocated by the collector. Returns self.\n","cleanAllObjects":"\tSets all objects as clean. Returns self.\n","objectWithUniqueId(aNumber)":"\tReturns an object whose uniqueId is aNumber or nil if no match is found. \n\tWarning: This lookup currently scans all objects, so it is not efficient, \n\tthough it should handle thousands of lookups per second.\n","dirtyObjects":"\tReturns a List containing all dirty objects known to the collector.\n","allObjects":"\tReturns a List containing all objects known to the collector.\n","setMarksPerAlloc(aNumber)":"\tSets the number of incremental collector marks per object \n\tallocation (can be fractional). Returns self.\n","timeUsed":"\tReturn the time used so far by the collector in seconds.\n","timedObjects":"\tReturns a list of objects found in the system that have profile times.\n","showStats":"\tPrints the collector's stats to standard output.\n","collect":"\tRuns garbage collector. Returns the number of items collected.\n","marksPerAlloc":"\tReturn the number of allocations per collector mark pass.\n","setAllocatedStep(aNumber)":"\tSets the allocatedStep (can have a fractional component, \n\tbut must be larger than 1). A collector sweep is forced when the \n\tnumber of allocated objects exceeds the allocatedSweepLevel. \n\tAfter a sweep, the allocatedSweepLevel is set to the allocated \n\tobject count times the allocatedStep. Returns self.\n"}},"Sequence":{"description":"A Sequence is a container for a list of data elements. Typically these elements are each 1 byte in size. A Sequence can be either mutable or immutable. When immutable, only the read-only methods can be used.\n<p>\nTerminology\n<ul>\n<li> Buffer: A mutable Sequence of single byte elements, typically in a binary encoding\n<li> Symbol or String: A unique immutable Sequence, typically in a character encoding\n<\/ul>\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"asSGML":"SGML extension to interpret the Sequence as SGML and return an SGML object using SGMLParser elementForString\n","lessThanOrEqualTo(aSeq)":"\tReturns true if the receiver is lass than or equal to aSeq, false otherwise.\n","asFile":"Returns a new File object with the receiver as it's path.\n","*=(aSeq)":"\tMultiplies the values of aSeq to the corresponding values of the receiver.\n\tOnly works on Sequences whose item type is numeric. Returns self.\n","matchesOfRegex(aRegexOrString)":"\t\tReturns a RegexMatches object that enumerates all matches of the given regex in the receiver.\n","tanh":"Sets each value of the Sequence to the hyperbolic tangent of it's value.\nReturns self.\n","asLowercase":"\tReturns a symbol containing the reveiver made Lowercase.\n","hasMatchOfRegex(aRegexOrString)":"\t\tReturns true if the string contains one or more matches of the given regex.\n","+=(aSeq)":"\tVector addition - adds the values of aSeq to those of the receiver.\n\tOnly works on Sequences whose item type is numeric. Returns self.\n","cosh":"Sets each value of the Sequence to the hyperbolic cosine of it's value.\nReturns self.\n","capitalize":"\tFirst charater of the receiver is made uppercase.\n","removeEvenIndexes":"Removes even indexes in the receiver.\nFor example, list(1,2,3) removeEvenIndexes == list(1, 3). Returns self.\n","reverseInPlace":"\tReverses the bytes in the receiver, in-place.\n","itemSize":"\tReturns number of bytes in each element.\n","normalize":"Divides each value of the Sequence by the max value of the sequence.\nReturns self.\n","dotProduct(aSeq)":"\tReturns a new Sequence containing the dot product of the receiver with aSeq.\n","isUppercase":"\tReturns self if all the characters in the string are upper case.\n","sin":"Sets each value of the Sequence to the trigomentic sine of it's value.\nReturns self.\n","logicalAnd(aSequence)":"Updates the receive's values to be the result of a logical OR operatiosn with the values of aSequence. Returns self.\n","atInsertSeq(indexNumber, object)":"\tCalls asString on object and inserts the string at position indexNumber. Returns self.\n","allMatchesOfRegex(aRegexOrString)":"\t\tReturns a List containing all matches of the given regex found in the receiver.\n","removePrefix(aSequence)":"\tIf the receiver begins with aSequence, it is removed. Returns self.\n","asUCS4":"\tReturns a new copy of the receiver converted to UCS4 (fixed character width UTF32) encoding.\n","withStruct(memberList)":"This method is useful for producing a Sequence containing a raw datastructure with\nthe specified types and values. The memberList format is:\n<p>\nlist(memberType1, memberName1, memberType2, memberName2, ...)\n<p>\nMember types include: \n<pre>\nint8, int16, int32, int64\nuint8, uint16, uint32, uint64\nfloat32, float64 \n<\/pre>\nExample:\n<pre>\npointStructSeq := Sequence withStruct(list(\"float32\", 1.2, \"float32\", 3.5))\n<\/pre>\nThe output pointStructSeq would contain 2 raw 32 bit floats.\n","afterSeq(aSequence)":"\tReturns the slice of the receiver (as a Symbol) after aSequence or\n\tnil if aSequence is not found. If aSequence is empty, the receiver\n\t(or a copy of the receiver if it is mutable) is returned.\n","whiteSpaceStrings":"\tReturns a List of strings. Each string contains a different\n\twhitespace character.\n","cos":"Sets each value of the Sequence to the trigomentic cosine of it's value.\nReturns self.\n","\/(aSeq)":"\tDivides the values of aSeq to the corresponding values of the receiver \n\treturning a new vector with the result.\n\tOnly works on Sequences whose item type is numeric.\n","logicalOr(aSequence)":"Updates the receive's values to be the result of a logical OR operatiosn with the values of aSequence. Returns self.\n","endsWithSeq(aSequence)":"\tReturns true if the receiver ends with aSequence, false otherwise.\n","escapeRegexChars":"\t\tReturns a clone of the receiver with all special regular expression characters\n\t\t(\"^\", \"$\", etc) backslashed. Useful if you have a string that contains such characters,\n\t\tbut want it to be treated as a literal string.\n","print":"Prints contents of a sequence.\n","pathComponent":"\tReturns a slice of the receiver before the last path separator as a symbol.\n","at(aNumber)":"\tReturns a value at the index specified by aNumber.\n\tReturns nil if the index is out of bounds.\n","acos":"Sets each value of the Sequence to the trigomentic arcsine of it's value.\nReturns self.\n","encoding":"\tReturns the encoding of the elements.\n","containsSeq(aSequence)":"\tReturns true if the receiver contains the substring\n\taSequence, false otherwise.\n","asStruct(memberList)":"For a sequence that contains the data for a raw memory data structure (as used in C),\nthis method can be used to extract it's members into an Object. The memberList argument\nspecifies the layout of the datastructure. It's form is:\n<p>\nlist(memberType1, memberName1, memberType2, memberName2, ...)\n<p>\nMember types include: \n<pre>\nint8, int16, int32, int64\nuint8, uint16, uint32, uint64\nfloat32, float64 \n<\/pre>\nExample:\n<pre>\npointObject := structPointSeq asStruct(list(\"float32\", \"x\", \"float32\", \"y\"))\n<\/pre>\nThe output pointObject would contain x and y slots with Number objects.\n","setItemsToDouble(aNumber)":"\tSets all items in the Sequence to the double floating point value of aNumber.\n","sqrt":"Sets each value of the Sequence to the square root of it's value.\nReturns self.\n","bitwiseNot(aSequence)":"Updates the receiver to be the result of a bitwiseNot with aSequence. Returns self.\n","asHTML":"SGML extension to interpret the Sequence as HTML and return an SGML object using SGMLParser elementForString\n","itemType":"\tReturns machine type of elements.\n","asJson":"Converts to form that could be interpreted as json if it already contains json, e.g. {\"aaa\":\"bbb\"} --> \"{\\\"aaa\\\":\\\"bbb\\\"}\"\n","empty":"\tSets all bytes in the receiver to 0x0 and sets\n\tit's length to 0. Returns self.\n","clipBeforeEndOfSeq(aSequence)":"\tRemoves the contents of the receiver before the end of\n\tthe first occurance of aSequence. Returns true if anything was\n\tremoved, or false otherwise.\n","isLowercase":"\tReturns self if all the characters in the string are lower case.\n","split(optionalArg1, optionalArg2, ...)":"Returns a list containing the sub-sequences of the receiver divided by the given arguments.\nIf no arguments are given the sequence is split on white space.\nExamples:\n<pre>\t\n\"a b c d\" split == list(\"a\", \"b\", \"c\", \"d\")\n\"a*b*c*d\" split(\"*\") == list(\"a\", \"b\", \"c\", \"d\")\n\"a*b|c,d\" split(\"*\", \"|\", \",\") == list(\"a\", \"b\", \"c\", \"d\")\n\"a   b  c d\" split == list(\"a\", \"\", \"\", \"\", \"b\", \"\", \"\", \"c\", \"\", \"d\")\n<\/pre>\n","asJid":"Converts Sequence to JID object. <pre><code>\"cow@moo.com\/Scandinavia\" asJid<\/code><\/pre>\n","findNthSeq(aSequence, n)":" Returns a number with the nth occurence of aSequence.\n","asURL":"Returns a new URL object instance with the receiver as it's url string.\n","betweenSeq(aSequence, anotherSequence)":"\tReturns a new Sequence containing the bytes between the\n\toccurance of aSequence and anotherSequence in the receiver. \n\tIf aSequence is empty, this method is equivalent to beforeSeq(anotherSequence).\n\tIf anotherSequence is nil, this method is equivalent to afterSeq(aSequence).\n\tnil is returned if no match is found.\n","linePrint":"\tPrints the Sequence and a newline character.\n","appendSeq(object1, object2, ...)":"\tCalls asString on the arguments and appends the string to the receiver. Returns self.\n","clear":"Set all values in the sequence to 0. Returns self.\n","abs":"Sets each value of the Sequence to it's absolute value.\nReturns self.\n","pathExtension":"\tReturns a string containing the receiver clipped up to the last period.\n","split Returns a list containing the sub-sequences of the receiver divided by the given arguments.":"\t\tIf no arguments are given the sequence is split on white space.\n","repeated(n)":" Returns a new sequence containing the receiver repeated n number of times.\n","asBinaryNumber":"\tReturns a Number containing the first 8 bytes of the\n\treceiver without casting them to a double. Endian is same as machine.\n","size":"Returns the length in number of items (which may or may not\nbe the number of bytes, depending on the item type) of the receiver. For example,\n<p>\n<pre>\t\n\"abc\" size == 3\n<\/pre>\n","lstrip(aSequence)":"Strips the characters in aSequence\nstripped from the beginning of the receiver. Example:\n<p>\n<pre>\t\n\"Keep the tail\" lstrip(\" eKp\")\n==> \"the tail\"\n<\/pre>\n","asUCS2":"\tReturns a new copy of the receiver converted to UCS2 (fixed character width UTF16) encoding.\n","findRegex(aRegexOrString, [startIndex])":"\t\tReturns the first match of the given regex in the receiver, after the given start index.\n\t\tIf you don't specify a start index, the search will start at the beginning of the receiver.\n\t\tThe method returns nil if no match is found.\n","isEqualAnyCase(aSequence)":"\tReturns true if aSequence is equal to the receiver\n\tignoring case differences, false otherwise.\n","log":"Sets each value of the Sequence to the natural log of it's value.\nReturns self.\n","bitwiseAnd(aSequence)":"Updates the receiver to be the result of a bitwiseAnd with aSequence. Returns self.\n","convertToItemType(aTypeName)":"\tConverts the underlying machine type for the elements, expanding or contracting\n\tthe size of the Sequence as needed. \n\tValid names are uint8, uint16, uint32, uint64, int8, int16, int32, \n\tint64, float32, and float64. Note that 64 bit types are only available \n\ton platforms that support such types. Returns self.\n","..(aSequence)":"\tReturns a copy of the receiver with aSequence appended to it.\n","sort":"Sorts the characters\/numbers the array. Returns self.\n","alignRight(width, [padding])":"\tExample:\n\t<p>\n\t<code>\n\tIo> \"abc\" alignRight(10, \"-\")\n\t==> -------abc\n\tIo> \"abc\" alignRight(10, \"-=\")\n\t==> -=-=-=-abc\n\t<\/code>\n","findSeq(aSequence, optionalStartIndex)":"\tReturns a number with the first occurrence of aSequence in\n\tthe receiver after the startIndex. If no startIndex is specified,\n\tthe search starts at index 0.\n\tnil is returned if no occurences are found.\n","interpolate(ctx)":"\tReturns immutable copy of self with interpolateInPlace(ctx) passed to the copy.\n","beginsWithSeq(aSequence)":"\tReturns true if the receiver begins with aSequence, false otherwise.\n","translate(fromChars, toChars)":"\tIn the receiver, the characters in fromChars are replaced with those in the same positions in toChars. Returns self.\n","asMutable":"\tReturns a mutable copy of the receiver.\n","inclusiveSlice(inclusiveStartIndex, inclusiveEndIndex)":"\tReturns a new string containing the subset of the\n\treceiver from the inclusiveStartIndex to the inclusiveEndIndex. The inclusiveEndIndex argument\n\tis optional. If not given, it is assumed to be the end of the string.\n","setSize(aNumber)":"\tSets the length in bytes of the receiver to aNumber. Return self.\n","isZero":"\tReturns true if all elements are 0, false otherwise.\n","reverseFindSeq(aSequence, startIndex)":"\tReturns a number with the first occurrence of aSequence in\n\tthe receiver before the startIndex. The startIndex argument is optional.\n\tBy default reverseFind starts at the end of the string. Nil is\n\treturned if no occurrences are found.\n","bitAt(bitIndex)":"Returns a Number containing the bit at the bit index value.\n","\/=(aSeq)":"\tDivides the values of aSeq to the corresponding values of the receiver.\n\tOnly works on Sequences whose item type is numeric. Returns self.\n","byteAt(byteIndex)":"Returns a Number containing the byte at the byte index value.\n","log10":"Sets each value of the Sequence to the base 10 log of it's value.\nReturns self.\n","justSerialized(stream)":" Writes the receiver's code into the stream.\n","beforeSeq(aSequence)":"\tReturns the slice of the receiver (as a Symbol) before\n\taSequence or self if aSequence is not found.\n","ceil":"Round each value to smallest integral value not less than x.\nReturns self.\n","rstrip(aSequence)":"Strips the characters in\naSequence stripped from the end of the receiver. Example:\n<pre>\t\n\"Cut the tail off\" rstrip(\" afilot\")\n==> \"Cut the\"\n<\/pre>\n","meanSquare":"Returns the arithmetic mean of the sequence's values after they have been squared.\n","strip(optionalSequence)":"Trims the whitespace (or optionalSequence) off both ends:\n<p>\n<pre>\t\n\"   Trim this string   \\r\\n\" strip\n==> \"Trim this string\"\n<\/pre>\n","asSymbol":"\tReturns a immutable Sequence (aka Symbol) version of the receiver.\n","findSeqs(listOfSequences, optionalStartIndex)":"\tReturns a object with two slots - an \\\"index\\\" slot which contains \n\tthe first occurrence of any of the sequences in listOfSequences found \n\tin the receiver after the startIndex, and a \\\"match\\\" slot, which \n\tcontains a reference to the matching sequence from listOfSequences. \n\tIf no startIndex is specified, the search starts at index 0. \n\tnil is returned if no occurences are found.\n","sum":"Returns the sum of the Sequence.\n","asCapitalized":"\tReturns a copy of the receiver with the first charater made uppercase.\n","hash":"Returns a Number containing a hash of the Sequence.\n","reverse":"Reverses the ordering of all the items of the receiver. Returns copy of receiver.\n","asOSPath":"Returns a OS style path for an Io style path.\n","tan":"Sets each value of the Sequence to the trigomentic tangent of it's value.\nReturns self.\n","isMutable":"\tReturns true if the receiver is a mutable Sequence or false otherwise.\n","sinh":"Sets each value of the Sequence to the hyperbolic sine of it's value.\nReturns self.\n","asin":"Sets each value of the Sequence to the trigomentic arcsine of it's value.\nReturns self.\n","setItemType(aTypeName)":"\tSets the underlying machine type for the elements. \n\tValid names are uint8, uint16, uint32, uint64, int8, int16, int32, \n\tint64, float32, and float64. Note that 64 bit types are only available \n\ton platforms that support such types. Returns self.\n","interpolateInPlace(optionalContext)":"\tReplaces all #{expression} with expression evaluated in the optionalContext. \n\tIf optionalContext not given, the current context is used.  Returns self.\n","fromBase64":"\tReturns an immutable, base64 decoded (according to RFC 1421) version of self.\n","setEncoding(encodingName)":"\tSets the encoding flag of the receiver (only the encoding flag, \n\titemSize and itemType will change, no conversion is done between UTF\n\tencodings - you can use convertToUTF8, etc methods for conversions). \n\tValid encodings are number, utf8, utf16, and utf32. Returns self.\n","clipAfterStartOfSeq(aSequence)":"\tRemoves the contents of the receiver after the beginning of\n\tthe first occurance of aSequence. Returns true if anything was\n\tremoved, or false otherwise.\n","replaceSeq(aSequence, anotherSequence)":"\tReturns a new Sequence with all occurances of aSequence\n\treplaced with anotherSequence in the receiver. Returns self.\n","lowercase":"\tMakes all the uppercase characters in the receiver lowercase. Returns self.\n","matchesRegex(aRegexOrString)":"\t\tReturns true if the receiver matches the given regex, false if not.\n","mean":"Returns the arithmetic mean of the sequence.\n","fileName":"\tReturns the last path component sans the path extension.\n","replaceFirstSeq(aSequence, anotherSequence, optionalStartIndex)":"\tReturns a new Sequence with the first occurance of aSequence\n\treplaced with anotherSequence in the receiver. If optionalStartIndex is\n\tprovided, the search for aSequence begins at that index. Returns self.\n","appendPathSeq(aSeq)":"\tAppends argument to the receiver such that there is one\n\tand only one path separator between the two. Returns self.\n","atan":"Sets each value of the Sequence to the trigomentic arctangent of it's value.\nReturns self.\n","with(aSequence, ...)":"\tReturns a new Sequence which is the concatination of the arguments.\n\tThe returned sequence will have the same mutability status as the receiver.\n","asUppercase":"\tReturns a symbol containing the reveiver made uppercase.\n","replaceMap(aMap)":"\tIn the receiver, the keys of aMap replaced with it's values. Returns self.\n","rangeFill":"Sets the values of the Sequence to their index values.\nReturns self.\n","contains(aNumber)":"\tReturns true if the receiver contains an element equal in value to aNumber, false otherwise.\n","negate":"Negates the values of the receiver.\nReturns self.\n","unescape":"\tEscape codes replaced with escape characters. Returns self.\n","slicesBetween(startSeq, endSeq)":"  Returns a list of slices delimited \n  by <tt>startSeq<\/tt> and <tt>endSeq<\/tt>.\n  <br>\n  <pre>\n  Io> \"<a><b><\/b><\/a>\" slicesBetween(\"<\", \">\")\n  ==> list(\"a\", \"b\", \"\/b\", \"\/a\")\n  <\/pre>\n","setItemsToLong(aNumber)":"\tSets all items in the Sequence to the long integer value of aNumber.\n","cloneAppendPath(aSequence)":"\tAppends argument to a copy the receiver such that there is one\n\tand only one path separator between the two and returns the result.\n","distanceTo(aSeq)":"\tReturns a number with the square root of the sum of the square \n\tof the differences of the items between the sequences.\n","isEmpty":"\tReturns true if the size of the receiver is 0, false otherwise.\n","duplicateIndexes":"Duplicates all indexes in the receiver.\nFor example, list(1,2,3) duplicateIndexes == list(1,1,2,2,3,3). Returns self.\n","product":"Returns the product of all the sequence's values multipled together.\n","greaterThan(aSeq)":"\tReturns true if the receiver is greater than aSeq, false otherwise.\n","asXML":"SGML extension to interpret the Sequence as XML and return an SGML object using SGMLParser elementForString\n","removeSeq(aSequence)":"\tRemoves occurances of aSequence from the receiver.\n","removeSlice(startIndex, endIndex)":"\tRemoves the items from startIndex to endIndex.\n\tReturns self.\n","removeLast":"\tRemoves the last element from the receiver. Returns self.\n","bitwiseXor(aSequence)":"Updates the receiver to be the result of a bitwiseXor with aSequence. Returns self.\n","makeFirstCharacterLowercase":"  Receiver must be mutable (see also asMutable). Returns receiver.\n  <br\/>\n  <pre>\n  Io> \"ABC\" asMutable makeFirstCharacterLowercase\n  ==> aBC\n  <\/pre>\n","alignCenter(width, [padding]) \"\"":"\tExample:\n\t<code>\n\tIo> \"abc\" alignCenter(10, \"-\")\n\t==> ---abc----\n\tIo> \"abc\" alignCenter(10, \"-=\")\n\t==> -=-abc-=-=\n\t<\/code>\n","asBinaryUnsignedInteger":"\tReturns a Number with the bytes of the receiver interpreted as a binary unsigned integer. Endian is same as machine.\n","square":"Sets each value of the Sequence to the square of it's value.\nReturns self.\n","asHex":"Returns a hex string for the receiving sequence, e.g., \\\"abc\\\" asHex -> \\\"616263\\\".\")\n","atPut(aNumberIndex, aNumber)":"\tSets the value at the index specified by aNumberIndex to aNumber. Returns self.\n","fromBase(aNumber)":"\tReturns a number with a base 10 representation of the receiver\n\tconverted from the specified base. Only base 2 through 32 are currently supported.\n","*(aSeq)":"\tMultiplies the values of aSeq to the corresponding values of the receiver \n\treturning a new vector with the result.\n\tOnly works on Sequences whose item type is numeric.\n","splitAt(indexNumber)":"\tReturns a list containing the two parts of the receiver as split at the given index.\n","asNumber":"\tReturns the receiver converted to a number.\n\tInitial whitespace is ignored.\n","asUTF8":"\tReturns a new copy of the receiver converted to utf8 encoding.\n","asBinarySignedInteger":"\tReturns a Number with the bytes of the receiver interpreted as a binary signed integer. Endian is same as machine.\n","preallocateToSize(aNumber)":"\tIf needed, resize the memory alloced for the receivers\n\tbyte array to be large enough to fit the number of bytes specified by\n\taNumber. This is useful for pio_reallocating the memory so it doesn't\n\tkeep getting allocated as the Sequence is appended to. This operation\n\twill not change the Sequence's length or contents. Returns self.\n","alignLeft(width, [padding])":"\tExample:\n\t<p>\n\t<code>\n\tIo> \"abc\" alignLeft(10, \"+\")\n\t==> abc+++++++\n\tIo> \"abc\" alignLeft(10, \"-=\")\n\t==> abc-=-=-=-\n\t<\/code>\n","asFixedSizeType":"\tReturns a new sequence with the receiver encoded in the \n\tminimal fixed width text encoding that it's characters can fit \n\tinto (either, ascii, utf8, utf16 or utf32).\n","slice":"Deprecated method. Use exSlice instead.\n","exp":"Sets each value of the Sequence to e**value.\nReturns self.\n","clipBeforeSeq(aSequence)":"\tClips receiver before aSequence.\n","asMessage(optionalLabel)":"\tReturns the compiled message object for the string.\n","Max":"Returns the maximum value in the sequence.\n","removeOddIndexes":"Removes odd indexes in the receiver.\nFor example, list(1,2,3) removeOddIndexes == list(2). Returns self.\n","foreach(optionalIndex, value, message)":"For each element, set index to the index of the\nelement and value the element value and execute message. \nExample:\n<pre>\t\naSequence foreach(i, v, writeln(\"value at index \", i, \" is \", v))\naSequence foreach(v, writeln(\"value \", v))\n<\/pre>\n","Min":"Returns the minimum value in the sequence.\n","lessThan(aSeq)":"\tReturns true if the receiver is lass than aSeq, false otherwise.\n","set(aNumber1, aNumber2, ...)":"\tSets the values of the receiver to the sequences of numbers in the arguments.\n\tUnset values will remain unchanged.\n\tReturns self.\n","exclusiveSlice(inclusiveStartIndex, exclusiveEndIndex)":"\tReturns a new string containing the subset of the\n\treceiver from the inclusiveStartIndex to the exclusiveEndIndex. The exclusiveEndIndex argument\n\tis optional. If not given, it is assumed to be one beyond the end of the string.\n","prependSeq(object1, object2, ...)":" Prepends given objects asString in reverse order to the receiver.  Returns self.\")\n","toBase(aNumber)":"\tReturns a Sequence containing the receiver(which is\n\tassumed to be a base 10 number) converted to the specified base.\n\tOnly base 8 and 16 are currently supported.\n","bitwiseOr(aSequence)":"Updates the receiver to be the result of a bitwiseOr with aSequence. Returns self.\n","sizeInBytes":"\tReturns the length in bytes of the receiver.\n","greaterThanOrEqualTo(aSeq)":"\tReturns true if the receiver is greater than or equal to aSeq, false otherwise.\n","clipAfterSeq(aSequence)":"\tRemoves the contents of the receiver after the end of\n\tthe first occurance of aSequence. Returns true if anything was\n\tremoved, or false otherwise.\n","append(aNumber)":"\tAppends aNumber (cast to a byte) to the receiver. Returns self.\n","containsAnyCaseSeq(aSequence)":"\tReturns true if the receiver contains the aSequence\n\tregardless of casing, false otherwise.\n","+(aSeq)":"\tVector addition - Adds the values of aSeq to the corresponding values of the receiver \n\treturning a new vector with the result.\n\tOnly works on Sequences whose item type is numeric.\n","max":"Returns the maximum value of the Sequence.\n","removeAt(index)":"\tRemoves the item at index. Returns self.\n","-=(aSeq)":"\tVector subtraction - subtracts the values of aSeq to those of the receiver.\n\tOnly works on Sequences whose item type is numeric. Returns self.\n","splitNoEmpties(optionalArg1, optionalArg2, ...)":"\t\tReturns a list containing the non-empty sub-sequences of the receiver divided by the given arguments.\n\t\tIf no arguments are given the sequence is split on white space.\n\t\tExamples:\n\t\t<code>\n\t\t\"a   b  c d\" splitNoEmpties => list(\"a\", \"b\", \"c\", \"d\")\n\t\t\"a***b**c*d\" splitNoEmpties(\"*\") => list(\"a\", \"b\", \"c\", \"d\")\n\t\t\"a***b||c,d\" splitNoEmpties(\"*\", \"|\", \",\") => list(\"a\", \"b\", \"c\", \"d\")\n\t\t<\/code>\n","asRegex":"\t\tReturns a new Regex created from the receiver.\n","uppercase":"\tMakes all characters of the receiver uppercase.\n","escape":"\tEscape characters in the receiver are replaced with escape codes.\n\tFor example a string containing a single return character would contain the\n\tfollowing 2 characters after being escaped: \"\\n\". Returns self.\n","asIoPath":"Returns a Io style path for an OS style path.\n","alignLeftInPlace(width, [padding])":" Same as align left but operation is performed on the receiver.\n","occurancesOfSeq(aSeq)":"\tReturns count of aSeq in the receiver.\n","min":"Returns the minimum value of the Sequence.\n","asBase64(optionalCharactersPerLine)":"\tReturns an immutable, base64 encoded (according to RFC 1421) version of self. \n\toptionalCharactersPerLine describes the number of characters between line breaks and defaults to 0.\n","lastPathComponent":"\tReturns a string containing the receiver clipped up\n\tto the last path separator.\n","splitAtRegex(aRegexOrString)":"\t\tSplits the receiver into pieces using the given regex as the delimiter and\n\t\treturns the pieces as a list of strings.\n","itemCopy":"Returns a new sequence containing the items from the receiver.\n","floor":"Round each value to largest integral value not greater than x.\nReturns self.\n","makeFirstCharacterUppercase":"  Receiver must be mutable (see also asMutable). Returns receiver.\n  <br\/>\n  <pre>\n  Io> \"abc\" asMutable makeFirstCharacterUppercase\n  ==> Abc\n  <\/pre>\n","copy(aSequence)":"\tReplaces the bytes of the receiver with a copy of those in aSequence. Returns self.\n","isSymbol":"\tReturns true if the receiver is a\n\timmutable Sequence (aka, a Symbol) or false otherwise.\n","removeSuffix(aSequence)":"\tIf the receiver end with aSequence, it is removed. Returns self.\n","bitCount":"Returns the number of bits in the sequence.\n"}},"Scheduler":{"module":"Core","description":"Io's coroutine scheduler.\n","category":"Core\n","slots":{"setYieldingCoros(aListOfCoros)":" Sets the list of yielding Coroutine objects.\n","setTimers(aListOfTimers)":" Sets the list of active timers.\n","yieldingCoros":"The List of yielding Coroutine objects.\n","currentCoroutine":"Returns the currently running coroutine.\n","timers":"The List of active timers.\n"}},"Profiler":{"module":"Core","description":"","category":"Core\n","slots":{}},"DynLib":{"description":"A DLL Loader by Kentaro A. Kurahone.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"open":"\tOpens the dynamic library and returns self or raises a DynLoad.open Error if there is an error.\n","initFuncName":"\tReturns the initialization function name.\n","isOpen":"\tReturns true if the library is open, or false otherwise.\n","path":"\tReturns the path to the dynamic library.\n","voidCall(functionName, <arg1>, <arg2>, ...)":"\tSame as call but for functions with no return value. Returns nil.\n","setFreeFuncName(aString)":"\tSets the io_free function name. Returns self.\n","freeFuncName":"\tReturns the io_free function name.\n","call(functionName, <arg1>, <arg2>, ...)":"\tCall's the dll function of the specified name with the arguments provided. \n\tReturns the a Number with the result value.\n","callPluginInit(functionName)":"\tCall's the dll function of the specified name. \n\tReturns the result as a Number or raises an exception on error.\n","setPath(aString)":"\tSets the path to the dynamic library. Returns self.\n","setInitFuncName(aString)":"\tSets the initialization function name for the dynamic library. Returns self.\n","close":"\tCloses the library. Returns self.\n"}},"System":{"description":"Contains methods related to the IoVM.\n","copyright":"Steve Dekorte, 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"ioPath":"Returns the path of io installation. The default is $INSTALL_PREFIX\/lib\/io.\n","setMaxRecycledObjects(aNumber)":"\tSets the max number of recycled objects used.\n","symbols":"\tReturns a List containing all Symbols currently in the system.\n","recycledObjectCount":"\tReturns the current number of objects being held for recycling.\n","maxRecycledObjects":"\tReturns the max number of recycled objects used.\n","launchPath":"Returns a pathComponent of the launch file.\n","runCommand":"Calls system and redirects stdout\/err to tmp files.  Returns object with exitStatus, stdout and stderr slots.\n","platform":"\tReturns a string description of the platform.\n","exit(optionalReturnCodeNumber)":"\tShutdown the IoState (io_free all objects) and return\ncontrol to the calling program (if any).\n","userInterruptHandler":"Called when control-c is hit. Override to add custom behavior. Returns self.\n","version":"\tReturns a version number for Io.\n","getEnvironmentVariable(nameString)":"\tReturns a string with the value of the environment \n\tvariable whose name is specified by nameString.\n","sleep(secondsNumber)":"\tPerforms a *blocking* sleep call for specified number of seconds.\n","getOptions(args)":"\tThis primitive is used to get command line options similar to Cs getopt().\n\tIt returns a map in containing the left side of the argument, with the\n\tvalue of the right side. (The key will not contain\n\tthe beginning dashes (--).\n\t<p>\n\tExample:\n\t<pre>\n\toptions := System getOptions(args)\n\toptions foreach(k, v,\n\t  if(v type == List type,\n\t\tv foreach(i, j, writeln(\\\"Got unnamed argument with value: \\\" .. j))\n\t\tcontinue\n\t  )\n\t  writeln(\\\"Got option: \\\" .. k .. \\\" with value: \\\" .. v)\n\t)\n\t<\/pre>\n","installPrefix":"\tReturns the root path where io was install. The default is \/usr\/local.\n","setEnvironmentVariable(keyString, valueString)":"\tSets the environment variable keyString to the value valueString.\n","daemon(dontChroot, dontRedirectOutputStreams)":"\tBecome a daemon process.  If dontChroot is false, the process will change its directory to \/.  If dontRedirectOutputStreams is false, stdout and stderr are redirected to \/dev\/null.\n","setLobby(anObject)":"\tSets the root object of the garbage collector.\n","distribution":"\tReturns the Io distribution name as a string.\n","thisProcessPid()":"\tReturn the process id (pid) for this Io process.\n","args":"\tReturns the list of command line argument strings the program was run with.\")\n","launchScript":"Returns the path of the io file run on the command line. Returns nil if no file was run.\n","system(aString)":"\tMakes a system call and returns a Number for the return value.\n","errorNumber":"\tReturns the C errno string.\n","platformVersion":"\tReturns the version id of the OS.\n","activeCpus":"\tReturns the number of active CPUs.\n"}},"Coroutine":{"description":"Coroutine is an primitive for Io's lightweight cooperative C-stack based threads.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"runTarget":"The object which the coroutine will send a message to when it starts.\n","runMessage":"The message to send to the runTarget when the coroutine starts.\n","yieldingCoros":"Reference to Scheduler yieldingCoros.\n","parentCoroutine":"Returns the parent coroutine this one was chained from or nil if it wasn't chained. When a Coroutine ends, it will attempt to resume it's parent.\n","setInException(aBool)":" Set the inException status. Returns self.\n","setMessageDebugging(aBoolean)":"\tTurns on message level debugging for this coro. When on, this\n\tcoro will send a vmWillSendMessage message to the Debugger object before\n\teach message send and pause itself. See the Debugger object documentation\n\tfor more information.\n","setException":"","resume":"\tYields to the receiver. Runs the receiver if it is not running yet. \n\tReturns self.\n","stackSize":"Stack size allocated for each new coroutine. Coroutines will automatically chain themselves as need if more stack space is required.\n","freeStack":"\tFrees all the internal data from the receiver's stack. Returns self.\n","resumeParentCoroutine":"Pauses current coroutine and resumes parent.\n","runLocals":"The locals object in whose context the coroutine will send it's run message.\n","setLabel(aLabel)":" Sets the comment label for the Coro. Return self.\n","showStack":"Writes backTraceString to STDOUT.\n","exception":"Returns the current exception or nil if there is none.\n","main":"[Seems to be obsolete!] Executes runMessage, resumes parent coroutine.\n","typeId":"Returns <type>_<uniqueHexId> string.\n","setRunMessage":"","ignoredCoroutineMethodNames":"List of methods to ignore when building a <tt>callStack<\/tt>.\n","resumeLater":"\t\tPromotes receiver to the top of the yieldingCoros queue, but not yielding to it.\n\t\tWhen current coroutine yields, receiver will resume.\n","setRunLocals":"","showYielding":"Prints a list of yielding coroutines to STDOUT.\n","implementation":"\tReturns coroutine implementation type: \"fibers\", \"ucontext\" or \"setjmp\"\n","backTraceString":"Returns a formatted callStack output along with exception info (if any). In case of CGI script, wraps output with &lt;code&gt; tag.\n","isCurrent":"\tReturns true if the receiver is currently running coroutine.\n","setStackSize(aNumber)":" Sets the stack size in bytes to allocate for new Coros. Returns self.\n","ioStack":"\tReturns List of values on this coroutine's stack.\n","setParentCoroutine(aCoro)":" Sets the parent coroutine. Returns self.\n","setRunTarget(anObject)":"","label":"A label slot useful for debugging purposes.\n","result":"The result set when the coroutine ends.\n","pause":"\t\tRemoves current coroutine from the yieldingCoros queue and\n\t\tyields to another coro. <tt>System exit<\/tt> is executed if no coros left.\n\t\t<br\/>\n\t\tYou can resume a coroutine using either <tt>resume<\/tt> or <tt>resumeLater<\/tt> message.\n","isYielding":"Returns true if the receiver is yielding (not paused or running).\n","run":"\tRuns receiver and returns self.\n","setResult":"","debugWriteln":"See <tt>Object debugWriteln<\/tt>.\n","inException":"Set to true when processing an exception in the coroutine.\n","callStack":"Returns a list of Call objects.\n","yield":"\t\tYields to another coroutine in the yieldingCoros queue.\n\t\tDoes nothing if yieldingCoros is empty.\n","pauseCurrentAndResumeSelf":"Pauses current coroutine and yields to a receiver.\n","raiseException":"Sets exception in the receiver and resumes parent coroutine.\n","yieldCurrentAndResumeSelf":"Yields to a receiver.\n","currentCoroutine":"\tReturns currently running coroutine in Io state.\n"}},"Block":{"description":"Blocks are anonymous functions (messages with their own locals object). \nThey are typically used to represent object methods.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Core","category":"Core\n","slots":{"code":"\tReturns a string containing the decompiled code of the receiver.\n","print":"\tprints an Io source code representation of the block\/method\n","performOn(anObject, optionalLocals, optionalMessage, optionalSlotContext)":"\tActivates the receiver in the target context of anObject.\n\tReturns the result.\n","setProfilerOn(aBool)":"\tIf aBool is true, the global block profiler is enabled, if false it is disabled. Returns self.\n","message":"\tReturns the root message of the receiver.\n","setMessage(aMessage)":"\tSets the root message of the receiver to aMessage.\n","Formatter":"Helper object for the <tt>asString<\/tt> method.\n","println":"Same as <tt>print<\/tt>.\n","asString":"Returns a full description of the receiver with decompiled code.\n","scope":"\tReturns the scope used when the block is activated or\n\tNil if the target of the message is the scope.\n","setScope(anObjectOrNil)":"\tIf argument is an object, when the block is activated,\n\tit will set the proto and self slots of it's locals to the specified\n\tobject. If Nil, it will set them to the target of the message.\n","setCode(aString)":"\tSet's the reciever's message to a compiled version of aString. Returns self\n","passStops":"\tReturns whether or not the receiver passes return\/continue\/break to caller.\n","asSimpleString":"Returns a short description of the receiver.\n","justSerialized(stream)":" Writes the receiver's code into the stream.\n","argumentNames":"\tReturns a List of strings containing the argument names of the receiver.\n","call(arg0, arg1, ...)":"\tActivates the receiver with the provided arguments.\n","setPassStops(aBool)":"\tSets whether the receiver passes return\/continue\/break to caller.\n","setArgumentNames(aListOfStrings)":"\tSets the receiver's argument names to those specified in\n\taListOfStrings. Returns self.\n","profilerTime":"\tReturns clock() time spent in compiler in seconds.\n"}}},"NotificationCenter":{"Notification":{"module":"NotificationCenter","category":"Core\n","slots":{"setName(anObject)":" Sets the name of the Notification. Returns self.\n","name":"Returns the name of the notification.\n","post":"Posts the notification to the NotificationCenter.\n","sender":"Returns the sender of the notification.\n","setSender(anObject)":" Sets the sender of the Notification. Returns self.\n"}},"NotificationCenter":{"module":"NotificationCenter","description":"\nAn NotificationCenter similar to the one found in Apple's FoundationKit.\n<p>\nExample use:\n<pre>\n\/\/ in listener\nlistener := NotificationListener clone setTarget(self) setName(\"FeedDownloadedFile\") start\n\n\/\/ in sender\nNotification clone setSender(self) setName(\"FeedDownloadedFile\") post\n\n\/\/ note: notifications can also be reused, and any extra data can be added in it's slots\n\n\/\/ to stop listening\nlistener stop\n<\/pre>\n","category":"Core\n","slots":{"postNotification(aNotification)":"Sends aNotification to be handled by listeners. Returns self.  \nImplementation:\n<pre>\nlisteners foreach(handleNotification(n))\n<\/pre>\n","listeners":"Returns list of NotificationListeners.\n","addListener(aNotificationListener)":" Removes aNotificationListener from listeners list. Returns self.\n"}},"NotificationListener":{"module":"NotificationCenter","category":"Core\n","slots":{"action":"Returns the name of the message that is sent to the target when a matching notification is found.\n","target":"Returns the target that the receiver sends matching messages to.\n","sender":"Returns the sender that the listener wants to receive messages from.\n","handleNotification(aNotification)":"Checks to see if aNotification matches the listener criteria and if so, sends it to the target. Implementation:\n<pre>\nif((name == nil or name == n name) and(object == nil or sender == n sender),\n\ttarget perform(action, n)\n)\n<\/pre>\n","setName(aSeq)":" Sets the message name that the listener wants to receive messages for. Returns self.\n","start":"Removes the receiver to the NotificationCenter set of listeners. Returns self.\n","setAction(messageName)":" Sets the name of the message that is sent to the target when a matching notification is found. Returns self.\n","name":"Returns the message name that the listener wants to receive messages for.\n","setTarget(anObject)":" Sets the target that the receiver sends matching messages to. Returns self.\n","setSender(anObject)":" Sets the sender that the listener wants to receive messages from. Returns self.\n"}}},"Flux":{"Message":{"description":"A Message object encapsulates the action of a message send. \nBlocks are composed of a Message and its children.\n<p>\nTerminology\n<pre>\nExample:\n  Io> msg := message(A B(C D); E F)\n  ==> A B(C D); E F\n  \nIn the above example:\n  msg name            =>  A\n  msg next            =>  B(C D); E F\n  msg next arguments  =>  list(C D)\n  msg next next name  =>  ;\n  msg next next next  =>  E F\n<\/pre>\nImportant: Modifying the message tree of a block currently in use may cause\na crash if a garbage collection cycle occurs. If the implementation were\nchanged to retain every called message, this could be avoided.\nBut the cost to performance seems to outweigh the need to cover this case for now.\n","copyright":"\tSteve Dekorte; Jonathan Wright, 2002, 2006\n","license":"\tBSD revised\n","module":"Core","category":"Core\n","slots":{"code":"\tReturns a String containing a decompiled code representation of the receiver.\n","argsEvaluatedIn(anObject)":"\tReturns a List containing the argument messages evaluated in the\n\tcontext of anObject.\n","last":"\tReturns the last message in the chain.\n","argCount":"Returns the number of arguments this message has. A faster way to do, msg arguments size. Examples,\n<pre>\t\nIo> message(a(1,2,3)) argCount\n==> 3\n\nIo> message(a) argCount\n==> 0\n<\/pre>\n","clone":"\tReturns a Message that is a deep copy of the receiver.\n","nextIgnoreEndOfLines":"\tReturns the next message in the message chain which is not an \n\tEndOfLine or nil if there is no next message.\n","setNext(aMessageOrNil)":"\tSets the next message in the message chain to a deep copy of\n\taMessage or it removes the next message if aMessage is nil.\n","asString":"\tSame as code().\n","evaluatedArgs":"\tReturns a List containing the argument messages evaluated in the context.\n","argAt(indexNumber)":"\tReturns Message object for the specified argument or Nil if none exists.\n","setCachedResult(anObject)":"\tSets the cached result of the message. Returns self.\n","fromString(aString)":"\tReturns a new Message object for the compiled(but not executed)\n\tresult of aString.\n","setCachedArgs(listOfValues)":" Appends evaluated arguments to a message. Returns self.\n","codeOfLength(n)":"\t\tSame as <tt>Message code<\/tt>, but returns first <tt>n<\/tt> characters only.\n","hasCachedResult":"\tReturns true if there is a cached result. Nil is a valid cached result.\n","isEndOfLine":"\tReturns true if the message marks the end of the line. A ';' message.\n","name":"\tReturns the name of the receiver.\n","description":"Returns a string containing a short description of the method.\n","next":"\tReturns the next message in the message chain or nil if there is no next message.\n","previous":"\tReturns the previous message in the message chain or Nil if there is no previous message.\n","lineNumber":"\tReturns the line number of the message. The charcter number\n\tis typically the line number in the source text from with the message was read.\n","setName(aString)":"\tSets the name of the receiver. Returns self.\n","cachedResult":"\tReturns the cached result of the Message or Nil if there is none.\n","asMessageWithEvaluatedArgs(optionalContext)":"\tReturns a copy of receiver with arguments evaluated in the context of sender if\n\toptionalContext is nil.\n","setCharacterNumber(aNumber)":"\tSets the character number of the message. Returns self.\n","label":"\tReturns the message label. The label is typically set the the\n\tname of the file from which the source code for the message was read.\n","asSimpleString":"Returns one-line string representation up to 40 characters long.\n","characterNumber":"\tReturns the message character number. The charcter number is typically\n\tthe beggining character index in the source text from with the message was read.\n","fluxSource":" The directory of Flux where Flux.io is located. This directory is added to the Importer searchPaths.\n","setLabel(aString)":"\tSets the label of the message and its children. Returns self.\n","removeCachedResult":"\tRemoves the cached result of the Message.\n","appendArg(aMessage)":"Adds aMessage to the argument list of receiver. Examples,\n<pre>\t\nIo> message(a) appendArg(message(b))\n==> a(b)\n\nIo> message(a(1,2)) appendArg(message(3))\n==> a(1, 2, 3)\n<\/pre>\n","arguments":"\tReturns a list of the message objects that act as the\n\treceiver's arguments. Modifying this list will not alter the actual\n\tlist of arguments. Use the arguments_() method to do that.\n","union(other) Creates a union of the receiver and the other parameter.":"\tReturns a new message object with the receivers message as the first argument of the returned message, \n\tand the other parameter's arguments as each successive argument to the new message.\n\t<br\/>\n\t<pre>\n  Io> message(a) union(message(b))\n  ==> [unnamed](a, b)\n  <\/pre>\n","appendCachedArg(aValue)":"\tAdds aValue to the argument list of receiver as a cachedResult.\n","setArguments(aListOfMessages)":"\tSets the arguments of the receiver to deep copies of\n\tthose contained in aListOfMessages.  Returns self.\n","lastBeforeEndOfLine":"\tReturns the last message in the chain before the EndOfLine or nil.\n","doInContext(anObject, locals)":"\tEvaluates the receiver in the context of anObject. Optional <tt>locals<\/tt> \n\tobject is used as message sender. <tt>anObject<\/tt> is used as sender otherwise.\n","setPrevious(aMessageOrNil)":"\tSets the previous message in the message chain to a deep copy of\n\taMessage or it removes the previous message if aMessage is Nil.\n","setLineNumber(aNumber)":"\tSets the line number of the message. Returns self.\n","asStackEntry":"Returns a string containing message name, file and line.\n","fluxPath":" The directory where the .io files for the Flux views are located. This directory is added to the Importer searchPaths.\n"}}}},"Networking":{"CGI":{"CGI":{"Steve":"Dekorte, 2004\n","license":"BSD revised\n","module":"CGI","description":"CGI supports accessing CGI parameters passed in environment variable or standard input by a web servers like Apache.Example use:\n<pre>\n#!.\/ioServer\n\ncgi = CGI clone\n\nredirect = cgi getParameters at(\"redirurl\")\nif (redirect and redirect != \"\",\n\tredirect clipAfterStartOfSeq(\"\\r\")\n\tredirect clipAfterStartOfSeq(\"\\n\")\n\tcgi redirect(redirect)\n\tSystem exit(0)\n )\n\ncgi header(\"Content-type\", \"text\/html\")\n\ncgi write(\"&lt;html&gt;&lt;head&gt;&lt;title&gt;test&lt;\/title&gt;&lt;body&gt;\")\ncgi write(\"GET Parameters:\")\ncgi getParameters foreach(k, v,\n\tcgi write(k .. \" = \" .. v .. \",\"))\n)\n\ncgi write(\"POST Parameters:\")\ncgi postParameters foreach(k, v,\n\tcgi write(k .. \" = \" .. v .. \",\"))\n)\n\ncgi write(\"COOKIES:\")\ncgi cookies foreach(k, v,\n\tcgi write(k .. \" = \" .. v .. \",\")\n)\n<\/pre>\n","category":"Networking\n","slots":{"status(statusCode)":"\tNumeric status code to send to the client.  \n\tNormally, the server will figure this out on its own, but this allows handling 404s and such.\n","postData":"The raw post data sent to the script.  Only set if getEnvironmentVariable(\"REQUEST_METHOD\") asLowercase == \"post\".\n","requestMethod":"GET, POST, PUT, etc\n","header(name, value, sendMultiple)":"\tAdd a header to the output, may only be called before write() is called.  \n\tOne of each header will be send unless sendMultiple is true\n","httpHeader(name)":" Fetch a header supplied by the client, such as 'referer'\n","pathInfo":"PATH_INFO from web server\n","setCookie(name, value, expiresDate, domain, path, secureBool)":"\tSets a cookie, keep in mind this will not be available in cookies() until they next visit the site.  \n\tParameters other than name and value are optional.\n","encodeUrlParam(aString)":" Returns a URL encoded version of aString.\n","remoteHost":"REMOTE_HOST from web server - User's host (often blank)\n","isInWebScript":"Checks to see if this is being called within a CGI request or from the command-line (testing).  Simply checks for System getEnvironmentVariable(\"GATEWAY_INTERFACE\")\n","remoteAddress":"REMOTE_ADDR from web server - User's IP\n","getParameters":"Parses the QUERY_STRING environment variable and returns a Map containing key\/value query value pairs.  For testing, a QUERY_STRING can be passed to standard in, one line will be read\n","contentType":"CONTENT_TYPE from web server\n","contentLength":"CONTENT_LENGTH from web server - Size of POST Data\n","redirect(url)":" Send a location: and redirect the user.  May only be called before write() is called.  It is left to the caller to stop any further processing.\")\n","scriptName":"SCRIPT_NAME from web server\n","decodeUrlParam(aString)":" Returns a URL decoded version of aString.\n","write(string, [string...])":" Send content for the body of the response\n","postParameters":"Parses the POST data, multipart and urlencoded.  Returns a map of submitted variables.\nFor uploaded files, an Object is returned with these slots:\n<pre>\nfileName\ncontent (raw content of file as Sequence)\ncontentType\ncontentEncoding\nsize (in characters\/bytes)\nasString (pretty string of name, type, size)\n<\/pre>\n","pathTranslated":"PATH_TRANSLATED from web server\n","queryString":"QUERY_STRING from web server\n","maxPostSize":"Maximum size in bytes, to process from user submitted data.  Data greater than this will result in a nil postData slot\n","cookies":"Returns a Map of cookies provided by the client\n","maxPostSizeExceeded":"Returns true if the POST data exceeds a set maxPostSize\n","requestParameter(name)":" Lazy developer's helper funtion. Retrieves a value from GET or POST, POST first\n"}}},"Volcano":{"VolcanoServer":{"module":"Volcano","description":"A simplified version of HttpServer\n","copyright":"Rich Collins 2009\n","license":"BSD revised\n","category":"Networking\n","slots":{}}},"Loudmouth":{"LoudmouthMessage":{"module":"Loudmouth","description":"<p>LoudmouthMessage provides SGML interface and convience methods for manipulation of XMPP messages.<\/p>\n","category":"Networking\n","slots":{"setTo(jid)":" Sets message receiver to defined JID. JID can be both an <code>Sequence<\/code> or <code>JID<\/code> instance. Returns <code>self<\/code>.\n","with(source)":" Creates new LoudmouthMessage based on <code>source<\/code>, which should be valid XML (<code>Sequence<\/code>).\n","to":"Returns JID of receiver.\n"}},"JID":{"module":"Loudmouth","description":"Object for representing JIDs.\n","category":"Networking\n","slots":{"host":"Extracts host's address from JID.\n","with(jid)":"  Extracts all parts of a provided <code>Sequence<\/code> and returns new <code>JID<\/code> clone.\n  <pre><code>\n  j := JID with(\"cow@moo.com\/Alpes\")\n  j username == \"cow\"\n  j host == \"moo.com\"\n  j resource == \"Alpes\"\n  j asString == \"cow@moo.com\/Alpes\"<\/code><\/pre>\n","resource":"Returns defined resource.\n","asString":"Converts JID to string with all available parts included.\n","username":"Extracts username from JID.\n"}},"XmppChatMessage":{"module":"Loudmouth","category":"Networking\n","slots":{"create":"Creates a new <code>LoudmouthMessage<\/code> with chat <code>type<\/code> and random id value.\n"}},"Loudmouth":{"module":"Loudmouth","category":"Networking\n","slots":{"from":"Returns sender's JID.\n","sendRaw(body)":" Sends raw text over XMPP stream. Returns <code>true<\/code> if no errors occur.\n","handleDisconnect":"Slot called upon closing the connection with the server.\n","status":"Returns status connection. Possible return values are:\n<ul>\n  <li><code>Loudmouth types CLOSED<\/code><\/li>\n  <li><code>Loudmouth types OPENING<\/code><\/li>\n  <li><code>Loudmouth types OPEN<\/code><\/li>\n  <li><code>Loudmouth types AUTHENTICATING<\/code><\/li>\n  <li><code>Loudmouth types AUTHENTICATED<\/code><\/li>\n<\/ul>\n","isConnected":"","setFrom(jid)":" Sets sender's JID. Returns <code>self<\/code>.\n","handleMessage(xmppMessage)":" Slot called when an message arrives via XMPP stream. <code>xmppMessage<\/code> is a <code>LoudmouthMessage<\/code> object.\n","connect":"Connects to the server. Returns <code>self<\/code>.\n","xmppType":"Returns value of <code>type<\/code> attribute of message node.\n","handleConnectFailure":"Slot called when server is not reachable.\n","body":"Returns value message's body node. If both XHTML and plain versions are available, XHTML version will be returned.\n","stopMainLoop":"","disconnect":"Disconnects from server and returns <code>true<\/code> if it succeeds.\n","sendVia(loudmouthConnection)":" Converts message to sequence and sends it via provided Loudmouth connection (<code>Loudmouth<\/code> object). It updates <code>from<\/code> property and returns <code>true<\/code> if message is sent.\n","send(toJid, message)":" Sends an message (<code>Sequence<\/code>) to provided JID (<code>Sequence<\/code>). Returns <code>true<\/code> or <code>false<\/code>.\n","handleConnect":"Slot called once connection is established.\n","setStatusMessage(statusMessage)":" Sets status message.\n","asString":"Converts XML to Sequence.\n","setPresence(presence[, statusMessage])":" Sets aviability\/presence and status message.\n","startMainLoop":"Starts GMainLoop. Should be called after connection is established with the server.\n","plainBody":"Returns value of message's body node with XHTML markup.\n","types":"  <p>Object containing status codes and message types.<\/p>\n  <pre><code>\n  Loudmouth with(\"username@server.com\", \"password\") do(\n    handleConnect = method(\n      self setPresence(Loudmouth types AVAILABLE), \"Drinking lemonade...\")\n  )\n  <\/code><\/pre>\n","isSslSupported":"","setXmppType(type)":" Sets value of <code>type<\/code> attribute.\n","registerAccount(server, username, password)":" Registers a new account at XMPP server. Returns <code>true<\/code> or <code>false<\/code>.\n","handleAuthenticationFailure":"Slot called if username\/password combinaton is wrong.\n","handleSslFailure":"Slot called if SSL-related problems arrive. Method should return <code>true<\/code> if it wishes make a connection without SSL, <code>false<\/code> otherwise.\n","with(jid, password)":" Creates new Lodumouth clone with server details provided in <code>jid<\/code>.\n"}}},"Socket":{"Server":{"module":"Socket","description":"The Server object provides a simple interface for running a server. \nYou just need to set the port and define a handleSocket method. Here's an example of an echo server:\n\n<pre>\nEcho := Object clone\nEcho handleSocketFromServer := method(aSocket, aServer,\n  write(\"[Got echo connection from \", aSocket host, \"]\\n\")\n  while(aSocket isOpen,\n   if(aSocket read, aSocket write(aSocket readBuffer asString))\n   aSocket readBuffer empty\n  )\n  write(\"[Closed \", aSocket host, \"]\\n\")\n)\n\nwrite(\"[Starting echo server on port 8456]\\n\")\nserver := Server clone setPort(8456)\nserver handleSocket := method(aSocket,\n  Echo clone @handleSocketFromServer(aSocket, self)\n)\nserver start\n<\/pre>\n\n<b>Notes<\/b><p>\n\nIo's use of lightweight threading and select for dealing with sockets makes for \nservers that are much more efficient(both memory and cpu wise) than those written \nwith kernel threads and socket polling.\n","category":"Networking\n","slots":{"handleSocket(aSocket)":"\tThis method is called when the server accepts a new socket. The new sockets is passed as the argument.\n\tOverride this method in your own server subclass. The default implementation raises an exception.\n","setHost(hostName)":" Sets the hostName. Returns self.\n","setPort(aNumber)":" Sets the port on which the server will listen  for connections. Returns self.\n","port":"Returns the port on which the server will listen for connections.\n","stop":"Stops the server if it is running. Returns self.\n","start":"\tStarts the server. This method will not return until server is stopped, \n\tso you may want to send the start message as an asynchronous message. \n\tReturns self or an Error, if one occurs.\n"}},"Socket":{"description":"Interface to network communication.\nSockets will auto yield to other coroutines while waiting on a request.\nAll blocking operations use the timeout settings of the socket.\nReads are appended to the socket's read buffer which can \nbe accessed using the readBuffer method.\n\nExample:\n\n<pre>\t\nsocket := Socket clone setHost(\"www.yahoo.com\") setPort(80) connect\nif(socket error) then( write(socket error, \"\\n\"); exit)\n\nsocket write(\"GET \/\\n\\n\")\n\nwhile(socket read, Nop)\nif(socket error) then(write(socket error, \"\\n\"); exit)\n\nwrite(\"read \", socket readBuffer length, \" bytes\\n\")\n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"Socket","category":"Networking\n","slots":{"connectTimeout":"Returns the length of time in seconds for connect timeouts on the socket.\n","acceptTimeout":"Returns the length of time in seconds for accept timeouts on the socket.\n","streamRead(numberOfBytes)":"\tReads numberOfBytes from the socket into the socket's readBuffer. \n\tReturns self when all bytes are read or an Error object on error.\n","setSocketReadBufferSize(numberOfBytes)":" Sets the read buffer size for the socket. Returns self on success or nil on error.\n","connect":"Connects to the socket's host. Returns self on success or an Error object on error.\n","streamWrite(buffer, optionalProgressBlock)":"\tWrite's buffer to the socket. \n\tIf optionalProgressBlock is supplied, it is periodically called with the number of bytes written as an argument.\n\tReturns self on success or an Error object on error.\n","readUntilSeq(aSequence)":"\tReads the socket until it's readBuffer contains aSequence, then returns a Sequence\n\tcontaining the readBuffer's contents up to (but not including) aSequence and clips that section from the readBuffer.\n","streamReadWhileOpen":"\tReads the stream into the socket's readBuffer until it closes.\n\tReturns self on success or an Error object on error.\n","asyncListen":"Listens to the socket and returns self immediately or an Error object on error.\n","port":"Returns the port number for the socket.\n","serverWaitForConnection":"\tWaits for a connection or timeout. When a connection is received, this method returns the connection socket. \n\tAn Error object is returned on timeour or error.\n","asyncBind":"Binds the socket and returns self immediately or an Error object on error.\n","setNoDelay":"\tSets the socket to be no-delay. Returns self on success or nil on error.\n","readTimeout":"Returns the length of time in seconds for read timeouts on the socket.\n","errorDescription":"Returns a description of the last error on the socket as a string.\n","bytesPerWrite":"Returns number of bytes to write per write call.\n","udpReadNextChunk(ipAddress)":"\tWaits to receive UDP data from the specified ipAddress. \n\tAs soon as any data is available, it reads all of it into the socket's readBuffer.\n\tReturns self on success or an Error object on error.\n","setSocketWriteLowWaterMark(numberOfBytes)":"\tSets the write low water mark for the socket. Returns self on success or nil on error.\n","asyncStreamWrite(aSeq, start, writeSize)":"\tWrites the slice of aSeq from start to start + writeSize to the socket.\n\tReturns self immediately if successful, otherwise closes the socket. \n\tReturns an error object on Error. \n\tReturns nil if the socket is disconnected.\n","setSocketWriteBufferSize(numberOfBytes)":" Sets the write buffer size for the socket. Returns self on success or nil on error.\n","setBytesPerRead(numberOfBytes)":" Sets number of bytes to read per read call. Returns self.\n","readMessage":"\tEmpties the readBuffer and reads a 4 byte uint32 in network byte order. \n\tThis number is the number of bytes in the message payload which are \n\tthen read into the socket's readBuffer. The readBuffer is returned.\n","udpWrite":"Same as asyncUdpWrite.\n","asyncUdpOpen":"Submits an async request to open the socket in UDP mode and returns self immediately or an Error object on error.\n","setIpAddress(ipAddressObject)":" Sets the ipAddress for the socket. Returns self. The setHost() method should generally be used to set the host instead of this method.\n","asyncConnect(ipAddressObject)":" Connects ti the given IPAddress and returns self or an Error object on error.\n","serverOpen":"\tOpens the socket as a stream, binds it to it's ipAddress and calls asyncListen to prepare the socket to accept connections.\n\tReturns self on success or an Error object on error.\n","descriptorId":"Returns the socket's file descriptor id as a Number.\n","setReadTimeout(seconds)":" Sets the length of time in seconds for read timeouts on the socket. Returns self.\n","setAcceptTimeout(seconds)":" Sets the length of time in seconds for accept timeouts on the socket. Returns self.\n","readBytes(numBytes)":"\tReads the socket until its readBuffer is numBytes long, then returns a Sequence\n\tcontaining the first numBytes of readBuffer's contents and clips that section from the readBuffer.\n","udpOpen":"Opens the socket in UDP (connectionless) mode. Returns self.\n","setConnectTimeout(seconds)":" Sets the length of time in seconds for connect timeouts on the socket. Returns self.\n","setBytesPerWrite(numberOfBytes)":" Sets number of bytes to write per write call. Returns self.\n","writeListMessage(aList)":" A shortcut for writeMessage(aList asEncodedList).\n","host":"Returns the host for the socket.\n","writeMessage(aSeq)":"\tWrites a 4 byte uint32 in network byte order containing the size of aSeq. \n\tThen writes the bytes in aSeq and returns self.\n","ipAddress":"Returns the IpAddress object for the socket.\n","asyncUdpRead(ipAddress, aSeq, readSize)":"\tReads up to readSize number of bytes from ipAddress into aSeq if data is available. \n\tReturns self immediately if successful. Returns an error object on Error. Returns nil if the socket is disconnected.\n","getSocketWriteLowWaterMark":"\tReturns the write low water mark for the socket on success or nil on error.\n","appendToWriteBuffer(aSequence)":"\tAppends aSequence to the write buffer if it is non-nil. Returns self.\n","readListMessage":"A shortcut for List fromEncodedList(socket readMessage).\n","asyncStreamRead(aSeq, readSize)":"\tReads up to readSize number of bytes into aSeq if data is available. \n\tReturns self immediately if successful. Returns an error object on Error. Returns nil if the socket is disconnected.\n","close":"Closes the socket and returns self. Returns nil on error.\n","bytesPerRead":"Returns number of bytes to read per read call.\n","setPort(portNumber)":" Sets the port number for the socket, returns self.\n","writeTimeout":"Returns the length of time in seconds for write timeouts on the socket.\n","setWriteTimeout(seconds)":" Sets the length of time in seconds for write timeouts on the socket. Returns self.\n","getSocketReadLowWaterMark":"\tReturns the read low water mark for the socket on success or nil on error.\n","isOpen":"Returns true if the socket is open, false otherwise.\n","writeFromBuffer(optionalProgressBlock)":"\tWrite's the contents of the socket's writeBuffer to the socket. \n\tIf optionalProgressBlock is supplied, it is periodically called with the number of bytes written as an argument.\n\tReturns self on success or an Error object on error.\n","setHost(hostName)":"Translates hostName to an IP using asynchronous DNS and sets \nthe host attribute. Returns self.\n","isValid":"Returns true if the socket is in valid state, closes the socket and returns false otherwise.\n","asyncUdpWrite(ipAddress, aSeq, startIndex, readSize)":"\tWrites readsize bytes from aSeq starting at startIndex to ipAddress. \n\tReturns self immediately if successful. Returns an error object on Error. Returns nil if the socket is disconnected.\n","asyncAccept(ipAddressObject)":" Immediately returns a socket for an connection if one is available or nil otherwise. Returns an Error object on error.\n","setSocketReadLowWaterMark(numberOfBytes)":"\tSets the read low water mark for the socket. Returns self on success or nil on error.\n","streamReadNextChunk(optionalProgressBlock)":"\tWaits for incoming data on the socket and when found, reads any available data and returns self. \n\tReturns self on success or an Error object on error or timeout.\n","udpRead(ipAddress, numBytes)":"\tWaits for and reads numBytes of udp data from the specified ipAddress into the socket's readBuffer.\n\tReturns self on success or an Error object on error.\n","streamOpen":"Opens the socket in stream mode. Returns self.\n","setHost(hostNameOrIpString)":" Set the host for the socket. Returns self on success, an Error object otherwise.\n","asyncStreamOpen":"Submits an async request to open the socket in stream mode and returns self immediately or an Error object on error.\n","isStream":"Returns true if the socket is a stream, false otherwise.\n","errorNumber":"Returns the socket error number for the last error.\n"}},"IPAddress":{"module":"Socket","description":"Object representation of an Internet Protocol Address.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","category":"Networking\n","slots":{"setHostName(hostName)":"\tTranslates hostName to an IP using asynchronous DNS and \n\tsets the host attribute. Returns self.\n"}},"TimerEvent":{"module":"Socket","description":"Object for timer events.\n","category":"Networking\n","slots":{}},"WriteEvent":{"module":"Socket","description":"Object for write events.\n","category":"Networking\n","slots":{}},"SignalEvent":{"module":"Socket","description":"Object for signal events.\n","category":"Networking\n","slots":{}},"DNSServer":{"module":"Socket","description":"An object representing a DNSServer which DNS requests can be sent to.\n","category":"Networking\n","slots":{"setHost(aSeq)":" Sets the host name for the DNSServer.\n","host":"The host name (usually an IP) for the DNSServer.\n","ipForHostName(hostName, timeout)":"\tSends a request to the DNS server, waits for a response and returns it. Will try 3 times if there are timeouts.\n\tReturns the IP (as a Sequence) if successful, raises an exception otherwise.\n"}},"URL":{"description The URL object is usefull for fetching web pages and parsing URLs. Example;":"<pre>\npage := URL clone setURL(\\\"http:\/\/www.google.com\/\\\") fetch\n<\/pre>\n","slots":{"test":"Private test method.\n","setResponseHeaderString(headerString)":" Private method that parses the responseHeaders.\n","unescapeString(aString)":"\tReturns a new String that is aString with the URL escape codes replaced by the appropriate characters.\n","setURL(urlString)":"\tSets the url string and parses into the protocol, host, port path, and query slots. Returns self.\n","requestHeader":"\tReturns a Sequence containing the request header that will be sent.\n","parse":"Private method to parse the url.\n","fetchHttp(optionalProgressBlock)":" Private method that fetches an http url.\n","fetch":"Fetches the url and returns the result as a Sequence. Returns an Error, if one occurs.\n","fetchToFile(aFile)":"\tFetch the url and save the result to the specified File object. \n\tSaving is done as the data is read, which help minimize memory usage. \n\tReturns self on success or nil on error.\n","post(parameters, headers)":"\tSends an http post message. If parameters is a Map, it's key\/value pairs are \n\tsend as the post parameters. If parameters is a Sequence or String, it is sent directly.\n\tAny headers in the headers map are sent with the request.\n\tReturns a sequence containing the response on success or an Error, if one occurs.\n","with(urlString)":" Returns a new URL instance for the url in the urlString.\n","fetchWithProgress(progressBlock)":"\tSame as fetch, but with each read, progressBlock is called with the readBuffer \n\tand the content size as parameters.\n","setRequest(requestString)":" Private method to set the url request.\n","referer":"Returns the referer String or nil if not set.\n","url":"Returns url string.\n","stopFetch":"\tStops the fetch, if there is one. Returns self.\n","openOnDesktop":"Opens the URL in the local default browser. Supports OSX, Windows and (perhaps) other Unixes.\n","fetchRaw":"Fetch and return the entire response. Note: This may have problems for some request times.\n","headerBreaks":"Private method to connect to the host and write the header.\n","escapeString(aString)":"\tReturns a new String that is aString with the appropriate characters replaced by their URL escape codes.\n","setReferer(aString)":" Sets the referer. Returns self.\n","processHttpResponse(optionalProgressBlock)":" Private method that processes http response.\n","clear":"Private method to clear the URL's parsed attributes.\n"},"module":"Socket","license":"BSD revised\n","category":"Networking\n","copyright":"Steve Dekorte, 2004\n"},"ReadEvent":{"module":"Socket","description":"Object for read events.\n","category":"Networking\n","slots":{}},"DNSQuery":{"module":"Socket","description":"An object representing an individual DNS query.\n","category":"Networking\n","slots":{"hostName":"The host name which the query will request an IP for.\n","resumeCoros":"Resumes all the paused coros. <font color=red>Should this use resumeLater instead?<\/font>\n","setHostName(aSeq)":" Sets the host name for the query.\n","addCoro(aCoro)":" Private method that adds a coro to coros.\n","coros":"\t\tList of coroutines paused waiting for this query.\n\t\tThese coros will be resumed when the query completes.\n","waitOn":"Pauses the calling coroutine until the query is completed.\n"}},"EvRequest":{"module":"Socket","description":"Networking Event.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","category":"Networking\n","slots":{}},"EventManager":{"description":"\tObject for libevent (kqueue\/epoll\/poll\/select) library. \n\tUsefull for getting notifications for descriptor (a socket or file) events.\n\tEvents include read (the descriptor has unread data or timeout) and write (the descriptor wrote some data or timeout).\n\tAlso, timer and signal events are supported.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Socket","category":"Networking\n","slots":{"addEvent(event, descriptor, eventType, timeout)":"","run":"Runs the EventManger loop. Does not return. Private - should only be called by resumeIfNeeded.\n"}},"Host":{"slots":{"address":"\tReturns the ip address. A DNS lookup is done in the background if the \n\taddress is not already known. Returns an error on lookup failure.\n","name":"Returns name.\n","setName(aString)":" Set's the host name. Return self.\n"},"module":"Socket","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","category":"Networking\n"},"Event":{"module":"Socket","description":"Networking Event.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","category":"Networking\n","slots":{"handleEvent(timeout)":"","waitOnOrExcept(timeout)":"","category":"Networking\n"}},"EvConnection":{"module":"Socket","description":"Networking Event.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","category":"Networking\n","slots":{}},"DNS":{"description":"Utility methods related to Domain Name Service lookups.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Socket","category":"Networking\n","slots":{"localNameServersIPs":"Returns a list of local name server IPs as a list of Sequences. Works on OSX, Unix, Windows.\n","dnsQueryPacketForHostName(hostNameSeq)":"Assembles a DNS query packet for the given host name and returns it in a Sequence.\n","hostNameAndIPforDNSResponsePacket(dnsResponsePacketSeq)":"Dissasembles the given dnsResponsePacketSeq and returns a list object containing\nthe hostName and IP or an error string on error.\n"}}},"GoogleSearch":{"GoogleSearch":{"module":"GoogleSearch","description":"Object for performing web searches via Google.\nExample:\n<pre>\nGoogleSearch clone setSearchTerm(\"iolanguage\") find links foreach(println)\nwhile(Coroutine yieldingCoros size > 1, yield)\n<\/pre>\n","category":"Networking\n","slots":{"find":"Runs the search.\n","setMaxPages(aNumber)":" Sets the max number of pages to fetch results from. Returns self.\n","links":"Returns the list of link results.\n","maxPages":"Returns the max number of pages to fetch results from.\n"}},"GooglePage":{"module":"GoogleSearch","description":"Object representing one page of search results.\n","category":"Networking\n","slots":{"pageNumber":"Returns the current page number of results.\n","setSearchTerm(aSeq)":" Sets the search term. Returns self.\n","links":"Returns the list of link results.\n","searchTerm":"Returns the search term.\n","find":"Runs the search.\n"}}},"Beanstalk":{"Beanstalk":{"module":"Beanstalk","Aleksey":"Yeschenko, 2009\n","credits":"Aleksey Yeschenko, 2009. Default arguments and some other things taken from beanstalk-client-ruby by Keith Rarick.\n","license":"BSD revised\n","description":"beanstalkd is a fast, distributed, in-memory workqueue service. See http:\/\/xph.us\/software\/beanstalkd\/\n<br \/>An example from http:\/\/xph.us\/software\/beanstalkd\/:\n<br \/>First, have one process put a job into the queue:\n<pre>\nproducer := Beanstalk clone connect(\"127.0.0.1:11300\")\nproducer put(\"hello\")\n<\/pre>\n\nThen start another process to take jobs out of the queue and run them:\n<pre>\nworker := Beanstalk clone connect(\"127.0.0.1:11300\")\nloop(\n\tjob := worker reserve\n\tjob body println # prints \"hello\"\n\tjob delete\n)\n<\/pre>\nSee Beanstalk.io code and protocol description (http:\/\/github.com\/kr\/beanstalkd\/tree\/master\/doc\/protocol.txt) for details.\nBoth are short and easy to read.\n\n<br \/>Stat commands depend on <a href=\"http:\/\/github.com\/why\/syck\/tree\/a4f241be5d247853aea6127d02dbdedd8a1dd477\/ext\/io\">YAML<\/a>.\n","category":"Networking\n","slots":{"bury(id, pri)":" Puts a job into the \"buried\" state\n","reserve(timeout)":" Returns and reserves a job (waits until one becomes available if necessary)\n","delete(id)":" Removes a job with a given id from the server, entirely\n","put(body, pri, delay, ttr)":"\tInserts a job into the queue.\n\t<br \/>pri - priority, an integer < 2**32. Jobs with smaller priority values will be\n\tscheduled before jobs with larger priorities. The most urgent priority is 0;\n\tthe least urgent priority is 4294967295.\n\t<br \/>delay - an integer number of seconds to wait before putting the job in\n\tthe ready queue. The job will be in the \"delayed\" state during this time.\n\t<br \/>ttr - time to run, an integer number of seconds to allow a worker to run this job.\n","release(id)":" Puts a reserved job back into the ready queue\n","connect(address)":" Connects to a beanstalk server. address is a \"host:port\" string, e.g., \"127.0.0.1:11300\"\n","touch(id)":" Allows a worker to request more time to work on a job.\n"}}},"Twitter":{"TwitterResponse":{"module":"Twitter","category":"Networking\n","slots":{"rateLimit":"Remaining Returns the rate limit remaining.\n","rateLimitExpiration":"Remaining Returns response results.\n","body":"Returns request to which this is the response.\n"}},"TwitterAccountProfile":{"module":"Twitter","description":"Object representing a twitter account profile.\n","category":"Networking\n","slots":{}},"TwitterException":{"module":"Twitter","category":"Networking\n","slots":{"wasntFriend":"Returns wasntFriend attribute.\n","isAlreadyFollowing":"Returns isAlreadyFollowing attribute.\n","isNotAuthorized":"Returns isNotAuthorized attribute.\n","isUnknown":"Returns isUnknown attribute.\n","isNotFound":"Returns isNotFound attribute.\n","isOverloaded":"Returns isOverloaded attribute.\n","isFollowLimit":"Returns isFollowLimit attribute.\n","isForbidden":"Returns isForbidden attribute.\n","isInternalError":"Returns isInternalError attribute.\n","isRateLimited":"Returns isRateLimited attribute.\n","isBadRequest":"Returns isBadRequest attribute.\n","userIsMissing":"Returns userIsMissing attribute.\n","isSuspended":"Returns isSuspended attribute.\n","isBlockedOrSuspendedOrProtected":"Returns isBlockedOrSuspendedOrProtected attribute.\n","isBlocked":"Returns isBlocked attribute.\n","isDown":"Returns isDown attribute.\n"}},"TwitterSearchCursor":{"fetchNext":"Fetches the next page of results. Returns self.\n","module":"Twitter","index":"Index of cursor pointer.\n","next":"Moves the index to the next result and returns it.\n","slots":{},"results":"Returns the list of results.\n","Returns":"the current result or nil if there are no more results.\n","category":"Networking\n","search":"Returns the search string.\n"},"TwitterFriendsCursor":{"module":"Twitter","description":"Inherits from TwitterFriendsFollowersCursor. requestType is \"asFriendIds\".\n","category":"Networking\n","slots":{}},"TwitterSearch":{"module":"Twitter","category":"Networking\n","slots":{"sinceUpdateId":"Returns the current page number of search results.\n","cursor":"Returns the TwitterSearchCursor for the first page.\n","query":"Returns the search query.\n","results":"Returns the results for the current page.\n","perPage":"Returns the results per page.\n","setPerPage(aSeq)":" Sets the results per page. Returns self.\n","setQuery(aSeq)":" Sets the query. Returns self.\n"}},"TwitterRequest":{"module":"Twitter","description":"Represents a Twitter API request and contains it's results.\n","category":"Networking\n","slots":{"password":"Returns the password attribute.\n","response":"This slot holds a TwitterResponse object for this request.\n","path":"Request path.\n","execute":"Sends the request. Returns the response object.\n","httpMethod":"\"get\"\n","delegate":"Delegate for request callbacks.\n","host":"\"twitter.com\"\n","username":"Returns the username attribute.\n"}},"TwitterFollowersCursor":{"module":"Twitter","description":"Inherits from TwitterFriendsFollowersCursor. requestType is \"asFollowerIds\".\n","category":"Networking\n","slots":{}},"TwitterAccount":{"module":"Twitter","description":"Object representing a twitter account.\n","category":"Networking\n","slots":{"userExists(aScreenName)":" Returns true if the specified user exists, false otherwise.\n","tilesBackgroundImage":"Returns the tilesBackgroundImage set in the twitter profile.\n","setScreenName(aSeq)":" Sets the account screenName. Returns self.\n","sidebarBorderColor":"Returns the sidebarBorderColor set in the twitter profile.\n","rateLimitExpiration":"Returns the account rateLimitExpiration.\n","backgroundImageFile":"Returns the backgroundImageFile set in the twitter profile.\n","updateRateLimits":"Updates the rate limits. Returns self.\n","isSuspended(aScreenName)":" Returns true if the specified screenName is a suspended account, false otherwise.\n","followersCursor":"Returns a new TwitterFriendsCursor instance for this account.\n","name":"Returns the name associated with the profile.\n","hasFollower(aScreenName)":" Returns true if the account has the specified follower, false otherwise.\n","twitterIdForScreenName(aScreenName)":" Returns twitter id for the specified screenName.\n","retweet(tweetId)":" Retweets the tweet with tweetId\n","setName(aSeq)":" Sets the name associated with the profile. Returns self.\n","profile":"Returns the account Profile object.\n","updateColors":"Fetch the latest profile color settings from twitter.\n","isLimited":"Returns true if the account's rate limit is exceeded, false otherwise.\n","hasProtectedUpdates":"Returns true if the account has protected updates, false otherwise.\n","imageFile":"Returns the imageFile set in the twitter profile.\n","rateLimitRemaining":"Returns the account rateLimitRemaining.\n","hasFriend(aScreenName)":" Returns true if the account has the specified friend, false otherwise.\n","updateStatus(messageText, tweetId)":" Updates the status message and returns the results of the request.\n","showUser":"?\n","source":"Returns the account source (e.g. \"API\").\n","mentions":"Returns mentions for this account.\n","unfollow(aScreenName)":" Unfollow the user with the specified screen name. Returns self.\n","updateBackgroundImage":"Fetch the latest background image settings from twitter.\n","linkColor":"Returns the linkColor set in the twitter profile.\n","setPassword(aSeq)":" Sets the account password. Returns self.\n","location":"Returns the geographical location set in the twitter profile.\n","deleteStatus(tweetId)":" Deletes the specified tweet and returns the results of the request.\n","friendsCursor":"Returns a new TwitterFriendsCursor instance for this account.\n","setSource(aSource)":" Sets the account source. Returns self.\n","backgroundColor":"Returns the backgroundColor set in the twitter profile.\n","update":"Fetch the latest basic profile settings from twitter.\n","updateImage":"Fetch the latest image settings from twitter.\n","textColor":"Returns the textColor set in the twitter profile.\n","resultsFor(aRequest)":" Returns results for the request.\n","sidebarFillColor":"Returns the sidebarFillColor set in the twitter profile.\n","description":"Returns the description set in the twitter profile.\n","show":"?\n","request":"Returns a new TwitterRequest object for this account.\n","account":"Returns account associated with this profile.\n","follow(aScreenName)":" Follow the user with the specified screen name. Returns results of the request.\n","screenName":"Returns the account screenName.\n","setProfile(aProfile)":" Sets the account profile. Returns self.\n","setAccount(anAccount)":" Sets the account associated with this profile. Returns self.\n","password":"Returns the account password.\n","showUserWithId(anId)":" ?\n","url":"Returns the url to the twitter profile.\n","setRateLimitExpiration(aNumber)":" Sets the account rateLimitExpiration. Returns self.\n","setRateLimitRemaining(aNumber)":" Sets the account rateLimitRemaining. Returns self.\n"}}},"SecureSocket":{"SecureClient":{"dependsOn":"Client\n","description":"Interface to secure network communication. \nA SecureClient is a wrapper on an OpenSSL SSL_CTX object\nand supports both TLSv1 and DTLSv1.\n","copyright":"Joe Osborn, 2007\n","license":"BSD revised\n","module":"SecureSocket","category":"Networking\n","slots":{"useTLS":"Returns useTLS value.\n","useDTLS":"Returns useDTLS value.\n","setCAFile(aPath)":" Sets the CA file. Returns self.\n","setKeyFile(aPath)":" Sets the key file. Returns self.\n","connectionToServer":"Returns connectionToServer.\n","setCRLFile(aPath)":" Sets the CRL file. Returns self.\n","setCertFile(aPath)":" Sets the Certificate file. Returns self.\n"}},"Certificate":{"description":"Read-only interface to SSL X509 certificates.\n","copyright":"Joe Osborn, 2007\n","license":"BSD revised\n","module":"SecureSocket","category":"Networking\n","slots":{"version":"Returns the version.\n","subjectName":"Returns the subjectName.\n","attributes":"Returns the attributes.\n","serialNumber":"Returns the serialNumber.\n","extensions":"Returns the extensions.\n","notAfter":"Returns the notAfter value.\n","issuerName":"Returns the issuerName.\n","notBefore":"Returns the notBefore value.\n"}},"SecureSocket":{"license":"BSD revised\n","dependsOn":"Socket\n","module":"SecureSocket","category":"Networking\n","slots":{"ValidationOkay":"Returns ValidationOkay attribute as a number.\n","setSocketReadBufferSize(numberOfBytes)":" Sets read buffer size. Returns self.\n","isConnected":"Returns true if socket is connected, false otherwise.\n","supportsDTLS":"Returns true if server supports DTLS, false otherwise.\n","getSocketWriteLowWaterMark":"Returns WriteLowWaterMark attribute.\n","rawPeerCertificate":"Returns rawPeerCertificate.\n","asyncConnectBIO":"Performs asyncConnectBIO.\n","rbioReady":"Returns rbioReady attribute.\n","asyncUdpRead":"?\n","asyncStreamRead":"Read available data and return it.\n","getSocketReadLowWaterMark":"Returns ReadLowWaterMark attribute.\n","wantsRead":"Returns wantsRead attribute.\n","asyncConnectSSL":"Performs asyncConnectSSL.\n","isOpen":"Returns true if socket is open, false otherwise.\n","setSocketWriteLowWaterMark(numberOfBytes)":"  Sets write low water mark. Returns self.\n","asyncUdpServerRead":"?\n","setSocketWriteBufferSize(numberOfBytes)":"  Sets write buffer size. Returns self.\n","rawValidate":"Performs rawValidate.\n","isDatagram":"Returns isDatagram attribute.\n","ValidationFail":"Returns ValidationFail attribute as a number.\n","setSocketReadLowWaterMark(numberOfBytes)":" Sets read low water mark. Returns self.\n","descriptorId":"Returns descriptorId.\n","asyncAccept":"Accept a connection asynchronously.\n","shutdown":"close the socket connection. Returns self.\n","asyncWrite(aSeq)":" Writes aSeq to the socket. Returns self.\n","wantsWrite":"Returns IoSecureSocket_wantsWrite attribute.\n","rawCertificate":"Returns rawCertificate.\n"}},"SecureServer":{"dependsOn":"Server\n","description":"Interface to secure network communication. \nA SecureServer is a wrapper on an OpenSSL SSL_CTX object\nand supports both TLSv1 and DTLSv1.\nExample:\n\n<pre>\n\/\/...\n<\/pre>\n","copyright":"Joe Osborn, 2007\n","license":"BSD revised\n","module":"SecureSocket","category":"Networking\n","slots":{"useTLS":"Returns useTLS value.\n","setPort(aNumber)":" Sets the port on which the server will listen  for connections. Returns self.\")\n","udpRecvIP":"Returns udpRecvIP value.\n","setCAFile(path)":" Sets the CA file. Returns self.\n","setHost(hostName)":" Sets the hostName. Returns self.\")\n","setCertFile(path)":" Sets the certificate file. Returns self.\n","supportsDTLS":"Returns true if server supports DTLS, false otherwise.\n","useDTLS":"Returns useDTLS value.\n","setCRLFile(path)":" Sets the CRL file. Returns self.\n","port":"Returns the port on which the server will listen for connections.\")\n","tlsWrap":"Returns tlsWrap value.\n","stop":"Stops the server if it is running. Returns self.\")\n","dispatchUdp":"Returns dispatchUdp value.\n","setKeyFile(path)":" Sets the key file. Returns self.\n","dtlsWrap":"Returns dtlsWrap value.\n","setRequiresClientCertificate(aBool)":" Sets the requires client certificate attribute. Returns self.\n"}}},"DistributedObjects":{"DOProxy":{"module":"DistributedObjects","category":"Networking\n","slots":{}},"MDOConnection":{"module":"DistributedObjects","description":"A Minimal Distributed Objects connection. Example;\n<pre>\ndateServerCon := MDOConnection clone setHost(\"127.0.0.1\") setPort(8123) connect\nwriteln(\"date from date server: \", Date fromNumber(dateServerCon currentDate))\ndateServerCon close\n<\/pre>\n\nSee the docs for MDOServer for the DateServer code.\n<p>\nA MDOConnection will pause calling coroutines until the response is received. \nMutliple requests can be sent before a single request returns if they are sent \nfrom separate coroutines.\n","category":"Networking\n","slots":{}},"DOConnection":{"module":"DistributedObjects","description":"The DOConnection object is usefull for communicating with remote servers in a way that makes it look just like the sending of local messages. Proxies are automatically created on either side for passed objects, with the exception of strings and numbers, which are passed by value. Example:\n<pre>\ncon := DOConnection clone setHost(\"127.0.0.1\") setPort(8456) connect\nresult := con serverObject test(1)\nwriteln(result)\nr := result at(0)\nwriteln(r)\nr := result at(1)\nwriteln(r)\n<\/pre>\n\nImplementation Notes:\n<p>\n\nThe format of the Distributed Objects message is a list of NullCharacter\nterminated strings in one of these two formats:\n<p>\nSend message format:\n\n<pre>\ns NullCharacter targetId NullCharacter messageName NullCharacter argCount NullCharacter argType NullCharacter argValue NullCharacter (next arg type and value, etc)\n<\/pre>\n\nReply message format:\n\n<pre>\nr NullCharacter argType NullCharacter argvalue NullCharacter\n<\/pre>\n\nIf the argument is not a String, Number or nil then:\nIf it is local to the sender, the type is RemoteObject.\nIf it is a proxy to a remote object, the type is LocalObject.\n\nThis isn't optimized yet.\n","category":"Networking\n","slots":{"close":"Close the connection, if it is open. Returns self.\n","serverObject":"\tA handle to the remote DOServer's root object. Returns result from server or an Error, if one occurs.\n","connect":"Connect to the remote DOServer. Returns self or an Error, if one occurs.\n","setHost(ipString)":" Sets the host ip to connect to. Returns self or an Error, if one occurs.\n","port":"Returns the port.\n","host":"Returns the host ip.\n","setPort(portNumber)":" Sets the port number to connect to. Returns self.\n"}},"DOServer":{"module":"DistributedObjects","description":"An experimental distributed objects server. Example;\n<pre>\nTest := Object clone\nTest test := method(v, \n\twrite(\"got test '\", v, \"'\\n\")\n\treturn List clone append(1)\n)\n\ndoServer := DOServer clone\ndoServer setRootObject(Test clone)\ndoServer setPort(8456)\ndoServer start\n<\/pre>\n","category":"Networking\n","slots":{"setRootObject(anObject)":" Sets the root object which incoming messages will be send to.\n"}},"MDOServer":{"module":"DistributedObjects","description":"A Minimal Distributed Objects server. Example;\n<pre>\nDateServer := Object clone do(\n\tacceptedMessageNames := list(\"currentDate\")\n\tcurrentDate := method(Date clone asNumber)\n)\n\nmdoServer := MDOServer clone \nmdoServer setHost(\"127.0.0.1\")  setPort(8123) \nmdoServer setLocalObject(DateServer clone)\nmdoServer start\n<\/pre>\n","category":"Networking\n","slots":{}}},"NetworkAdapter":{"NetworkAdapter":{"description":"Interface to network adapter functionality.\n","copyright":"Rich Collins, 2007\n","license":"BSD revised\n","module":"NetworkAdapter","category":"Networking\n","slots":{"macAddress":"\tReturns the MAC address for the primary network adapter in a Hex string.\n"}}}},"Compression":{"LZO":{"LZOEncoder":{"description":"The LZOEncoder object can be used to compress  data using the \n<a href=http:\/\/en.wikipedia.org\/wiki\/Lempel-Ziv-Oberhumer> Lempel-Ziv-Oberhumer (LZO)<\/a> \nlossless data compression algorithm.\n<p>\nExample use;\n<pre>\t\nz = LZOEncoder clone\nz beginProcessing\nz inputBuffer appendSeq(\"this is a message\")\nz process\nz endProcess\nresult := z outputBuffer \n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"LZO","category":"Compression\n","slots":{"endProcessing":"\tFinish processing remaining bytes of inputBuffer.\n","beginProcessing":"\tInitializes the algorithm.\n","process":"\tProcess the inputBuffer and appends the result to the outputBuffer.\n\tThe processed inputBuffer is empties except for the spare bytes at \n\tthe end which don't fit into a cipher block.\n"}},"LZODecoder":{"description":"The LZO object can be used to  uncompress data using the \n<a href=http:\/\/en.wikipedia.org\/wiki\/Lempel-Ziv-Oberhumer> Lempel-Ziv-Oberhumer (LZO)<\/a> \nlossless data compression algorithm.\n<p>\nExample use;\n<pre>\t\nz = LZODecoder clone\nz beginProcessing\nz inputBuffer appendSeq(\"this is a message\")\nz process\nz endProcess\nresult := z outputBuffer \n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"LZO","category":"Compression\n","slots":{"endProcessing":"\tFinish processing remaining bytes of inputBuffer.\n","beginProcessing":"\tInitializes the algorithm.\n","process":"\tProcess the inputBuffer and appends the result to the outputBuffer.\n\tThe processed inputBuffer is empties except for the spare bytes at \n\tthe end which don't fit into a cipher block.\n"}},"LZO":{"module":"LZO","description":"The LZO object can be used to compress and uncompress data using the \n<a href=http:\/\/en.wikipedia.org\/wiki\/Lempel-Ziv-Oberhumer> Lempel-Ziv-Oberhumer (LZO)<\/a> \nlossless data compression algorithm.\n<p>\nExample use;\n<pre>\ncompressedData := LZO compress(uncompressedData)\nuncompressedData := LZO uncompress(compressedData)\n<\/pre>\n","category":"Compression\n","slots":{"uncompress(aSeq)":" Returns a uncompressed version of aSeq.\n","compress(aSeq)":" Returns a compressed version of aSeq.\n"}}},"Zlib":{"Zlib":{"module":"Zlib","description":"The Zlib object can be used to compress and uncompress data using the \n<a href=http:\/\/en.wikipedia.org\/wiki\/Zlib>zlib<\/a> \nlossless data compression algorithm.\n<p>\nExample use;\n<pre>\ncompressedData := Zlib compress(uncompressedData)\nuncompressedData := Zlib uncompress(compressedData)\n<\/pre>\n","category":"Compression\n","slots":{"uncompress(aSeq)":" Returns a uncompressed version of aSeq.\n","compress(aSeq)":" Returns a compressed version of aSeq.\n"}},"ZlibDecoder":{"description":"For <a href=http:\/\/en.wikipedia.org\/wiki\/Zlib>Zlib<\/a> uncompression.\nExample use;\n<pre>\t\nz = ZlibDecoder clone\nz beginProcessing\nz inputBuffer appendSeq(inputData)\nz process\nz endProcess\nresult := z outputBuffer \n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"Zlib","category":"Compression\n","slots":{"inputBuffer":"The input buffer for decoding.\n","endProcessing":"\tFinish processing remaining bytes of inputBuffer.\n","beginProcessing":"\tInitializes the algorithm.\n","process":"\tProcess the inputBuffer and appends the result to the outputBuffer.\n\tThe processed inputBuffer is empties except for the spare bytes at the end which don't fit into a cipher block.\n","outputBuffer":"The output buffer for decoding.\n"}},"ZlibEncoder":{"description":"For <a href=http:\/\/en.wikipedia.org\/wiki\/Zlib>Zlib<\/a> compression.\nExample use:\n<p>\n<pre>\t\nz = ZlibEncoder clone\nz beginProcessing\nz inputBuffer appendSeq(\"this is a message\")\nz process\nz endProcess\nresult := z outputBuffer\n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"Zlib","category":"Compression\n","slots":{"inputBuffer":"The input buffer for decoding.\n","endProcessing":"\tFinish processing remaining bytes of inputBuffer.\n","beginProcessing":"\tInitializes the algorithm.\n","process":"\tProcess the inputBuffer and appends the result to the outputBuffer.\n\tThe processed inputBuffer is empties except for the spare bytes at \n\tthe end which don't fit into a cipher block.\n","outputBuffer":"The output buffer for decoding.\n"}}}},"Graphics":{"Font":{"Font":{"description":"The Font object can be used to load and render TypeTrype fonts. Example use;\n<pre>\t\n\/\/ within a GLUT display callback...\n\ntimesFont = Font clone open(\\\"times.ttf\\\")\nif (timesFont error, write(\\\"Error loading font: \\\", timesFont error, \\\"\\n\\\"); return)\ntimesFont setPointSize(16)\nglColor(0,0,0,1)\ntimesFont draw(\\\"This is a test.\\\")\n<\/pre>\t\n\n<b>Rendering fonts using OpenGL textures<\/b>\n<p>\nSmaller fonts (those having a point size around 30 or smaller, depending on the font) will automatically be cached in and rendered from a texture. This technique is very fast and should support rendering speeds as fast (or faster than) those of typical desktop font rendering systems. Larger font sizes(due to texture memory constraints) will be rendered to a pixelmap when displayed. Thanks to Mike Austin for implementing the font texturing system.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"Font","category":"Graphics\n","slots":{"open(optionalPath)":"\tOpens the font. Sets path using optionalPath if supplied. Returns self.\n","pixelSize":"\tReturns the font's pixelSize.\n","widthOfCharacter(aNumber)":"\tReturns the width of the character specified by aNumber in the receiver's font.\n","setPath(aString)":"\tSets the Font path. Returns self.\n","widthOfString(aString)":"\tReturns a Number with the width that aString would render \n\tto with the receiver's current settings.\n","stringIndexAtWidth(aString, startIndex, width)":"\tReturns the max index of the character in String (starting at startIndex) \n\tthat fits within width.\n","isTextured":"\tReturns true if the font is being cached in and rendered from a texture, false otherwise.\n","path":"\tReturns the Font path.\n","pixelHeight":"\tReturns the height of the font measured in pixels.\n","drawString(aString, optionalStartIndex, optionalEndIndex)":"\tDraws aString using the optional start and end indexes, if supplied. Returns self.\n<p>\nNote; Fonts are draw as RGBA pixel maps. These blending options are recommended:\n<pre>\t\nglEnable(GL_BLEND)\nglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\n<\/pre>\n","error":"\tReturns the current error string or nil if there is no error.\n","setPixelSize(aNumber)":"\tSets the size of the font in pixels. Returns self.\n"}}},"GLFW":{"GLFW":{"slots":{},"module":"GLFW","license":"BSD revised\n","copyright":"Joel de Vahl, 2006\n","category":"Graphics\n"}},"Box":{"Box":{"description":"A primitive for fast operations on rectangles.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"OpenGL","category":"Graphics\n","slots":{"copy(aBox)":"\tCopies the values of aBox to the receiver.\n","print":"\tPrints a string representation of the receiver to the standard output.\n","origin":"\tReturns the point object for the origin of the box.\n","Union(aBox)":"\tReturns a new box containing the 2d union of the receiver and aBox.\n","size":"\tReturns the point object for the size of the box.\n","setOrigin(aPoint)":"\tCopies the values in aPoint to the box's origin point.\n","height":"\tSame as; size y\n","depth":"\tSame as; size z\n","set(origin, size)":"\tCopies the values in origin and size to set the box's origin and size.\n","setSize(aPoint)":"\tCopies the values in aPoint to the box's size point.\n","containsPoint(aPoint)":"\tReturns true if aPoint is within the receiver's bounds, false otherwise.\n","intersectsBox(aBox)":"\tReturns true if aBox is within the receiver's bounds, false otherwise.\n","width":"\tSame as; size x\n"}}},"Cairo":{"CairoSurface":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoExtents":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoSurfacePattern":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoRectangle":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoFontExtents":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Trevor Fancher, 2007\n","category":"Graphics\n"},"CairoPath":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoLinearGradient":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoSolidPattern":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoMatrix":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoTextExtents":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Trevor Fancher, 2007\n","category":"Graphics\n"},"CairoImageSurface":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoFontFace":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoGradient":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoPattern":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoPathElement":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoContext":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"Cairo":{"description":"Cairo is a 2D graphics library. http:\/\/cairographics.org\/\n","copyright":"Daniel Rosengren, 2007\n","license":"BSD revised\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoGlyph":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoRadialGradient":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoScaledFont":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"},"CairoFontOptions":{"slots":{},"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","category":"Graphics\n"}},"Image":{"Image":{"description":"The Image object can read and draw images and provide the image \ndata as a buffer. Example use;\n<pre>\t\nimage = Image clone open(\"curly.png\")\nimage draw\nimage scaleTo(image width \/ 2, image height \/ 2)\nimage save(\"curly.tiff\")\n<\/pre>\t\nWhen loading an attempt will be made to convert the image into whichever \nof the following formats it is closest to: L8, LA8, RGB8, RGBA8.\n<p>\nCurrently supported formats include PNG(which supports alpha), JPG and TIFF.\n","copyright":"Steve Dekorte, 2004\n","license":"BSD revised\n","module":"Image","category":"Graphics\n","slots":{"decodingWidthHint":"\tReturns the decoding width hint.\n","removeAlpha":"\tRemoves the alpha component if the image contains one.  Returns self.\n","resizedTo(newWidth, newHeight)":" Scales the image up to newWidth x newHeight.  Returns the newly scaled image.\n","isLA8":"\tReturns true if the receiver is in LA8 (8bit Luminance-Alpha) format, false otherwise.\n","setDataWidthHeightComponentCount(aSequence, width, height, componentCount)":"\tSets the image data and it's parameters. Returns self.\n","isRGB8":"\tReturns true if the receiver is in RGB8 format, false otherwise.\n","data":"\tReturns a Buffer primitive containing the image data (loading it first if needed). \n\tManipulating this data will effect what is drawn when the receiver's draw method is called.\n","setEncodingQuality(aNumber)":"\tSets the image encoding quality (range is 0.0 - 1.0, 1.0 with being the highest).\n","setDecodingWidthHint(width)":"\tSets the decoding width hint. Returns self.\n","componentCount":"\tReturns the number of color components in the receiver as a Number.\n","isRGBA8":"\tReturns true if the receiver is in RGBA8 format, false otherwise.\n","setDecodingHeightHint(width)":"\tSets the decoding height hint. Returns self.\n","width":"\tReturns the image width.\n","bounds(cutoff)":"\tReturns an object continaing the bounds of the image. Cutoff is max bound color value for any color component.\n\tIf it is negative, it is the min bound color value.\n","baselineHeight":"\tReturns the pixel height (relative to the bottom of the image) which first contains a non-white pixel or -1 if\n\tno baseline is found.\n","addAlpha":"\tAdds an opaque alpha component if the image is in RGB format and does not already contain one.  Returns self.\n","averageColor":"\tReturns the average RGB color of all pixels in the image.\n","crop(x, y, width, height)":"\tCrops the image to the specified values. Returns self.\n\tRaises an exception on error.\n","isL8":"\tReturns true if the receiver is in L8 (8bit Luminance) format, false otherwise.\n","flipX":"\tFlips the image on the horizonal plane (left\/right mirror). Returns self.\n","setPath(aString)":"\tSets the image path. Returns self.\n","encodingQuality":"\tReturns the encodingQuality setting.\n","resizedTo(width, height)":"\tReturns a new image of the receiver resized to the given width and height.\n\tRaises an exception on error.\n","path":"\tReturns the image path.\n","flipY":"\tFlips the image on the vertical plane (top\/bottom mirror). Returns self.\n","height":"\tReturns the image hieght.\n","error":"\tReturns a String containing the current error or nil if there is no error.\n","open(optionalPathString)":"\tSets the path to optionalPathString if provided and opens the image file. \n\tReturns self on success, Nil on failure.\n","save(optionalPathString)":"\tSets the path to optionalPathString if provided and saves the image \n\tin the format specified by the path extension. Returns self on success, nil on failure.\n","decodingHeightHint":"\tReturns the decoding height hint.\n"}}},"OpenGL":{"GLUQuadric":{"slots":{},"module":"OpenGL","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","category":"Graphics\n"},"GLU":{"slots":{"gluScaleImage(formatIn, widthIn, heightIn, typeIn, dataSeqIn, widthOut, heightOut, typeOut, dataSeqOut)":"\tScales the image data in dataSeqIn and outputs the result to dataSeqOut.\n\tReturns error code as a Number.\n"},"module":"OpenGL","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","category":"Graphics\n"},"GLApp":{"module":"OpenGL","category":"Graphics\n","slots":{}},"Box":{"description":"A primitive for fast operations on rectangles.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"OpenGL","category":"Graphics\n","slots":{"copy(aBox)":"\tCopies the values of aBox to the receiver.\n","print":"\tPrints a string representation of the receiver to the standard output.\n","origin":"\tReturns the point object for the origin of the box.\n","Union(aBox)":"\tReturns a new box containing the 2d union of the receiver and aBox.\n","size":"\tReturns the point object for the size of the box.\n","setOrigin(aPoint)":"\tCopies the values in aPoint to the box's origin point.\n","height":"\tSame as; size y\n","depth":"\tSame as; size z\n","set(origin, size)":"\tCopies the values in origin and size to set the box's origin and size.\n","setSize(aPoint)":"\tCopies the values in aPoint to the box's size point.\n","containsPoint(aPoint)":"\tReturns true if aPoint is within the receiver's bounds, false otherwise.\n","intersectsBox(aBox)":"\tReturns true if aBox is within the receiver's bounds, false otherwise.\n","width":"\tSame as; size x\n"}},"GLScissor":{"slots":{},"module":"OpenGL","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","category":"Graphics\n"},"OpenGL":{"slots":{},"module":"OpenGL","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","category":"Graphics\n"},"GLUT":{"slots":{},"module":"OpenGL","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","category":"Graphics\n"}}},"Math":{"BigNum":{"BigNum":{"module":"BigNum","description":"A wrapper for <a href=http:\/\/gmplib.org\/>GNU MP Bignum (arbitrary precision math) library<\/a>. \nWarning: GMP uses the restrictive GNU license which can be a problem if you are hard linking it into a distrbuted application.\n","category":"Math\n","slots":{"powm(aNum)":" ?\n","-(aNum)":" Subtract op. Returns result.\n","scan1(aNum)":"  ?\n","asString":"Returns a string representation of the receiver.\n","kronecker":"?\n","sqrt":"Returns square root of the receiver.\n","nextprime":"Returns next prime larger than the receiver.\n","pow(aNum)":" Returns power of receiver to aNum.\n","with(aNumber)":" Returns a BigNum version of the Io number aNumber.\n","asNumber":"Returns an Io Number for the receiving BigNum.\n","\/(aNum)":" Divide op. Returns result.\n","neg":"Returns negative version of receiver.\n","*(aNum)":" Multiply op. Returns result.\n","&(aNum)":"  AND op. Returns result.\n","|(aNum)":"  OR op. Returns result.\n","lcm(aNum)":" Least common denominator op. Returns result.\n","root(aNum)":" Returns the aNum root of the receiver.\n","**(aNum)":" Power op. Returns result.\n","legendre(aNum)":" ?\n","popcount":"?\n","+(aNum)":" Add op. Returns result.\n","hamdist(aNum)":"  Returns hamming distance between receiver and aNum.\n","scan0(aNum)":"  ?\n","tstbit(aNum)":"  ?\n","invert(aNum)":"  ?\n","^(aNum)":" XOR op. Returns result.\n","%(aNum)":" Modulus op (same as mod()). Returns result.\n","jacobi(aNum)":"  ?\n","gcd(aNum)":" Greatest common denominator op. Returns result.\n","asSimpleString":"Returns simple string representation of the receiver.\n","abs":"absolute op. Returns result.\n","<<(aNum)":" Shift left (towards higher bits) op. Returns result.\n","mod(aNum)":" Modulus op (same as %). Returns result.\n",">>(aNum)":" Shift right (towards lower bits) op. Returns result.\n"}}},"Rational":{"Rational":{"Number description":"Example use:\n<pre>\nr1 := Rational with(1, 2) \/* 1\/2\n","copyright":"Jeremy Tregunna, 2006\n","license":"BSD\n","module":"Rational","category":"Math\n","slots":{"negate":"Negates the Rational number.\n","abs":"Returns a Rational number with the absolute value of the receiver.\n","!=(other)":" Compares two numbers against one another. Returns true if they are equal (represent the same number), false otherwise.\n","serialized":"Returns a bit of code which can be used to serialize the Rational number.\n","with(aNumerator, aDenominator)":" Convenience constructor. Returns a new Rational number whose numerator and denominator are represented by the arguments aNumerator and aDenominator respectively.\")\n","==(other)":" Compares two numbers against one another. Returns true if they are equal (represent the same number), false otherwise.\n","asString":"Returns a text string representing the Rational number.\n","asRational":"Converts the number to a Rational number. CAVEAT: Numbers in Io are floating point entities, which means since they are imprecise, this conversion may yield values not expected.\")\n","%(aNum)":" Returns the receiver modulus aNum\n","setDenominator(aNumber)":" Sets the denominator. Returns self.\n","-(aNum)":" Returns the value of the receiver subtracted from aNum.\n","asNumber":"Converts the Rational number to a floating point number.\n","gcd(aNum)":" Calculates the greatest common denominator between the receiver and the argument.\n","\/(aNum)":" Returns the value of the receiver divided by aNum.\n","numerator":"Returns the numerator.\n","*(aNum)":" Returns the value of the receiver multiplied by aNum.\n","compare(other)":" Compares two numbers against one another. Returns a positive, zero or negative value based on whether the receiver is larger, equal or less than the argument.\n","pow(aNum)":" Returns the value of the receiver to the power of aNum.\n","reduce":"Reduces the numerator and denominator to their lowest terms.\n","denominator":"Returns the denominator.\n","+(aNum)":" Returns the value of the receiver added to aNum.\n","divmod(aNum)":" Returns a list containing the integer value and the receiver modulus aNum.\n","setNumerator(aNumber)":" Sets the numerator. Returns self.\n"}}},"ContinuedFraction":{"ContinuedFraction":{"module":"ContinuedFraction","description":"?\n","category":"Math\n","slots":{}}},"Random":{"Random":{"description":"A high quality and reasonably fast random number generator based on \nMakoto Matsumoto, Takuji Nishimura, and Eric Landry's implementation \nof the <a href=http:\/\/www.math.sci.hiroshima-u.ac.jp\/~m-mat\/MT\/emt.html>Mersenne Twister<\/a> algorithm. The default seed is and xor of \nthe ANSI C time() and clock() return values.\n","copyright":"Steve Dekorte 2002\n","license":"BSD revised\n","module":"Random","category":"Math\n","slots":{"flip":"\tReturns a random bit as a true or false object.\n","setSeed(aNumber)":"\tSets the random number generator seed to the unsign int version of aNumber.\n","value(optionalArg1, optionalArg2)":"\tIf called with:\n\t<ul>\n\t<li> no arguments, it returns a floating point\n\trandom Number between 0 and 1.\n\t<li> one argument, it returns a floating point random\n\tNumber between 0 and optionalArg1.\n\t<li> two arguments, it returns a floating point random\n\tNumber between optionalArg1 and optionalArg2.\n\t<\/ul>\n","bytes(count)":"\tReturns a Sequence of size count containing random bytes.\n","gaussian(optionalMean, optionalStandardDeviation)":"\tReturns a pseudo random number between 0 and 1 with a gaussian distribution.\n"}}}}}
