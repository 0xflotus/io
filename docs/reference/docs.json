{"Networking":{"Twitter":{"TwitterResponse":{"module":"Twitter","category":"Networking\n","slots":{"rateLimit":"Remaining Returns the rate limit remaining.\n","rateLimitExpiration":"Remaining Returns response results.\n","body":"Returns request to which this is the response.\n"}},"TwitterException":{"module":"Twitter","category":"Networking\n","slots":{"userIsMissing":"Returns userIsMissing attribute.\n","isSuspended":"Returns isSuspended attribute.\n","isInternalError":"Returns isInternalError attribute.\n","isUnknown":"Returns isUnknown attribute.\n","isBlocked":"Returns isBlocked attribute.\n","isNotAuthorized":"Returns isNotAuthorized attribute.\n","isBadRequest":"Returns isBadRequest attribute.\n","isForbidden":"Returns isForbidden attribute.\n","isFollowLimit":"Returns isFollowLimit attribute.\n","wasntFriend":"Returns wasntFriend attribute.\n","isDown":"Returns isDown attribute.\n","isRateLimited":"Returns isRateLimited attribute.\n","isAlreadyFollowing":"Returns isAlreadyFollowing attribute.\n","isNotFound":"Returns isNotFound attribute.\n","isBlockedOrSuspendedOrProtected":"Returns isBlockedOrSuspendedOrProtected attribute.\n","isOverloaded":"Returns isOverloaded attribute.\n"}},"TwitterSearch":{"module":"Twitter","category":"Networking\n","slots":{"sinceUpdateId":"Returns the current page number of search results.\n","setQuery(aSeq)":" Sets the query. Returns self.\n","cursor":"Returns the TwitterSearchCursor for the first page.\n","query":"Returns the search query.\n","perPage":"Returns the results per page.\n","results":"Returns the results for the current page.\n","setPerPage(aSeq)":" Sets the results per page. Returns self.\n"}},"TwitterFollowersCursor":{"module":"Twitter","description":"Inherits from TwitterFriendsFollowersCursor. requestType is \"asFollowerIds\".\n","category":"Networking\n","slots":{}},"TwitterAccount":{"module":"Twitter","description":"Object representing a twitter account.\n","category":"Networking\n","slots":{"setSource(aSource)":" Sets the account source. Returns self.\n","resultsFor(aRequest)":" Returns results for the request.\n","rateLimitExpiration":"Returns the account rateLimitExpiration.\n","mentions":"Returns mentions for this account.\n","password":"Returns the account password.\n","update":"Fetch the latest basic profile settings from twitter.\n","showUser":"?\n","setName(aSeq)":" Sets the name associated with the profile. Returns self.\n","tilesBackgroundImage":"Returns the tilesBackgroundImage set in the twitter profile.\n","name":"Returns the name associated with the profile.\n","setPassword(aSeq)":" Sets the account password. Returns self.\n","rateLimitRemaining":"Returns the account rateLimitRemaining.\n","setScreenName(aSeq)":" Sets the account screenName. Returns self.\n","hasProtectedUpdates":"Returns true if the account has protected updates, false otherwise.\n","setProfile(aProfile)":" Sets the account profile. Returns self.\n","isLimited":"Returns true if the account's rate limit is exceeded, false otherwise.\n","unfollow(aScreenName)":" Unfollow the user with the specified screen name. Returns self.\n","url":"Returns the url to the twitter profile.\n","source":"Returns the account source (e.g. \"API\").\n","deleteStatus(tweetId)":" Deletes the specified tweet and returns the results of the request.\n","userExists(aScreenName)":" Returns true if the specified user exists, false otherwise.\n","show":"?\n","location":"Returns the geographical location set in the twitter profile.\n","backgroundImageFile":"Returns the backgroundImageFile set in the twitter profile.\n","follow(aScreenName)":" Follow the user with the specified screen name. Returns results of the request.\n","request":"Returns a new TwitterRequest object for this account.\n","profile":"Returns the account Profile object.\n","sidebarFillColor":"Returns the sidebarFillColor set in the twitter profile.\n","setAccount(anAccount)":" Sets the account associated with this profile. Returns self.\n","backgroundColor":"Returns the backgroundColor set in the twitter profile.\n","setRateLimitRemaining(aNumber)":" Sets the account rateLimitRemaining. Returns self.\n","updateImage":"Fetch the latest image settings from twitter.\n","friendsCursor":"Returns a new TwitterFriendsCursor instance for this account.\n","updateStatus(messageText, tweetId)":" Updates the status message and returns the results of the request.\n","account":"Returns account associated with this profile.\n","hasFollower(aScreenName)":" Returns true if the account has the specified follower, false otherwise.\n","description":"Returns the description set in the twitter profile.\n","screenName":"Returns the account screenName.\n","showUserWithId(anId)":" ?\n","isSuspended(aScreenName)":" Returns true if the specified screenName is a suspended account, false otherwise.\n","updateRateLimits":"Updates the rate limits. Returns self.\n","twitterIdForScreenName(aScreenName)":" Returns twitter id for the specified screenName.\n","setRateLimitExpiration(aNumber)":" Sets the account rateLimitExpiration. Returns self.\n","imageFile":"Returns the imageFile set in the twitter profile.\n","updateColors":"Fetch the latest profile color settings from twitter.\n","sidebarBorderColor":"Returns the sidebarBorderColor set in the twitter profile.\n","followersCursor":"Returns a new TwitterFriendsCursor instance for this account.\n","textColor":"Returns the textColor set in the twitter profile.\n","updateBackgroundImage":"Fetch the latest background image settings from twitter.\n","hasFriend(aScreenName)":" Returns true if the account has the specified friend, false otherwise.\n","linkColor":"Returns the linkColor set in the twitter profile.\n"}},"TwitterFriendsCursor":{"module":"Twitter","description":"Inherits from TwitterFriendsFollowersCursor. requestType is \"asFriendIds\".\n","category":"Networking\n","slots":{}},"TwitterRequest":{"module":"Twitter","description":"Represents a Twitter API request and contains it's results.\n","category":"Networking\n","slots":{"httpMethod":"\"get\"\n","username":"Returns the username attribute.\n","path":"Request path.\n","response":"This slot holds a TwitterResponse object for this request.\n","host":"\"twitter.com\"\n","delegate":"Delegate for request callbacks.\n","execute":"Sends the request. Returns the response object.\n","password":"Returns the password attribute.\n"}},"TwitterSearchCursor":{"fetchNext":"Fetches the next page of results. Returns self.\n","results":"Returns the list of results.\n","module":"Twitter","search":"Returns the search string.\n","slots":{},"next":"Moves the index to the next result and returns it.\n","index":"Index of cursor pointer.\n","category":"Networking\n","Returns":"the current result or nil if there are no more results.\n"},"TwitterAccountProfile":{"module":"Twitter","description":"Object representing a twitter account profile.\n","category":"Networking\n","slots":{}}},"Loudmouth":{"XmppChatMessage":{"module":"Loudmouth","category":"Networking\n","slots":{"create()":" Creates a new <code>LoudmouthMessage<\/code> with chat <code>type<\/code> and random id value.\n"}},"LoudmouthMessage":{"module":"Loudmouth","description":"<p>LoudmouthMessage provides SGML interface and convience methods for manipulation of XMPP messages.<\/p>\n","category":"Networking\n","slots":{"setTo(jid)":" Sets message receiver to defined JID. JID can be both an <code>Sequence<\/code> or <code>JID<\/code> instance. Returns <code>self<\/code>.\n","to":"Returns JID of receiver.\n","with(source)":" Creates new LoudmouthMessage based on <code>source<\/code>, which should be valid XML (<code>Sequence<\/code>).\n"}},"Loudmouth":{"module":"Loudmouth","category":"Networking\n","slots":{"xmppType":"Returns value of <code>type<\/code> attribute of message node.\n","setPresence(presence[, statusMessage])":" Sets aviability\/presence and status message.\n","plainBody":"Returns value of message's body node with XHTML markup.\n","asString":"Converts XML to Sequence.\n","with(jid, password)":" Creates new Lodumouth clone with server details provided in <code>jid<\/code>.\n","setXmppType(type)":" Sets value of <code>type<\/code> attribute.\n","handleConnectFailure()":" Slot called when server is not reachable.\n","setFrom(jid)":" Sets sender's JID. Returns <code>self<\/code>.\n","handleDisconnect()":" Slot called upon closing the connection with the server.\n","from":"Returns sender's JID.\n","handleAuthenticationFailure()":" Slot called if username\/password combinaton is wrong.\n","handleConnect()":" Slot called once connection is established.\n","body":"Returns value message's body node. If both XHTML and plain versions are available, XHTML version will be returned.\n","sendVia(loudmouthConnection)":" Converts message to sequence and sends it via provided Loudmouth connection (<code>Loudmouth<\/code> object). It updates <code>from<\/code> property and returns <code>true<\/code> if message is sent.\n","setStatusMessage(statusMessage)":" Sets status message.\n","handleMessage(xmppMessage)":" Slot called when an message arrives via XMPP stream. <code>xmppMessage<\/code> is a <code>LoudmouthMessage<\/code> object.\n","types *":"  <p>Returns status codes and message types.<\/p>\n  <pre><code>\n  Loudmouth with(\"username@server.com\", \"password\") do(\n    handleConnect = method(\n      self setPresence(Loudmouth types AVAILABLE), \"Drinking lemonade...\")\n  )\n  <\/code><\/pre>\n","handleSslFailure()":" Slot called if SSL-related problems arrive. Method should return <code>true<\/code> if it wishes make a connection without SSL, <code>false<\/code> otherwise.\n"}}},"NetworkAdapter":{"NetworkAdapter":{"module":"NetworkAdapter","license":"BSD revised\n","copyright":"Rich Collins, 2007\n","description":"Interface to network adapter functionality.\n","category":"Networking\n","slots":{"macAddress":"\tReturns the MAC address for the primary network adapter in a Hex string.\n"}}},"GoogleSearch":{"GooglePage":{"module":"GoogleSearch","description":"Object representing one page of search results.\n","category":"Networking\n","slots":{"links":"Returns the list of link results.\n","setSearchTerm(aSeq)":" Sets the search term. Returns self.\n","pageNumber":"Returns the current page number of results.\n","find":"Runs the search.\n","searchTerm":"Returns the search term.\n"}},"GoogleSearch":{"module":"GoogleSearch","description":"Object for performing web searches via Google.\nExample:\n<pre>\nGoogleSearch clone setSearchTerm(\"iolanguage\") find links foreach(println)\nwhile(Coroutine yieldingCoros size > 1, yield)\n<\/pre>\n","category":"Networking\n","slots":{"setMaxPages(aNumber)":" Sets the max number of pages to fetch results from. Returns self.\n","maxPages":"Returns the max number of pages to fetch results from.\n","links":"Returns the list of link results.\n","find":"Runs the search.\n"}}},"Generys":{"RouteMatch":{"module":"Generys","from()":" Same as <code>RouteMatch to<\/code>.\n","description":"RouteMatch is the object with which you operate in routes.io. It provides methods for easier Route managment.\n","category":"Networking\n","slots":{"to(options)":"  <p>Binds pattern with controller.\n  <code>options<\/code> can be an Method or a Map with <code>controller<\/code> and <code>action<\/code> properties.\n  <\/p><p>\n  Example:\n  <pre><code>\n  Router do(\n    connect(\"\/cars\/new\") to({controller: \"Cars\", action: \"new\"})\n    connect(\"_:slot\") to({controller: \"Debug\", action: \"#{slot}\"})\n    connect(\"\/time\") to(method(request, response, Date now asString))\n\n    connect(\"\/\") to({controller: \"StaticPages\"}) # action: index\n  )<\/code><\/pre><\/p>\n","ifHttpMethods(...)":"  Route will respond only to given HTTP verbs. You can provide more than one HTTP verb (all uppercased).\n  Example:\n  <pre><code>Router connect(\"\/sessions\/delete\") ifHttpMethods(\"DELETE\", \"POST\")<\/code><\/pre>\n","with(pattern)":" Returns RouteMatch and assigns newly created Route.\n","as(name)":"  Gives name to assinged route.\n  This name can be later used from controller for redirections or generating links:\n  \n  router.io:\n  <pre><code>\n  Router do(\n    connect(\"\/sessions\/create\") as(\"login\")\n    # ...\n  )<\/code><\/pre>\n\n  Controller:\n  <pre><code>\n  authFailure := method(\n    self isLoggedIn ifFalse(\n      self redirectToRoute(\"login\")\n    )\n    #...\n  )<\/code><\/pre>\n","ifHttpMethod(httpVerb)":" Same as <code>RouteMatch ifHttpMethods<\/code>.\n"}},"CouchDBException":{"module":"Generys","category":"Networking\n","slots":{}},"CouchDoc":{"module":"Generys","description":"Map with extra methods for easier interaction with CouchDB\n","category":"Networking\n","slots":{"before(event, slotName[, target])":" Subscribe callback to an <em>before<\/em> event.\n","id()":" Returns value of <code>_id<\/code> property.\n","update()":"  Saves document to database.\n  Emits <code>beforeUpdate<\/code> and <code>afterUpdate<\/code> events.\n","rev()":" Returns value of <code>_rev<\/code> property.\n","save()":" Alias of <code>CouchDoc update()<\/code>.\n","after(event, slotName[, target])":" Subscribe callback to an <em>after<\/em> event.\n","listenTo(event, slotName[, target])":"  Subscribes callback to an event on <code>self<\/code> instance.\n  If <code>target<\/code> is provided, its slot <code>slotName<\/code> will be called.<br\/>\n  Returns <code>NotificationListener<\/code>.\n","create()":"  Creates document in the database.\n  Emits <code>beforeCreate<\/code> and <code>afterCreate<\/code> events.\n","delete()":"  Deletes document from database.\n  Emits <code>beforeDelete<\/code> and <code>afterDelete<\/code> events.\n","from(map)":" Converts Map to CoucDoc.\n"}},"Route":{"module":"Generys","description":"Route is the core object of the whole routeing system within Generys,\nbut the end-user should never directly use it\n(wrappers <code>RouteMatch<\/code> and <code>ResourceMatch<\/code> should be used instead).\n","category":"Networking\n","slots":{"respondsTo(path, httpMethod)":" Returns <code>true<\/code> if path matches defined pattern. Otherwise, <code>false<\/code>.\n","interpolate(context)":"  Interpolate route's pattern. <code>context<\/code> can be either Map, either Object.\n  <br\/><br\/>\n  Example:\n  <pre><code>\n  Io> r interpolate({resource: \"iceCream\", path: \"ledo\/strawberry\"})\n  ==> \"\/iceCream\/ledo\/strawberry\"<\/code><\/pre>\n","fullNamedCaptures":"Returns matches of URL pattern (with \":\" or \"*\" at beginning) as List of Sequences.\n","with(pattern)":" Creates a new route and appends it to <code>Generys routes<\/code> list.\n","mapToPath(path)":"  Maps <code>Route namedCaptures<\/code> to values from real path. Returns Map.\n  <br\/>\n  Example:\n  <pre><code>\n  Io> Route with(\"\/:resource\/<!-- o.O -->*path\") mapToPath(\"\/chocolate\/swiss\/dark\") asJson\n  ==> {\"resource\": \"chocolate\", \"path\": \"swiss\/dark\"}<\/code><\/pre>\n","patternMatches":"  Extracts <code>:keyword<\/code> from patterns. Returns RegexMatches object.\n  \n  Example:\n  <pre><code>\n  Io> r := Route with(\"\/:resource\/<!-- O.o-->*path\")\n  Io> r patternMatches all map(string)\n  ==> list(\":resource\", \"*path\")<\/code><\/pre>\n","namedCaptures":"  Removes \":\" and \"*\" from strings returned by <code>Route fullNamedCaptures<\/code>. Returns List.\n","asRegex":"Returns RegEx which can be tested agains URLs.\n"}},"Controller":{"module":"Generys","description":"Controller provides methods which respond to certain HTTP paths. Router connects paths to accompanying contollers.\n\nSlots whose names begins with underscore are considered \"private\" and will never be activated by Dispatcher.\nWhen Dispatcher activates an slot it maps Route's variables and HTTP POST\/GET query parameters to slot's argument names. Parameters not bounded to arguments all available in <code>params<\/code> slot. Depending on the type of object which was returned the right ResponseFormatter will be activated - returning Map or List will automatically convert it into JSON format and set appropriate value for <em>Content-Type<\/em> header.\n<pre><code>\nZooController := Controller clone do(\n  visitors        := list()\n  banedVisitors   := list()\n  state           := \"closed\"\n\n  beforeFilter(\"_zooShouldBeOpen\", {except: \"open\"})\n  beforeFilter(\"_zooShouldBeClosed\", {only: \"close\"})\n  beforeFilter(\"_requireNoBan\", {only: [\"visit\", \"buyToy\"]})\n  \n  open := method(\n    self state = \"open\"\n    \"Zoo open!\")\n  \n  close := method(\n    self state = \"closed\"\n    \"Zoo is closed!\")\n    \n  visit := method(id,\n    self visitors append(id)\n    self session visits = if(self session ?visits isNIl,\n      1, self session visits + 1)\n    \n    self redirectToRoute(\"zooEntrance\"))\n  \n  buyToy := method(id, toy,\n    self visitors select(== id) first\n    self session toys append(toy))\n  \n  _zooShouldBeOpen := method(\n    (self state == \"open\") ifFalse(Exception raise(\"zooClosed\")))\n  \n  _zooShouldBeClosed := method(\n    (self state == \"closed\") ifFalse(Exception raise(\"zooOpen\")))\n  \n  _requireNoBan := method(\n    (self banedVisitors))\n)<\/code><\/pre>\n","category":"Networking\n","slots":{"beforeFilters":"List of <em>before<\/em> filters. Use <code>Generys beforeFilter()<\/code> to append new filter to controller.\n","forceDownload(filename)":"  Instructs browser to show \"Save as\" dialog for current request. <code>filename<\/code> will be shown to user.\n","dontCache()":" Disables client-side cache for current request.\n","getWebSocket(name)":" Returns WebSoocket with provided name. <code>nil<\/code> otherwise.\n","isAjaxRequest":"  Returns <code>true<\/code> if current is made via XMLHttpRequest. (X-Requested-With header has to be set).\n  Note that all header names in <code>self request headers<\/code> are uppercased and dashes (-) are replaced with underscores.\n","doBeforeFilters()":" Performs all <code>beforeFilters<\/code>\n","view(path)":" Alias for <code>HTML fromFile()<\/code>. Value of <code>Generys root<\/code> is prepended to <code>path<\/code>.\n","doAfterFilters()":" Performs all <code>afterFilters<\/code>\n","setStatusCode(code)":" Sets status code.\n","isGET":"Returns <code>true<\/code> if current is made with GET.\n","privateSlots":"List of private slots, you can add names of slots whose names don't begin with an underscore.\n","redirectTo(url[, statusCode])":"  Redirects client to provided URL. By default, status code 302 is being used.\n  Note that by HTTP standard, URL should be complete (<em>http:\/\/...<\/em>, not just <em>\/cars\/all<\/em>),\n  you can use <code>(Generys serverURL) .. (Generys config urlPrefixPath)<\/code> for that.\n","destroySession()":" Destroys all session data and returns empty one.\n","isPUT":"Returns <code>true<\/code> if current is made with PUT.\n","beforeFilter(slotName, options)":"  Adds method to list of methods which will be called before targeted slot (one defined in route) gets called.\n  <code>options<\/code> is optional argument, which can contain list of slots before which filter shouldn't be called.\n  Filter will get the same arguments as targeted slot.\n","createFutureResponse(name)":"  Creates FutureResponse with given name, for which you have to make sure is unique.\n  If another FutureResponse with same name already exists, it will be returned.\n","isDELETE":"Returns <code>true<\/code> if current is made with DELETE.\n","afterFilter(filter, options)":"  Adds a method to list of methods which will be called after target slot (one defined by rotue) is called.\n  When called first argument will be response by targeted slot.\n  For more details take a look at <code>Controller beforeFilter()<\/code>.\n","params":"A Map of all parameters that came in with request.\n","doFilters(filters, args)":" Performs all filters with given argments. Returns nil.\n","isPOST":"Returns <code>true<\/code> if current is made with POST.\n","accepts(httpVerb, ...)":"  Raises <code>wrongRequestMethod<\/code> exception if current request's HTTP verb isn't listed.\n","redirectToRoute(routeName[, routeParams])":"  Redirect client to URL at which route will be activated.\n  <code>routeParams<\/code> will be passed to <code>Route interpolate()<\/code>.\n","cacheFor(duration)":" Sets <em>Cache-Control<\/em> to cache current response for <code>duration<\/code>.\n","isHEAD":"Returns <code>true<\/code> if current is made with HEAD.\n","isWebSocket":"Returns <code>true<\/code> if request is made via WebSocket protocol.\n","response":"Holds HttpResponse object.\n","private":"If set to <code>true<\/code>, Dispatcher will never call slots from this controller.\n","getFutureResponse(name)":" Returns FutureResponse with provided name. Otherwise <code>nil<\/code>.\n","createWebSocket(name[, handler])":"  Creates WebSocket with given name and assings handler class (if provided).\n  If another WebSocket with the same name already exists, it will be closed and new a one will be created.\n","request":"Holds HttpRequest object of current request.\n","session":"Returns session object.\n"}},"Dispatcher":{"module":"Generys","description":"An HTTP request dispatcher, it is responsible for selecting right route depending on the requested path and finalize rendering - activating the right ResponseFormatter.\n","category":"Networking\n","slots":{"dispatch(request, response[, candidateAt])":" Selects right route and activates it.\n","formatResponse(controllerResponse, request, response)":" Activates ResponseFormatter for controllerResponse.\n","handleRequest(request, response)":" Prepares path, calls dispatch() and formats response.\n"}},"Router":{"module":"Generys","description":"Router.\n","category":"Networking\n","slots":{"PUT(pattern)":" Creates Route which will only respond to HTTP PUT. Returns RouteMatch\n","defaultRoutes()":" Assings default routes which enables acces to all controllers and their actions.\n","DELETE(pattern)":" Creates Route which will only respond to HTTP DELETE. Returns RouteMatch.\n","connect(pattern)":" Creates Route with <code>pattern<\/code> and returns RouteMatch.\n","GET(pattern)":" Creates Route which will only respond to HTTP GET. Returns RouteMatch.\n","fileServerRoutes()":"  Assings route wich will check if a file exists in <code>Generys staticDir<\/code> which matches request path.\n  If such file exits it will be served to the client.\n  Note: this method has to be called explicitly in <code>routes.io<\/code> as a last route.\n","POST(pattern)":" Creates Route which will only respond to HTTP POST. Returns RouteMatch.\n","resource(name)":" Returns RouteMatch.\n"}},"ResourceMatch":{"module":"Generys","description":"<p>\nResourceMatch is object which is returned by <code>Router resource()<\/code> and you'll be mostly woking with it in <code>router.io<\/code>.\nIt provides convience methods for creating Routes which will automatically bind your controller's methods on a RESTful way.\n<\/p>\n<p>Routeing table for <code>Router resource(\"IceCream\")<\/code>:<\/p>\n<table>\n  <thead>\n    <tr>\n      <th>Pattern<\/th>\n      <th>HTTP verb<\/th>\n      <th>Controller slot<\/th>\n      <th>Route name<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>\/<u>icecream<\/u>s<\/td>\n      <td>GET<\/td>\n      <td>index<\/td>\n      <td>list<u>IceCream<\/u>s<\/td>\n    <\/tr>\n    <tr>\n      <td>\/<u>icecream<\/u>s\/new<\/td>\n      <td>GET<\/td>\n      <td>new<\/td>\n      <td>new<u>IceCream<\/u><\/td>\n    <\/tr>\n    <tr>\n      <td>\/<u>icecream<\/u>s<\/td>\n      <td>POST<\/td>\n      <td>create<\/td>\n      <td>create<u>IceCream<\/u><\/td>\n    <\/tr>\n    <tr>\n      <td>\/<u>icecream<\/u>s\/:id<\/td>\n      <td>GET<\/td>\n      <td>show<\/td>\n      <td>show<u>IceCream<\/u><\/td>\n    <\/tr>\n    <tr>\n      <td>\/<u>icecream<\/u>s\/:id<\/td>\n      <td>PUT<\/td>\n      <td>update<\/td>\n      <td>update<u>IceCream<\/u><\/td>\n    <\/tr>\n    <tr>\n      <td>\/<u>icecream<\/u>s\/:id<\/td>\n      <td>DELETE<\/td>\n      <td>destroy<\/td>\n      <td>destroy<u>IceCream<\/u><\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<p>\nExample:<br\/>\nrouter.io:\n<pre><code>\n  Router do(\n    resource(\"Car\") hasMany(\"Owners\")\n  )<\/code><\/pre>\n<\/p>\n<p>CarsController.io:\n<pre><code>\nCarsController := Controller clone do(\n  index := method(Cars all)\n  \n  new := method(\n    self view(\"app\/views\/car\/new.html\"))\n  \n  create := method(data,\n    car := Car create(data)\n    self redirectToRoute(\"showCar\", {id: car id}))\n\n  show := method(id,\n    car := Car[id]\n    self view(\"app\/views\/car\/car.html\") do(\n      find(\"#car_name\") setText(car[\"name\"])\n      find(\"#car_mph\")  setText(car[\"mph\"])\n    ))\n  \n  update := method(id, data,\n    car := Car[id]\n    car merege(data)\n    car save\n\n    self show(id))\n\n  destory := method(id,\n    Car removeAt(id)\n    self redirectToRoute(\"listCar\"))\n)\n<\/code><\/pre><\/p>\n","category":"Networking\n","slots":{"with(resourceName)":"","allowSlotsOnResource(pattern, slotName)":"  Creates routes for defined controller's slots. Returns RouteMatch with newly created route.\n  These slots will be available on <code>\/#{resourceName}\/:id\/#{pattern}<\/code>\n","hasOne()":" Not implemented. Returns <code>self<\/code>.\n","setup()":" Installs resource methods.\n","connectToSource(pattern, slotName)":"  Creates route for other controller's slots. Returns RouteMatch with newly created route.\n  These slots will be available on <code>\/#{resourceName}s\/#{pattern}<\/code>\n","hasMany(resourceName)":""}},"Generys":{"module":"Generys","category":"Networking\n","slots":{"futureRespones":"List of all <em>FutureResponses<\/em>s.\n","serverURL":"Returns complete URL, including protocol, port and prefix.\n","clone":"Returns Generys (singleton).\n","getSession(request, response)":"  Returns session object or creates new one for request\/response pair.\n  Cookie is being used for keeping session id, which is then used to get it from <code>Generys sessions<\/code>.\n","controllers":"List of all available controllers.\n","loadConfig()":" Loads configuration file for current environment.\n","routes":"List of all available routes.\n","serve()":" Call this method to fireup Generys.\n","webSockets":"List of all open <em>WebSocket<\/em>s.\n","renderResponse(request, response)":"  Passes handling to Dispatcher. This method is called by HttpServer, therefore not for end users.\n","version":"Returns version number of running Generys instance.\n","formatters":"List of all available <em>ReponseFormatter<\/em>s.\n","sessions":"Hold session object\n","config":"Object holding configuration.\n"}},"WebSocket":{"module":"Generys","description":"Object for working with WebSocket specification.\n","category":"Networking\n","slots":{"resource":"Path at which connection has been established. (URL path, set automatticaly from <code>Controller createWebSocket<\/code> to the path of request).\n","setHandler(handler)":" Sets <code>handler<\/code> slot and handler's <code>socket<\/code> slot.\n","close()":" Closes socket and removes <code>self<\/code> from <code>Generys webSockets<\/code>.\n","with(name, httpRequest, httpResponse)":" Creates new WebSocket instance.\n","requestHeaders":"Headers of the request, as given by Volcano.\n","verifyHeaders":"Checks if request contains all headers defined by WebSocket specification. Returns <code>false<\/code> if not.\n","channel":"Channel to which <code>self<\/code> is subscribed to (if any).\n","responseHeaders":"Headers which will be sent to client during handshake.\n","origins":"List or string of allowed origins of requests. Defaults to \"*\" (all requests accepted)\n","handshake()":" Performs WebSocket handshake.\n","socket":"Actual Socket with the client.\n","handshaked":"<code>true<\/code> if WebSocket handshake has been completed, <code>false<\/code> otherwise.\n","verifyOrigin(origin)":" Checks if requests origin is allowed.\n","patchResponse(response)":" Disables Volcano from closing the socket.\n","name":"Name of the connection. It has to be unique.\n","listen()":" Internal method which acts on data received by client.\n","send(data)":" Sends data to the client. Returns <code>self<\/code>.\n","handler":"WebSocketHandler object whose slots will be called on certain events.\n"}},"WebSocketHandler":{"module":"Generys","description":"<p>Object whose methods are called from WebSocket when connection is established, authenticated, disconnected or when an message is received.<\/p>\n<p>Example:\n<pre><code>\nChatWebSocketHandler := WebSocketHandler clone do(\n  authenticate := method(sessionId,\n    super(authenticate(sessionId)) ifTrue(\n      self chatController := ChatController clone setSession(self session)\n      self socket send({authDetails: true, user: self session user} asJson)))\n\n  processMessage := method(msg,\n    self chatController post(msg[\"body\"]))\n)\n<\/code><\/pre><\/p>\n","category":"Networking\n","slots":{"authenticate(sessionId)":"    <p>Method called when authentication cookie arrives. Returns <code>true<\/code> if authentication succeeds.<\/p>\n    <p>If you plan on overwriting this slot remember to call <code>super(authenticate(sessionId))<\/code><\/p>\n","socket":"Holds WebSocket object.\n","isAuthenticated":"Shows if the client has already sent authentication cookie.\n","handleSocketConnect":"Method which is called once WebSocket connection is established.\n","handleSocketClose":"Method which will be called when WebSocket connection is closed.\n","session":"Session object.\n","proccessMessage(message)":"  Method wwhich will be called when new message arrives. First argument will be parse JSON message (Map).\n","processData(data)":"  <p>Method which is directly called from WebSocket when data arrives.\n  This method then, if user is authenticated calls <code>WebSocketHandler proccessMessage()<\/code>\n  or <code>WebSocketHandler authenticate()<\/code> otherwise.\n  <\/p>\n  <p>It is recommended that if you'll have to overwrite this slot,\n  that you do it after authentication happens (unless the authentication proccess is what you're changing).<\/p>\n"}},"Channel":{"module":"Generys","description":"Channel provides seamless integration of FutureResponse and WebSocket implementations.\n","category":"Networking\n","slots":{"subscribe(subscriber)":" Adds subscriber to the channel. Subscriber can be FutureResponse or WebSocket object. Returns <code>subscriber<\/code>.\n","send(message, excludeList)":"  <p>Send message to all subscribers. Returns <code>message<\/code>.<\/p>\n  <p><code>excludeList<\/code> can contain list of subscribers (their <code>name<\/code> properties) to which message won't be sent.<\/p>\n","unsubscribe(subscriber)":" Removes subscriber from self. Returns <code>self<\/code>.\n","streamFor(subscriberName)":" Returns FutureResponse or WebSocket with provided name\n"}},"FutureResponse":{"module":"Generys","description":"FutureResponse is an <em>class<\/em> for working with HTTP pooling.\n","category":"Networking\n","slots":{"finish()":" Flushes the data and closes socket.\n","close()":" Closes socket and removes <code>self<\/code> from <code>Generys futureResponses<\/code>.\n","closeSocket()":" Closes only socket.\n","send(message)":" Appends message to the queue.\n","flush()":" Calls <code>Generys prepareData<\/code> and writes the data to the client.\n","prepareData()":" Converts data to JSON array and empties queue. Returns JSON string.\n"}},"CouchDocTemplate":{"module":"Generys","description":"CouchDocTemplate is a simple ORM for CouchDB documents.\n<pre><code>\nIceCream := CouchDocTemplate setup(\n  property(\"name\")\n  property(\"flavours\")\n  property(\"colours\")\n  property(\"price\")\n  timestamps\n  \n  docProto do(\n    before(\"create\", method(doc,\n      (\"We've got new Ice Cream!\" .. doc[name]) println))\n    \n    is := method(colour,\n      self[\"colours\"] contains(colour))\n    \n    shouldBe := method(colour,\n      self[\"colours\"] appendIfAbsent(colour); self)\n  )\n)\n\nIo> chocolate := IceCream create({\n  _id: \"chocolate\",\n  name: \"Chocolate\",\n  flavours: [\"chocolate\"],\n  colours: [\"brown\"],\n  price: 12.20})\nWe've got new ice cream! Chocolate!\n==> IceCream_0xfeed4beed:\n...\nIo> chocolate id\n==> \"random-uuid-string-(for-real-,-not-kidding)\"\nIo> chocolate is(\"green\")\n==> false\nIo> chocolate shouldBe(\"green\")\n==> IceCream_0xfeed4beef:\n...\nIo> chocolate save\nIo> IceCream[\"chocolate\"] == chocolate\n<\/code><\/pre>\n","category":"Networking\n","slots":{"create(properties)":" Creates new CouchDoc and creates it in database.\n","done()":" If you're not using <code>CouchDocTemplate setup()<\/code> make sure you call this method after you've defined CouchDocTemplate and all the properties.\n","setup()":" Use this method when defining CouchDocTemplate.\n","docProt":"Slots added to his object will be available to all documents created from this template.\n","at(id)":" Returns CouchDoc with <code>docProto<\/code> methods.\n","timestamps()":" Adds <em>created_at<\/em> and <em>updated_at<\/em> properties, as well as listeners to template.\n","squareBrackets(id)":" Alias for <code>CouchDocTemplate at()<\/code>.\n","new(properties)":" Creates new CouchDoc and sets <em>ioType<\/em> property.\n","property(propertyName)":" Adds property to template. No magic for now.\n"}}},"DistributedObjects":{"DOServer":{"module":"DistributedObjects","description":"An experimental distributed objects server. Example;\n<pre>\nTest := Object clone\nTest test := method(v, \n\twrite(\"got test '\", v, \"'\\n\")\n\treturn List clone append(1)\n)\n\ndoServer := DOServer clone\ndoServer setRootObject(Test clone)\ndoServer setPort(8456)\ndoServer start\n<\/pre>\n","category":"Networking\n","slots":{"setRootObject(anObject)":" Sets the root object which incoming messages will be send to.\n"}},"DOConnection":{"module":"DistributedObjects","description":"The DOConnection object is usefull for communicating with remote servers in a way that makes it look just like the sending of local messages. Proxies are automatically created on either side for passed objects, with the exception of strings and numbers, which are passed by value. Example:\n<pre>\ncon := DOConnection clone setHost(\"127.0.0.1\") setPort(8456) connect\nresult := con serverObject test(1)\nwriteln(result)\nr := result at(0)\nwriteln(r)\nr := result at(1)\nwriteln(r)\n<\/pre>\n\nImplementation Notes:\n<p>\n\nThe format of the Distributed Objects message is a list of NullCharacter\nterminated strings in one of these two formats:\n<p>\nSend message format:\n\n<pre>\ns NullCharacter targetId NullCharacter messageName NullCharacter argCount NullCharacter argType NullCharacter argValue NullCharacter (next arg type and value, etc)\n<\/pre>\n\nReply message format:\n\n<pre>\nr NullCharacter argType NullCharacter argvalue NullCharacter\n<\/pre>\n\nIf the argument is not a String, Number or nil then:\nIf it is local to the sender, the type is RemoteObject.\nIf it is a proxy to a remote object, the type is LocalObject.\n\nThis isn't optimized yet.\n","category":"Networking\n","slots":{"close":"Close the connection, if it is open. Returns self.\n","port":"Returns the port.\n","setPort(portNumber)":" Sets the port number to connect to. Returns self.\n","host":"Returns the host ip.\n","serverObject":"\tA handle to the remote DOServer's root object. Returns result from server or an Error, if one occurs.\n","setHost(ipString)":" Sets the host ip to connect to. Returns self or an Error, if one occurs.\n","connect":"Connect to the remote DOServer. Returns self or an Error, if one occurs.\n"}},"DOProxy":{"module":"DistributedObjects","category":"Networking\n","slots":{}},"MDOConnection":{"module":"DistributedObjects","description":"A Minimal Distributed Objects connection. Example;\n<pre>\ndateServerCon := MDOConnection clone setHost(\"127.0.0.1\") setPort(8123) connect\nwriteln(\"date from date server: \", Date fromNumber(dateServerCon currentDate))\ndateServerCon close\n<\/pre>\n\nSee the docs for MDOServer for the DateServer code.\n<p>\nA MDOConnection will pause calling coroutines until the response is received. \nMutliple requests can be sent before a single request returns if they are sent \nfrom separate coroutines.\n","category":"Networking\n","slots":{}},"MDOServer":{"module":"DistributedObjects","description":"A Minimal Distributed Objects server. Example;\n<pre>\nDateServer := Object clone do(\n\tacceptedMessageNames := list(\"currentDate\")\n\tcurrentDate := method(Date clone asNumber)\n)\n\nmdoServer := MDOServer clone \nmdoServer setHost(\"127.0.0.1\")  setPort(8123) \nmdoServer setLocalObject(DateServer clone)\nmdoServer start\n<\/pre>\n","category":"Networking\n","slots":{}}},"SecureSocket":{"SecureClient":{"module":"SecureSocket","dependsOn":"Client\n","license":"BSD revised\n","copyright":"Joe Osborn, 2007\n","description":"Interface to secure network communication. \nA SecureClient is a wrapper on an OpenSSL SSL_CTX object\nand supports both TLSv1 and DTLSv1.\n","category":"Networking\n","slots":{"setCertFile(aPath)":" Sets the Certificate file. Returns self.\n","setCRLFile(aPath)":" Sets the CRL file. Returns self.\n","setKeyFile(aPath)":" Sets the key file. Returns self.\n","useTLS":"Returns useTLS value.\n","setCAFile(aPath)":" Sets the CA file. Returns self.\n","useDTLS":"Returns useDTLS value.\n","connectionToServer":"Returns connectionToServer.\n"}},"Certificate":{"module":"SecureSocket","license":"BSD revised\n","copyright":"Joe Osborn, 2007\n","description":"Read-only interface to SSL X509 certificates.\n","category":"Networking\n","slots":{"version":"Returns the version.\n","attributes":"Returns the attributes.\n","notBefore":"Returns the notBefore value.\n","issuerName":"Returns the issuerName.\n","serialNumber":"Returns the serialNumber.\n","subjectName":"Returns the subjectName.\n","notAfter":"Returns the notAfter value.\n","extensions":"Returns the extensions.\n"}},"SecureServer":{"module":"SecureSocket","dependsOn":"Server\n","license":"BSD revised\n","copyright":"Joe Osborn, 2007\n","description":"Interface to secure network communication. \nA SecureServer is a wrapper on an OpenSSL SSL_CTX object\nand supports both TLSv1 and DTLSv1.\nExample:\n\n<pre>\n\/\/...\n<\/pre>\n","category":"Networking\n","slots":{"setKeyFile(path)":" Sets the key file. Returns self.\n","setPort(aNumber)":" Sets the port on which the server will listen  for connections. Returns self.\")\n","setCertFile(path)":" Sets the certificate file. Returns self.\n","port":"Returns the port on which the server will listen for connections.\")\n","useTLS":"Returns useTLS value.\n","setCRLFile(path)":" Sets the CRL file. Returns self.\n","setCAFile(path)":" Sets the CA file. Returns self.\n","setHost(hostName)":" Sets the hostName. Returns self.\")\n","setRequiresClientCertificate(aBool)":" Sets the requires client certificate attribute. Returns self.\n","dispatchUdp":"Returns dispatchUdp value.\n","tlsWrap":"Returns tlsWrap value.\n","supportsDTLS":"Returns true if server supports DTLS, false otherwise.\n","udpRecvIP":"Returns udpRecvIP value.\n","dtlsWrap":"Returns dtlsWrap value.\n","useDTLS":"Returns useDTLS value.\n","stop":"Stops the server if it is running. Returns self.\")\n"}},"SecureSocket":{"dependsOn":"Socket\n","license":"BSD revised\n","module":"SecureSocket","category":"Networking\n","slots":{"descriptorId":"Returns descriptorId.\n","setSocketWriteLowWaterMark(numberOfBytes)":"  Sets write low water mark. Returns self.\n","setSocketReadBufferSize(numberOfBytes)":" Sets read buffer size. Returns self.\n","rawCertificate":"Returns rawCertificate.\n","asyncConnectSSL":"Performs asyncConnectSSL.\n","rawPeerCertificate":"Returns rawPeerCertificate.\n","getSocketWriteLowWaterMark":"Returns WriteLowWaterMark attribute.\n","isDatagram":"Returns isDatagram attribute.\n","setSocketWriteBufferSize(numberOfBytes)":"  Sets write buffer size. Returns self.\n","asyncUdpRead":"?\n","wantsWrite":"Returns IoSecureSocket_wantsWrite attribute.\n","setSocketReadLowWaterMark(numberOfBytes)":" Sets read low water mark. Returns self.\n","isConnected":"Returns true if socket is connected, false otherwise.\n","asyncConnectBIO":"Performs asyncConnectBIO.\n","rbioReady":"Returns rbioReady attribute.\n","rawValidate":"Performs rawValidate.\n","asyncStreamRead":"Read available data and return it.\n","ValidationFail":"Returns ValidationFail attribute as a number.\n","asyncUdpServerRead":"?\n","asyncAccept":"Accept a connection asynchronously.\n","getSocketReadLowWaterMark":"Returns ReadLowWaterMark attribute.\n","supportsDTLS":"Returns true if server supports DTLS, false otherwise.\n","asyncWrite(aSeq)":" Writes aSeq to the socket. Returns self.\n","isOpen":"Returns true if socket is open, false otherwise.\n","wantsRead":"Returns wantsRead attribute.\n","shutdown":"close the socket connection. Returns self.\n","ValidationOkay":"Returns ValidationOkay attribute as a number.\n"}}},"Volcano":{"VolcanoServer":{"slots":{},"license":"BSD revised\n","copyright":"Rich Collins 2009\n","module":"Volcano","description":"A simplified version of HttpServer\n","category":"Networking\n"}},"Beanstalk":{"Beanstalk":{"license":"BSD revised\n","module":"Beanstalk","slots":{"bury(id, pri)":" Puts a job into the \"buried\" state\n","delete(id)":" Removes a job with a given id from the server, entirely\n","touch(id)":" Allows a worker to request more time to work on a job.\n","reserve(timeout)":" Returns and reserves a job (waits until one becomes available if necessary)\n","connect(address)":" Connects to a beanstalk server. address is a \"host:port\" string, e.g., \"127.0.0.1:11300\"\n","release(id)":" Puts a reserved job back into the ready queue\n","put(body, pri, delay, ttr)":"\tInserts a job into the queue.\n\t<br \/>pri - priority, an integer < 2**32. Jobs with smaller priority values will be\n\tscheduled before jobs with larger priorities. The most urgent priority is 0;\n\tthe least urgent priority is 4294967295.\n\t<br \/>delay - an integer number of seconds to wait before putting the job in\n\tthe ready queue. The job will be in the \"delayed\" state during this time.\n\t<br \/>ttr - time to run, an integer number of seconds to allow a worker to run this job.\n"},"Aleksey":"Yeschenko, 2009\n","description":"beanstalkd is a fast, distributed, in-memory workqueue service. See http:\/\/xph.us\/software\/beanstalkd\/\n<br \/>An example from http:\/\/xph.us\/software\/beanstalkd\/:\n<br \/>First, have one process put a job into the queue:\n<pre>\nproducer := Beanstalk clone connect(\"127.0.0.1:11300\")\nproducer put(\"hello\")\n<\/pre>\n\nThen start another process to take jobs out of the queue and run them:\n<pre>\nworker := Beanstalk clone connect(\"127.0.0.1:11300\")\nloop(\n\tjob := worker reserve\n\tjob body println # prints \"hello\"\n\tjob delete\n)\n<\/pre>\nSee Beanstalk.io code and protocol description (http:\/\/github.com\/kr\/beanstalkd\/tree\/master\/doc\/protocol.txt) for details.\nBoth are short and easy to read.\n\n<br \/>Stat commands depend on <a href=\"http:\/\/github.com\/why\/syck\/tree\/a4f241be5d247853aea6127d02dbdedd8a1dd477\/ext\/io\">YAML<\/a>.\n","credits":"Aleksey Yeschenko, 2009. Default arguments and some other things taken from beanstalk-client-ruby by Keith Rarick.\n","category":"Networking\n"}},"Socket":{"Server":{"module":"Socket","description":"The Server object provides a simple interface for running a server. \nYou just need to set the port and define a handleSocket method. Here's an example of an echo server:\n\n<pre>\nEcho := Object clone\nEcho handleSocketFromServer := method(aSocket, aServer,\n  write(\"[Got echo connection from \", aSocket host, \"]\\n\")\n  while(aSocket isOpen,\n   if(aSocket read, aSocket write(aSocket readBuffer asString))\n   aSocket readBuffer empty\n  )\n  write(\"[Closed \", aSocket host, \"]\\n\")\n)\n\nwrite(\"[Starting echo server on port 8456]\\n\")\nserver := Server clone setPort(8456)\nserver handleSocket := method(aSocket,\n  Echo clone @handleSocketFromServer(aSocket, self)\n)\nserver start\n<\/pre>\n\n<b>Notes<\/b><p>\n\nIo's use of lightweight threading and select for dealing with sockets makes for \nservers that are much more efficient(both memory and cpu wise) than those written \nwith kernel threads and socket polling.\n","category":"Networking\n","slots":{"start":"\tStarts the server. This method will not return until server is stopped, \n\tso you may want to send the start message as an asynchronous message. \n\tReturns self or an Error, if one occurs.\n","port":"Returns the port on which the server will listen for connections.\n","handleSocket(aSocket)":"\tThis method is called when the server accepts a new socket. The new sockets is passed as the argument.\n\tOverride this method in your own server subclass. The default implementation raises an exception.\n","stop":"Stops the server if it is running. Returns self.\n","setHost(hostName)":" Sets the hostName. Returns self.\n","setPort(aNumber)":" Sets the port on which the server will listen  for connections. Returns self.\n"}},"EventManager":{"module":"Socket","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"\tObject for libevent (kqueue\/epoll\/poll\/select) library. \n\tUsefull for getting notifications for descriptor (a socket or file) events.\n\tEvents include read (the descriptor has unread data or timeout) and write (the descriptor wrote some data or timeout).\n\tAlso, timer and signal events are supported.\n","category":"Networking\n","slots":{"run":"Runs the EventManger loop. Does not return. Private - should only be called by resumeIfNeeded.\n","addEvent(event, descriptor, eventType, timeout)":""}},"ReadEvent":{"module":"Socket","description":"Object for read events.\n","category":"Networking\n","slots":{}},"DNSQuery":{"module":"Socket","description":"An object representing an individual DNS query.\n","category":"Networking\n","slots":{"coros":"\t\tList of coroutines paused waiting for this query.\n\t\tThese coros will be resumed when the query completes.\n","addCoro(aCoro)":" Private method that adds a coro to coros.\n","hostName":"The host name which the query will request an IP for.\n","waitOn":"Pauses the calling coroutine until the query is completed.\n","resumeCoros":"Resumes all the paused coros. <font color=red>Should this use resumeLater instead?<\/font>\n","setHostName(aSeq)":" Sets the host name for the query.\n"}},"TimerEvent":{"module":"Socket","description":"Object for timer events.\n","category":"Networking\n","slots":{}},"URL":{"license":"BSD revised\n","description The URL object is usefull for fetching web pages and parsing URLs. Example;":"<pre>\npage := URL clone setURL(\\\"http:\/\/www.google.com\/\\\") fetch\n<\/pre>\n","copyright":"Steve Dekorte, 2004\n","module":"Socket","category":"Networking\n","slots":{"with(urlString)":" Returns a new URL instance for the url in the urlString.\n","requestHeader":"\tReturns a Sequence containing the request header that will be sent.\n","fetchWithProgress(progressBlock)":"\tSame as fetch, but with each read, progressBlock is called with the readBuffer \n\tand the content size as parameters.\n","stopFetch":"\tStops the fetch, if there is one. Returns self.\n","url":"Returns url string.\n","setURL(urlString)":"\tSets the url string and parses into the protocol, host, port path, and query slots. Returns self.\n","referer":"Returns the referer String or nil if not set.\n","fetchToFile(aFile)":"\tFetch the url and save the result to the specified File object. \n\tSaving is done as the data is read, which help minimize memory usage. \n\tReturns self on success or nil on error.\n","processHttpResponse(optionalProgressBlock)":" Private method that processes http response.\n","test":"Private test method.\n","setResponseHeaderString(headerString)":" Private method that parses the responseHeaders.\n","fetchHttp(optionalProgressBlock)":" Private method that fetches an http url.\n","clear":"Private method to clear the URL's parsed attributes.\n","parse":"Private method to parse the url.\n","escapeString(aString)":"\tReturns a new String that is aString with the appropriate characters replaced by their URL escape codes.\n","headerBreaks":"Private method to connect to the host and write the header.\n","setRequest(requestString)":" Private method to set the url request.\n","post(parameters, headers)":"\tSends an http post message. If parameters is a Map, it's key\/value pairs are \n\tsend as the post parameters. If parameters is a Sequence or String, it is sent directly.\n\tAny headers in the headers map are sent with the request.\n\tReturns a sequence containing the response on success or an Error, if one occurs.\n","unescapeString(aString)":"\tReturns a new String that is aString with the URL escape codes replaced by the appropriate characters.\n","fetchRaw":"Fetch and return the entire response. Note: This may have problems for some request times.\n","setReferer(aString)":" Sets the referer. Returns self.\n","fetch":"Fetches the url and returns the result as a Sequence. Returns an Error, if one occurs.\n","openOnDesktop":"Opens the URL in the local default browser. Supports OSX, Windows and (perhaps) other Unixes.\n"}},"DNS":{"module":"Socket","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"Utility methods related to Domain Name Service lookups.\n","category":"Networking\n","slots":{"localNameServersIPs":"Returns a list of local name server IPs as a list of Sequences. Works on OSX, Unix, Windows.\n","hostNameAndIPforDNSResponsePacket(dnsResponsePacketSeq)":"Dissasembles the given dnsResponsePacketSeq and returns a list object containing\nthe hostName and IP or an error string on error.\n","dnsQueryPacketForHostName(hostNameSeq)":"Assembles a DNS query packet for the given host name and returns it in a Sequence.\n"}},"Host":{"license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","module":"Socket","category":"Networking\n","slots":{"setName(aString)":" Set's the host name. Return self.\n","name":"Returns name.\n","address":"\tReturns the ip address. A DNS lookup is done in the background if the \n\taddress is not already known. Returns an error on lookup failure.\n"}},"IPAddress":{"slots":{"setHostName(hostName)":"\tTranslates hostName to an IP using asynchronous DNS and \n\tsets the host attribute. Returns self.\n"},"license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","module":"Socket","description":"Object representation of an Internet Protocol Address.\n","category":"Networking\n"},"SignalEvent":{"module":"Socket","description":"Object for signal events.\n","category":"Networking\n","slots":{}},"DNSServer":{"module":"Socket","description":"An object representing a DNSServer which DNS requests can be sent to.\n","category":"Networking\n","slots":{"host":"The host name (usually an IP) for the DNSServer.\n","ipForHostName(hostName, timeout)":"\tSends a request to the DNS server, waits for a response and returns it. Will try 3 times if there are timeouts.\n\tReturns the IP (as a Sequence) if successful, raises an exception otherwise.\n","setHost(aSeq)":" Sets the host name for the DNSServer.\n"}},"EvRequest":{"slots":{},"license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","module":"Socket","description":"Networking Event.\n","category":"Networking\n"},"Event":{"slots":{"handleEvent(timeout)":"","waitOnOrExcept(timeout)":"","category":"Networking\n"},"license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","module":"Socket","description":"Networking Event.\n","category":"Networking\n"},"EvConnection":{"slots":{},"license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","module":"Socket","description":"Networking Event.\n","category":"Networking\n"},"WriteEvent":{"module":"Socket","description":"Object for write events.\n","category":"Networking\n","slots":{}},"Socket":{"module":"Socket","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"Interface to network communication.\nSockets will auto yield to other coroutines while waiting on a request.\nAll blocking operations use the timeout settings of the socket.\nReads are appended to the socket's read buffer which can \nbe accessed using the readBuffer method.\n\nExample:\n\n<pre>\t\nsocket := Socket clone setHost(\"www.yahoo.com\") setPort(80) connect\nif(socket error) then( write(socket error, \"\\n\"); exit)\n\nsocket write(\"GET \/\\n\\n\")\n\nwhile(socket read, Nop)\nif(socket error) then(write(socket error, \"\\n\"); exit)\n\nwrite(\"read \", socket readBuffer length, \" bytes\\n\")\n<\/pre>\n","category":"Networking\n","slots":{"writeListMessage(aList)":" A shortcut for writeMessage(aList asEncodedList).\n","acceptTimeout":"Returns the length of time in seconds for accept timeouts on the socket.\n","descriptorId":"Returns the socket's file descriptor id as a Number.\n","setSocketWriteLowWaterMark(numberOfBytes)":"\tSets the write low water mark for the socket. Returns self on success or nil on error.\n","setSocketReadBufferSize(numberOfBytes)":" Sets the read buffer size for the socket. Returns self on success or nil on error.\n","getSocketReadLowWaterMark":"\tReturns the read low water mark for the socket on success or nil on error.\n","asyncStreamRead(aSeq, readSize)":"\tReads up to readSize number of bytes into aSeq if data is available. \n\tReturns self immediately if successful. Returns an error object on Error. Returns nil if the socket is disconnected.\n","udpRead(ipAddress, numBytes)":"\tWaits for and reads numBytes of udp data from the specified ipAddress into the socket's readBuffer.\n\tReturns self on success or an Error object on error.\n","udpOpen":"Opens the socket in UDP (connectionless) mode. Returns self.\n","setSocketWriteBufferSize(numberOfBytes)":" Sets the write buffer size for the socket. Returns self on success or nil on error.\n","streamOpen":"Opens the socket in stream mode. Returns self.\n","readMessage":"\tEmpties the readBuffer and reads a 4 byte uint32 in network byte order. \n\tThis number is the number of bytes in the message payload which are \n\tthen read into the socket's readBuffer. The readBuffer is returned.\n","setHost(hostNameOrIpString)":" Set the host for the socket. Returns self on success, an Error object otherwise.\n","setSocketReadLowWaterMark(numberOfBytes)":"\tSets the read low water mark for the socket. Returns self on success or nil on error.\n","udpWrite":"Same as asyncUdpWrite.\n","asyncUdpWrite(ipAddress, aSeq, startIndex, readSize)":"\tWrites readsize bytes from aSeq starting at startIndex to ipAddress. \n\tReturns self immediately if successful. Returns an error object on Error. Returns nil if the socket is disconnected.\n","asyncStreamWrite(aSeq, start, writeSize)":"\tWrites the slice of aSeq from start to start + writeSize to the socket.\n\tReturns self immediately if successful, otherwise closes the socket. \n\tReturns an error object on Error. \n\tReturns nil if the socket is disconnected.\n","bytesPerWrite":"Returns number of bytes to write per write call.\n","bytesPerRead":"Returns number of bytes to read per read call.\n","readListMessage":"A shortcut for List fromEncodedList(socket readMessage).\n","asyncUdpOpen":"Submits an async request to open the socket in UDP mode and returns self immediately or an Error object on error.\n","readBytes(numBytes)":"\tReads the socket until its readBuffer is numBytes long, then returns a Sequence\n\tcontaining the first numBytes of readBuffer's contents and clips that section from the readBuffer.\n","asyncAccept(ipAddressObject)":" Immediately returns a socket for an connection if one is available or nil otherwise. Returns an Error object on error.\n","setAcceptTimeout(seconds)":" Sets the length of time in seconds for accept timeouts on the socket. Returns self.\n","asyncListen":"Listens to the socket and returns self immediately or an Error object on error.\n","setHost(hostName)":"Translates hostName to an IP using asynchronous DNS and sets \nthe host attribute. Returns self.\n","getSocketWriteLowWaterMark":"\tReturns the write low water mark for the socket on success or nil on error.\n","setReadTimeout(seconds)":" Sets the length of time in seconds for read timeouts on the socket. Returns self.\n","host":"Returns the host for the socket.\n","serverOpen":"\tOpens the socket as a stream, binds it to it's ipAddress and calls asyncListen to prepare the socket to accept connections.\n\tReturns self on success or an Error object on error.\n","streamReadNextChunk(optionalProgressBlock)":"\tWaits for incoming data on the socket and when found, reads any available data and returns self. \n\tReturns self on success or an Error object on error or timeout.\n","setPort(portNumber)":" Sets the port number for the socket, returns self.\n","isValid":"Returns true if the socket is in valid state, closes the socket and returns false otherwise.\n","connect":"Connects to the socket's host. Returns self on success or an Error object on error.\n","asyncConnect(ipAddressObject)":" Connects ti the given IPAddress and returns self or an Error object on error.\n","port":"Returns the port number for the socket.\n","asyncBind":"Binds the socket and returns self immediately or an Error object on error.\n","close":"Closes the socket and returns self. Returns nil on error.\n","setBytesPerWrite(numberOfBytes)":" Sets number of bytes to write per write call. Returns self.\n","setBytesPerRead(numberOfBytes)":" Sets number of bytes to read per read call. Returns self.\n","errorNumber":"Returns the socket error number for the last error.\n","setNoDelay":"\tSets the socket to be no-delay. Returns self on success or nil on error.\n","setWriteTimeout(seconds)":" Sets the length of time in seconds for write timeouts on the socket. Returns self.\n","streamWrite(buffer, optionalProgressBlock)":"\tWrite's buffer to the socket. \n\tIf optionalProgressBlock is supplied, it is periodically called with the number of bytes written as an argument.\n\tReturns self on success or an Error object on error.\n","streamRead(numberOfBytes)":"\tReads numberOfBytes from the socket into the socket's readBuffer. \n\tReturns self when all bytes are read or an Error object on error.\n","errorDescription":"Returns a description of the last error on the socket as a string.\n","isOpen":"Returns true if the socket is open, false otherwise.\n","connectTimeout":"Returns the length of time in seconds for connect timeouts on the socket.\n","writeTimeout":"Returns the length of time in seconds for write timeouts on the socket.\n","readTimeout":"Returns the length of time in seconds for read timeouts on the socket.\n","writeMessage(aSeq)":"\tWrites a 4 byte uint32 in network byte order containing the size of aSeq. \n\tThen writes the bytes in aSeq and returns self.\n","writeFromBuffer(optionalProgressBlock)":"\tWrite's the contents of the socket's writeBuffer to the socket. \n\tIf optionalProgressBlock is supplied, it is periodically called with the number of bytes written as an argument.\n\tReturns self on success or an Error object on error.\n","asyncUdpRead(ipAddress, aSeq, readSize)":"\tReads up to readSize number of bytes from ipAddress into aSeq if data is available. \n\tReturns self immediately if successful. Returns an error object on Error. Returns nil if the socket is disconnected.\n","ipAddress":"Returns the IpAddress object for the socket.\n","readUntilSeq(aSequence)":"\tReads the socket until it's readBuffer contains aSequence, then returns a Sequence\n\tcontaining the readBuffer's contents up to (but not including) aSequence and clips that section from the readBuffer.\n","udpReadNextChunk(ipAddress)":"\tWaits to receive UDP data from the specified ipAddress. \n\tAs soon as any data is available, it reads all of it into the socket's readBuffer.\n\tReturns self on success or an Error object on error.\n","asyncStreamOpen":"Submits an async request to open the socket in stream mode and returns self immediately or an Error object on error.\n","isStream":"Returns true if the socket is a stream, false otherwise.\n","serverWaitForConnection":"\tWaits for a connection or timeout. When a connection is received, this method returns the connection socket. \n\tAn Error object is returned on timeour or error.\n","streamReadWhileOpen":"\tReads the stream into the socket's readBuffer until it closes.\n\tReturns self on success or an Error object on error.\n","setConnectTimeout(seconds)":" Sets the length of time in seconds for connect timeouts on the socket. Returns self.\n","appendToWriteBuffer(aSequence)":"\tAppends aSequence to the write buffer if it is non-nil. Returns self.\n","setIpAddress(ipAddressObject)":" Sets the ipAddress for the socket. Returns self. The setHost() method should generally be used to set the host instead of this method.\n"}}},"CGI":{"CGI":{"module":"CGI","license":"BSD revised\n","Steve":"Dekorte, 2004\n","description":"CGI supports accessing CGI parameters passed in environment variable or standard input by a web servers like Apache.Example use:\n<pre>\n#!.\/ioServer\n\ncgi = CGI clone\n\nredirect = cgi getParameters at(\"redirurl\")\nif (redirect and redirect != \"\",\n\tredirect clipAfterStartOfSeq(\"\\r\")\n\tredirect clipAfterStartOfSeq(\"\\n\")\n\tcgi redirect(redirect)\n\tSystem exit(0)\n )\n\ncgi header(\"Content-type\", \"text\/html\")\n\ncgi write(\"&lt;html&gt;&lt;head&gt;&lt;title&gt;test&lt;\/title&gt;&lt;body&gt;\")\ncgi write(\"GET Parameters:\")\ncgi getParameters foreach(k, v,\n\tcgi write(k .. \" = \" .. v .. \",\"))\n)\n\ncgi write(\"POST Parameters:\")\ncgi postParameters foreach(k, v,\n\tcgi write(k .. \" = \" .. v .. \",\"))\n)\n\ncgi write(\"COOKIES:\")\ncgi cookies foreach(k, v,\n\tcgi write(k .. \" = \" .. v .. \",\")\n)\n<\/pre>\n","category":"Networking\n","slots":{"decodeUrlParam(aString)":" Returns a URL decoded version of aString.\n","contentType":"CONTENT_TYPE from web server\n","maxPostSizeExceeded":"Returns true if the POST data exceeds a set maxPostSize\n","pathTranslated":"PATH_TRANSLATED from web server\n","requestMethod":"GET, POST, PUT, etc\n","isInWebScript":"Checks to see if this is being called within a CGI request or from the command-line (testing).  Simply checks for System getEnvironmentVariable(\"GATEWAY_INTERFACE\")\n","queryString":"QUERY_STRING from web server\n","scriptName":"SCRIPT_NAME from web server\n","status(statusCode)":"\tNumeric status code to send to the client.  \n\tNormally, the server will figure this out on its own, but this allows handling 404s and such.\n","encodeUrlParam(aString)":" Returns a URL encoded version of aString.\n","cookies":"Returns a Map of cookies provided by the client\n","contentLength":"CONTENT_LENGTH from web server - Size of POST Data\n","pathInfo":"PATH_INFO from web server\n","httpHeader(name)":" Fetch a header supplied by the client, such as 'referer'\n","maxPostSize":"Maximum size in bytes, to process from user submitted data.  Data greater than this will result in a nil postData slot\n","remoteHost":"REMOTE_HOST from web server - User's host (often blank)\n","postParameters":"Parses the POST data, multipart and urlencoded.  Returns a map of submitted variables.\nFor uploaded files, an Object is returned with these slots:\n<pre>\nfileName\ncontent (raw content of file as Sequence)\ncontentType\ncontentEncoding\nsize (in characters\/bytes)\nasString (pretty string of name, type, size)\n<\/pre>\n","header(name, value, sendMultiple)":"\tAdd a header to the output, may only be called before write() is called.  \n\tOne of each header will be send unless sendMultiple is true\n","write(string, [string...])":" Send content for the body of the response\n","postData":"The raw post data sent to the script.  Only set if getEnvironmentVariable(\"REQUEST_METHOD\") asLowercase == \"post\".\n","getParameters":"Parses the QUERY_STRING environment variable and returns a Map containing key\/value query value pairs.  For testing, a QUERY_STRING can be passed to standard in, one line will be read\n","setCookie(name, value, expiresDate, domain, path, secureBool)":"\tSets a cookie, keep in mind this will not be available in cookies() until they next visit the site.  \n\tParameters other than name and value are optional.\n","requestParameter(name)":" Lazy developer's helper funtion. Retrieves a value from GET or POST, POST first\n","redirect(url)":" Send a location: and redirect the user.  May only be called before write() is called.  It is left to the caller to stop any further processing.\")\n","remoteAddress":"REMOTE_ADDR from web server - User's IP\n"}}}},"Bridges":{"Python":{"Python":{"module":"Python","license":"BSD revised\n","copyrigth":"Aslak Gronflaten, 2006\n","credit":"Based on code by Steve Dekorte\n","description":"This object provides access the world of python.\n","category":"Bridges\n","slots":{}}},"ObjcBridge":{"ObjcBridge":{"license":"Revised BSD\n","copyright":"2003, Steve Dekorte\n","module":"ObjcBridge","category":"Bridges\n","slots":{"debug":"On Turns debugging off. Returns self\n","classNamed(aSeq)":" Returns a proxy to the ObjC class with the specified name or nil if no match is found.\n","main":"Calls NSApplicationMain().\n","autoLookupClassNamesOn":"Removes the ObjC forward method from the Lobby. Returns self.\n"}}},"CFFI":{"CFFIPointer":{"module":"CFFI","license":"BSD revised\n","copyright":"2006 Trevor Fancher. All rights reserved.\n","description":"An Io interface to C\n","category":"Bridges\n","slots":{}},"CFFIDataType":{"module":"CFFI","license":"BSD revised\n","copyright":"2006 Trevor Fancher. All rights reserved.\n","description":"An Io interface to C\n","category":"Bridges\n","slots":{}},"CFFILibrary":{"module":"CFFI","license":"BSD revised\n","copyright":"2006 Trevor Fancher. All rights reserved.\n","description":"An Io interface to C\n","category":"Bridges\n","slots":{}},"CFFIFunction":{"module":"CFFI","license":"BSD revised\n","copyright":"2006 Trevor Fancher. All rights reserved.\n","description":"An Io interface to C\n","category":"Bridges\n","slots":{}},"CFFI":{"license":"New BSD license\n","copyright":"Trevor Fancher, 2006\n","module":"CFFI","category":"Bridges\n","slots":{}}}},"Graphics":{"Font":{"Font":{"module":"Font","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"The Font object can be used to load and render TypeTrype fonts. Example use;\n<pre>\t\n\/\/ within a GLUT display callback...\n\ntimesFont = Font clone open(\\\"times.ttf\\\")\nif (timesFont error, write(\\\"Error loading font: \\\", timesFont error, \\\"\\n\\\"); return)\ntimesFont setPointSize(16)\nglColor(0,0,0,1)\ntimesFont draw(\\\"This is a test.\\\")\n<\/pre>\t\n\n<b>Rendering fonts using OpenGL textures<\/b>\n<p>\nSmaller fonts (those having a point size around 30 or smaller, depending on the font) will automatically be cached in and rendered from a texture. This technique is very fast and should support rendering speeds as fast (or faster than) those of typical desktop font rendering systems. Larger font sizes(due to texture memory constraints) will be rendered to a pixelmap when displayed. Thanks to Mike Austin for implementing the font texturing system.\n","category":"Graphics\n","slots":{"open(optionalPath)":"\tOpens the font. Sets path using optionalPath if supplied. Returns self.\n","stringIndexAtWidth(aString, startIndex, width)":"\tReturns the max index of the character in String (starting at startIndex) \n\tthat fits within width.\n","widthOfCharacter(aNumber)":"\tReturns the width of the character specified by aNumber in the receiver's font.\n","drawString(aString, optionalStartIndex, optionalEndIndex)":"\tDraws aString using the optional start and end indexes, if supplied. Returns self.\n<p>\nNote; Fonts are draw as RGBA pixel maps. These blending options are recommended:\n<pre>\t\nglEnable(GL_BLEND)\nglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\n<\/pre>\n","isTextured":"\tReturns true if the font is being cached in and rendered from a texture, false otherwise.\n","setPath(aString)":"\tSets the Font path. Returns self.\n","path":"\tReturns the Font path.\n","setPixelSize(aNumber)":"\tSets the size of the font in pixels. Returns self.\n","pixelSize":"\tReturns the font's pixelSize.\n","widthOfString(aString)":"\tReturns a Number with the width that aString would render \n\tto with the receiver's current settings.\n","error":"\tReturns the current error string or nil if there is no error.\n","pixelHeight":"\tReturns the height of the font measured in pixels.\n"}}},"GLFW":{"GLFW":{"license":"BSD revised\n","copyright":"Joel de Vahl, 2006\n","module":"GLFW","category":"Graphics\n","slots":{}}},"Cairo":{"CairoLinearGradient":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoMatrix":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoSolidPattern":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoExtents":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoSurfacePattern":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoPath":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoGradient":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoFontExtents":{"license":"BSD revised\n","copyright":"Trevor Fancher, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoImageSurface":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoContext":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoPathElement":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoScaledFont":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoSurface":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoTextExtents":{"license":"BSD revised\n","copyright":"Trevor Fancher, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoFontFace":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"Cairo":{"module":"Cairo","license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","description":"Cairo is a 2D graphics library. http:\/\/cairographics.org\/\n","category":"Graphics\n","slots":{}},"CairoFontOptions":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoRadialGradient":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoRectangle":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoPattern":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}},"CairoGlyph":{"license":"BSD revised\n","copyright":"Daniel Rosengren, 2007\n","module":"Cairo","category":"Graphics\n","slots":{}}},"OpenGL":{"GLUQuadric":{"license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","module":"OpenGL","category":"Graphics\n","slots":{}},"GLU":{"license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","module":"OpenGL","category":"Graphics\n","slots":{"gluScaleImage(formatIn, widthIn, heightIn, typeIn, dataSeqIn, widthOut, heightOut, typeOut, dataSeqOut)":"\tScales the image data in dataSeqIn and outputs the result to dataSeqOut.\n\tReturns error code as a Number.\n"}},"GLScissor":{"license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","module":"OpenGL","category":"Graphics\n","slots":{}},"GLApp":{"module":"OpenGL","category":"Graphics\n","slots":{}},"OpenGL":{"license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","module":"OpenGL","category":"Graphics\n","slots":{}},"GLUT":{"license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","module":"OpenGL","category":"Graphics\n","slots":{}}},"Image":{"Image":{"module":"Image","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"The Image object can read and draw images and provide the image \ndata as a buffer. Example use;\n<pre>\t\nimage = Image clone open(\"curly.png\")\nimage draw\nimage scaleTo(image width \/ 2, image height \/ 2)\nimage save(\"curly.tiff\")\n<\/pre>\t\nWhen loading an attempt will be made to convert the image into whichever \nof the following formats it is closest to: L8, LA8, RGB8, RGBA8.\n<p>\nCurrently supported formats include PNG(which supports alpha), JPG and TIFF.\n","category":"Graphics\n","slots":{"encodingQuality":"\tReturns the encodingQuality setting.\n","resizedTo(newWidth, newHeight)":" Scales the image up to newWidth x newHeight.  Returns the newly scaled image.\n","averageColor":"\tReturns the average RGB color of all pixels in the image.\n","setDecodingHeightHint(width)":"\tSets the decoding height hint. Returns self.\n","crop(x, y, width, height)":"\tCrops the image to the specified values. Returns self.\n\tRaises an exception on error.\n","flipX":"\tFlips the image on the horizonal plane (left\/right mirror). Returns self.\n","height":"\tReturns the image hieght.\n","addAlpha":"\tAdds an opaque alpha component if the image is in RGB format and does not already contain one.  Returns self.\n","baselineHeight":"\tReturns the pixel height (relative to the bottom of the image) which first contains a non-white pixel or -1 if\n\tno baseline is found.\n","isRGB8":"\tReturns true if the receiver is in RGB8 format, false otherwise.\n","isLA8":"\tReturns true if the receiver is in LA8 (8bit Luminance-Alpha) format, false otherwise.\n","isL8":"\tReturns true if the receiver is in L8 (8bit Luminance) format, false otherwise.\n","setDecodingWidthHint(width)":"\tSets the decoding width hint. Returns self.\n","resizedTo(width, height)":"\tReturns a new image of the receiver resized to the given width and height.\n\tRaises an exception on error.\n","decodingHeightHint":"\tReturns the decoding height hint.\n","decodingWidthHint":"\tReturns the decoding width hint.\n","setDataWidthHeightComponentCount(aSequence, width, height, componentCount)":"\tSets the image data and it's parameters. Returns self.\n","bounds(cutoff)":"\tReturns an object continaing the bounds of the image. Cutoff is max bound color value for any color component.\n\tIf it is negative, it is the min bound color value.\n","componentCount":"\tReturns the number of color components in the receiver as a Number.\n","flipY":"\tFlips the image on the vertical plane (top\/bottom mirror). Returns self.\n","isRGBA8":"\tReturns true if the receiver is in RGBA8 format, false otherwise.\n","width":"\tReturns the image width.\n","path":"\tReturns the image path.\n","setEncodingQuality(aNumber)":"\tSets the image encoding quality (range is 0.0 - 1.0, 1.0 with being the highest).\n","save(optionalPathString)":"\tSets the path to optionalPathString if provided and saves the image \n\tin the format specified by the path extension. Returns self on success, nil on failure.\n","data":"\tReturns a Buffer primitive containing the image data (loading it first if needed). \n\tManipulating this data will effect what is drawn when the receiver's draw method is called.\n","open(optionalPathString)":"\tSets the path to optionalPathString if provided and opens the image file. \n\tReturns self on success, Nil on failure.\n","removeAlpha":"\tRemoves the alpha component if the image contains one.  Returns self.\n","error":"\tReturns a String containing the current error or nil if there is no error.\n","setPath(aString)":"\tSets the image path. Returns self.\n"}}}},"Audio":{"SoundTouch":{"SoundTouch":{"module":"SoundTouch","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"\tUsed to change the tempo and\/or pitch of an audio stream. \n\tInput and output are in 32 bit floats in 2 channels at a rate \n\tof 44100 samples per second.\n","category":"Audio\n","slots":{"start":"\tCleans up SoundTouch.\n","setTempo(aNumber)":"\tSets the tempo.\n","setTempoChange(aNumber)":"\tSets the tempo change amount.\n","inputBuffer":"\tReturns the input buffer.\n","setChannels(aNumber)":"\tSets the number of input channels.\n","setPitchSemitones(aNumber)":"\tSets the output increase in pitch semitones.\n","process":"\tProcesses a chunk of the inputBuffer and appends the results to the outputBuffer.\n","setSampleRate(aNumber)":"\tSets the input sample rate in Hz.\n","outputBuffer":"\tReturns the output buffer.\n"}}},"TagLib":{"TagLib":{"module":"TagLib","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"Used to set meta data tags on the following audio formats:\n<pre>\nape\nflac\nmp3\nmpc\nmpeg\nogg\n<\/pre>\nSupports reading and writing the following attributes:\n<pre>title\nartist\nalbum\nyear\ntrack\ngenre \n<\/pre>\nAnd reading the attributes:\n<pre>\nbitRate\nsampleRate\nchannels\nlength\n<\/pre>\n\nExample use (load and modify a track genre):\n\n<pre>\nt := TagLib clone setPath(\"foo.mp3\") load\nwriteln(\"genre = \", t genre)\nt setGenre(\"ambient\")\nt save\n<\/pre>\n","category":"Audio\n","slots":{"save":"\tSaves the tag settings and returns self.\n","setPath(aSeq)":" Sets the path to the file.\n","path":"Returns the path to the file.\n","load":"\tLoads tag data from the file specified in the path slot. Returns self.\n"}}},"Ogg":{"OggStreamState":{"module":"Ogg","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libogg ogg_stream_state object.\n","category":"Audio\n","slots":{"clear":"\tClears the storage within the Ogg stream.\n","setSerialNumber":"\tSets the serial number for this stream.\n","pagein(page)":"\t  Submits a complete page to the stream layer.\n","packetout(packet)":"\t  Outputs a packet to the codec-specific decoding engine.\n","reset":"\t  Resets the stream status to its initial position.\n","packetpeek(packet)":"\t  Provides access to the next packet in the bitstream\n\t  without advancing decoding.\n","eos":"\t  Indicates whether we are at the end of the stream.\n"}},"OggPage":{"module":"Ogg","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libogg ogg_page object.\n","category":"Audio\n","slots":{"continued":"\tIndicates if the current page contains a continued\n        packet from the last page.\n","eos":"\tIndicates if the current page is the end of the stream.\n","pageno":"\tReturns the sequential page number for this page.\n","granulepos":"\tReturns the precise playback location of this page.\n","packets":"\tReturns the number of packets in the page.\n","serialno":"\tReturns the unique serial number of the logical bitstream\n        associated with this page.\n","version":"\tReturns the ogg_page version that this page uses.\n","setChecksum":"\tComputes and sets the checksum for this page.\n","bos":"\tIndicates if the current page is the beginning of the stream.\n"}},"OggPacket":{"module":"Ogg","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libogg ogg_packet object. No methods - used internally.\n","category":"Audio\n","slots":{}},"OggSyncState":{"module":"Ogg","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libogg ogg_sync_state object.\n","category":"Audio\n","slots":{"pageseek(page)":"\tFinds the borders of pages and resynchronises the stream.\n","reset":"\tResets the synchronization status to initial values.\n","pageout(page)":"\tOutputs a page from the synchronisation layer.\n","write(seq)":"        Copies the data from the sequence into the synchronisation\n\tlayer.\n","clear":"\tFree's any internal storage and resets to the initial state.\n"}}},"PortAudio":{"AudioMixer":{"module":"PortAudio","description":"A minimal audio mixer.\n","category":"Audio\n","slots":{"start":"\t\tStart the mixer loop processing 1\/64th of a second chunks\n\t\tby calling process(22050) in a loop.\n\t\tWill not return until stop is called. Returns self.\n","removeSource(aSource)":" Removes aSource to sources list. Returns self.\n","streamDestination":"The output stream object.\n","processedSamples":"Returns the number of processed samples.\n","process(sampleCount)":" Internal method used for processing a chunk of the input sources. Returns self.\n","isRunning":"Returns true if the mixer is running, false otherwise..\n","appendSource(aSource)":" Adds aSource to sources list. Returns self.\n","stop":"Stops the mixer if it is running.\n"}},"AudioDevice":{"module":"PortAudio","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"The AudioDevice object can used to write audio data as if directly to the audio buffer.\n","category":"Audio\n","slots":{"write(aSeq)":"\tWrites aSeq to the inputBuffer and yields until the \n\treceiver is ready for more input data. Returns self.\n","asyncWrite(aBuffer)":"\tWrites aBuffer to the audio output buffer and returns immediately.\n","writeBufferIsEmpty":"\tReturns the true if the audio buffer is empty, false otherwise.\n","streamTime":"\tReturns the audio stream time as a number.\n","isActive":"\tReturns self if the receiver is active, Nil otherwise.\n","needsData":"\tReturns true if the receiver can read more data.\n","open":"\tOpen an audio output stream.\n","error":"\tReturns an error string if an error has occured, Nil otherwise.\n","asyncRead":"\tReturns the audio read buffer.\n","openForReadingAndWriting":"\tOpen audio output and input streams.\n","close":"\tClose the audio stream.\n"}}},"LibSndFile":{"LibSndFile":{"module":"LibSndFile","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"An object for encoding and decoding audio files (principally WAV and AIFF) using the \n<a href=http:\/\/www.mega-nerd.com\/libsndfile\/>Libsndfile<\/a> library.\n","category":"Audio\n","slots":{"close":"\tCloses the file if it is open. \n\tReturns self.\n","read(numberOfFrames)":"\tRead a given number of frames (sample pairs).\n\tReturns self.\n","write(aSeq)":"\tWrites aSeq using the format specified by the slots:\n\t<pre>\n\tsampleRate\n\tchannels\n\tformat\n\t<\/pre>\n\tReturns the number of frames written.\n","openForReading":"\tOpens the file at the path specified in the path slot and sets the following slots:\n\t<pre>\n\tframes\n\tsampleRate\n\tchannels\n\tformat\n\tseekable\n\t<\/pre>\n\tReturns self.\n","formatNames":"\tReturns a list of strings with the names of the supported codecs.\n","openForWriting":"\tOpens the file at the path specified in the path slot for writing. The following slots should be set first to specify the output format:\n\t<pre>\n\tsampleRate\n\tchannels\n\tformat\n\t<\/pre>\n\tReturns self.\n","outputBuffer":"\tReturns the output buffer.\n"}}},"SampleRateConverter":{"SampleRateConverter":{"module":"SampleRateConverter","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"\tA binding for <a href=\"http:\/\/www.mega-nerd.com\/SRC\/\">libsamplerate<\/a> \n\tuseful for up or downconverting the sample rate of a raw audio stream.\n\tStreams are assumed to be in 32bit float interleaved stereo.\n","category":"Audio\n","slots":{"inputBuffer":"\tReturns the input buffer.\n","start":"\tStops processing.\n\tReturns self.\n","setEndOFInput(aBool)":"\tSets the end of input flag.\n\tReturns self.\n","setOutputToInputRatio(aNumber)":"\tReturns the output to input ration for the conversion.\n","process":"\tProcess the input buffer to perform the conversion. \n\tReturns self.\n","outputBuffer":"\tReturns the output buffer.\n"}}}},"Apple":{"AppleExtras":{"AppleSensors":{"module":"AppleExtras","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"A singleton which on Apple computers can:\n<ul>\n<li> get and set display and keyboard brightness\n<li> read left and right ambient light sensors (laptops only)\n<li> read accelerometer sensor (laptops only)\n<\/ul>\nExample use;\n<pre>\t\nsensors = AppleSensors clone\nvalue := sensors getRightLightSensor\n<\/pre>\n","category":"Apple\n","slots":{"setKeyboardBrightness(aNumber)":"\t\tSets the keyboard brightness. Returns self.\n","getLeftLightSensor":"\t\tReturns a number for the left ambient light sensor.\n","getDisplayBrightness":"\t\tReturns a number for the display brightness.\n","smsVector(aVector)":"\t\tSets aVector to the current x, y and z accelerometer values. \n\t\tReturns true on success and false on failure.\n","getRightLightSensor":"\t\tReturns a number for the right ambient light sensor.\n","getKeyboardBrightness":"\t\tReturns a number for the keyboard brightness.\n","setDisplayBrightness(aNumber)":"\t\tSets the display brightness. Returns self.\n"}}}},"Video":{"Theora":{"TheoraInfo":{"module":"Theora","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libtheora th_info object.\n","category":"Video\n","slots":{"frameHeight":"\tThe encoded frame height.\n","frameWidth":"\tThe encoded frame width.\n","frameRate":"\t  The framerate of the video.\n"}},"TheoraComment":{"module":"Theora","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libtheora th_comment object.\n","category":"Video\n","slots":{"count":"\tReturns the number of comments.\n"}},"TheoraDecodeContext":{"module":"Theora","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libtheora th_dec_ctx object.\n","category":"Video\n","slots":{}},"TheoraSetupInfo":{"module":"Theora","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libtheora th_setup_info object.\n","category":"Video\n","slots":{}}},"AVCodec":{"AVCodec":{"module":"AVCodec","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"An object for encoding and decoding audio and video streams.\n\n<p>\nWhen an input stream containing audio data is opened, the following slots will be set:\n<pre>\naudioChannels\naudioSampleRate\naudioBitRate\naudioDuration\naudioFrameCount\n<\/pre>\n\nWhen an input stream containing video data is opened, the following slots will be set:\n\n<pre>\nframePeriod\nvideoDuration\nvideoFrameCount\n<\/pre>\n","category":"Video\n","slots":{"open":"\tOpens the input file. Return self on success or raises an exception on error.\n","audioOutputBuffer":"\tReturns the output buffer.\n","didProcess":"\tCalled after the receiver processes some more of the input buffer.\n","willProcess":"\tCalled before the receiver will process more of the input buffer. \n\tIf inputBuffer is empty, it pauses the receiver's coro.\n","write(aSequence)":"\tAppends aSequence to the input buffer and resumes the receiver's coroutine in order to process it.\n\tThe calling coroutine (inputCoroutine) will be scheduled to resume when didProcess is called.\n","decodeCodecNames":"\tReturns a list of strings with the names of the decode codecs.\n","setInputCoro(aCoro)":" Private method for setting inputCoro. Returns self.\n","audioInputBuffer":"\tReturns the input buffer.\n","setPath(aSeq)":" Sets the path to file the receiver is reading or writing to. Returns self.\n","decode":"\tDecodes the next chunk of input data. \n\tOutput (if any) is placed in the outputBuffers. \n\tReturns self.\n","setInternalCoro(aCoro)":" Private method for setting internalCoro. Returns self.\n","internalCoro":"Returns coroutine used for the AVCodec to process data...\n","close":"\tCloses the input file if it's open. Returns self.\n","setStreamDestination(anObject)":"Sets the streamDestination to anObject. The didProcess method will call:\n<pre>\nif(streamDestination, streamDestination write(outputBuffer))\noutputBuffer empty\n<\/pre>\n","codecName":"Returns name of audio or video codec.\n","path":"Returns path to file the receiver is reading or writing to.\n","setCodecName(aSeq)":" Sets the codec name. Returns self. See: encodeCodecNames and decodeCodecNames\n","isAtEnd":"\tReturns true if the stream is at it's end, false otherwise.\n","encodeCodecNames":"\tReturns a list of strings with the names of the encode codecs.\n","videoCodecName":"Returns the name of the video codec.\n","inputCoro":"Returns coroutine currently writing to the receiver.\n","streamDestination":" Returns the streamDestination.\n"}}},"Vorbis":{"VorbisDspState":{"module":"Vorbis","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libvorbis vorbis_comment object.\n","category":"Video\n","slots":{"pcmout":"\tReturns array of audio data\n","setup(info)":"\tInitialize for decoding using the information obtained\n\tfrom reading the Vorbis headers.\n","headerin(info, comment, packet)":"\tTry to decode a vorbis header from the packet.\n","blockin(block)":"\tDecodes that data from the block, storing it in the dsp state.\n"}},"VorbisBlock":{"module":"Vorbis","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libvorbis vorbis_comment object.\n","category":"Video\n","slots":{"setup":"\tInitialize for decoding using the information obtained\n\tfrom reading the Vorbis headers.\n","synthesis(packet)":"\tDecode the vorbis data from the packet, storing it in the\n\tblock.\n"}},"VorbisComment":{"module":"Vorbis","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libvorbis vorbis_comment object.\n","category":"Video\n","slots":{"count":"\tReturns number of comments.\n"}},"VorbisInfo":{"module":"Vorbis","license":"BSD revised\n","copyright":"Chris Double, 2004\n","description":"A wrapper around the libvorbis vorbis_info object.\n","category":"Video\n","slots":{"version":"\tReturns the vorbis version required for this data.\n","rate":"\tReturns the sample rate of the vorbis data.\n","channels":"\tReturns the number of channels in the vorbis data.\n"}}}},"binding":{"CInvoke":{"CInvoke":{"license":"New BSD license\n","copyright":"Trevor Fancher, 2006\n","module":"CInvoke","category":"binding\n","slots":{}}}},"Concurrency":{"Thread":{"Thread":{"module":"Thread","license":"BSD revised\n","copyright":"Steve Dekorte, 2006\n","description":"\tFor native threads.\nExample use;\n<pre>\t\nThread createThread(\"1+1\") \/\/ evals 1+1 in a new thread and an independent Io VM\n<\/pre>\n","category":"Concurrency\n","slots":{"threadCount":"\tReturns the number of OS threads currently running in the process.\n","createThread(aSequence)":"\tCreates a new IoState and evals aSequence in it using a new OS thread. Returns self immediately.\n","endCurrentThread":"\tEnds the currently running OS thread.\n"}}}},"Databases":{"QDBM":{"QDBM":{"module":"QDBM","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"An ordered key\/value database that supports transactions and arbitrary kay and value sizes.\n","category":"Databases\n","slots":{"at(keySymbol)":"\tReturns a Sequence for the value at the given key or nil if there is no such key.\n","abort":"\tAbort transaction. Returns self\n","cursorNext":"\tMove cursor to next record. Returns true if there is another key, \n\tor false if there is no next record.\n","cursorPrevious":"\tMove cursor to previous record. Returns true if there is another key, \n\tor false if there is no previous record.\n","cursorValue":"\tReturns current cursor value or nil.\n","atRemove(keySymbol)":"\tRemoves the specified key. Returns self\n","sizeAt(keySymbol)":"\tReturns the size of the value at the given key or nil if there is no such key.\n","cursorPut(value)":"\tSets the value at the current cursor postion. Returns self.\n","commit":"\tCommit transaction. Returns self\n","cursorKey":"\tReturns current cursor key or nil.\n","cursorRemove":"\tRemoves the current cursor postion. Returns self.\n","close":"\tCloses the database.\n","begin":"\tBegin transaction. Returns self\n","cursorJumpForward(key)":"\tMove cursor to next record around key. Returns self\n","cursorJumpBackward(key)":"\tMove cursor to previous record around key. Returns self\n","sync":"\tSyncs the database. Returns self\n","atPut(keySymbol, valueSequence)":"\tSets the value of valueSequence with the key keySymbol. Returns self.\n","optimize":"\tOptimizes the database. Returns self\n","cursorFirst":"\tMove cursor to first record. Returns self\n","cursorLast":"\tMove cursor to last record. Returns self\n","name":"\tReturns the name of the database.\n","size":"\tReturns number of records in database. Returns self\n","open(path)":"\tOpens the database.\n"}}},"Obsidian":{"PMap":{"module":"Obsidian","description":"PMap stores persistent data in a Map-like fashion and lazily loads\navailable slots from the PDB backing store. Values stored or loaded are cached\ninto local object slots.\n","category":"Databases\n","slots":{"removeAt":"Marks a value for removal.\n","objectsForKeys":"Returns a list of values for each key in the list given. Keys beginning with an\nunderscore (\"_\") are returned verbatim.\n","slotCount":"Returns the number of slots committed to PDB.\n","persistSlots":"Cleans up dirty slots by committing them to PDB.\n","shouldPersistByDefault":"PDB boolean flag indicating whether this object should be considered for persistence\nwhen persistence has not been specifically requested by calling ppid() or PDB addObjectToPersist.\nAlways true by default for PMap.\n","persist":"Commits the PMap's slots to PDB.\n","createIfAbsent":"Creates a slot with a new PMap clone if not already present.\n","at(slotName)":"Tries to obtain a value for slot slotName from a local slot of that name,\nor tries to load it from the PDB if the local slot does not exist. When all else fails, returns nil.\n<p>\nIf slotName begins with an underscore (\"_\"), returns the id of the slot from PDB instead of the value.\n","removeSlot":"Marks a value for removal.\n","atPut(slotName, value)":" Records value in the slot named slotName.\n","init":"Initialize a new PMap and automatically add it as a persistent object to PDB.\n"}},"Obsidian":{"copyright":"Steve Dekorte 2008\n","module":"Obsidian","slots":{"onAt":"Return the value associated with slotName of stored object whose ppid is objId.\n","delete":"Removes the persistence database file set via setPath.\n","close":"Closes the persistence database file.\n"},"license":"BSD revised\n","description":"A double key\/value database with cursors on first key. Basis for PDB.\n","credits":"In collaboration with Rich Collins\n","category":"Databases\n"},"ObsidianClient":{"module":"Obsidian","category":"Databases\n","slots":{}},"PObject":{"module":"Obsidian","category":"Databases\n","slots":{}},"PDB":{"proto":"Obsidian\n","copyright":"Steve Dekorte 2008\n","module":"Obsidian","slots":{"addObjectToPersist":"Register an object to be persisted in the next PDB sync.\n","newId":"Generate a new PDB id number for use as a persistent object's ppid.\n","reopen":"Sync, close and reopen the PDB store.\n","root":"Return the root PMap object used to store and retrieve persistent objects and their slots.\n","close":"Close the persistence database.\n","show":"Print to standard output a listing of all objects and IDs stored in PDB.\n","sync":"Immediately persist data for all objects marked dirty by Collector whose \nshouldPersistByDefault is true, or that have specifically requested to be\npersisted since the last sync via addObjectToPersist.\n","objectAtPpid":"Return the object associated in the database with a ppid.\n","collectGarbage":"Remove from PDB all objects not accessible via the root object.\n"},"license":"BSD revised\n","description":"An arbitrary graph database with support for on-disk garbage collection. Example use:\n\n<h4>Setup<\/h4>\n\n<pre>\nPDB open\nPDB root atPut(\"users\", PMap clone)\nPDB sync\nPDB close\n<\/pre>\n\nPMap is a Map\/Dictionary whose keys are lazily loaded from the database. \nPDB root is the root PMap in the database and the root object used for PDB's garbage collector. \nPDB sync needs to be called to write any changes to the database.\n\n<h4>Defining a Persistent Object<\/h4>\n\n<pre>\nUser := Object clone pSlots(name, email)\n<\/pre>\n\nThe pSlots(), declares which slots on the object should be persisted. \nThe List, Date, Sequence and Number primitives already know how to persist themselves.\n\n<h4>Inserting a Persistent Object<\/h4>\n\n<pre>\nPDB open \nuser := User clone setName(\"steve\") setEmail(\"steve@foo.com\")\nPDB root users atPut(\"steve\", user)\nPDB sync\nPDB close\n<\/pre>\n\n<h4>Accessing a Persistent Object<\/h4>\n\n<pre>\nuser := PDB root users at(\"steve\")\nwriteln(\"user name = \", user name, \" email = \", user email)\n<\/pre>\n\n<h4>Updating a Persistent Object<\/h4>\n\n<pre>\nuser setEmail(\"steve@newDomain.com\")\nPDB sync \n<\/pre>\n\nPDB sync will scan all persistent objects in the vm and save any with changes to their persistent slots. \nIf the object was already in the database, only it's updated slots will be written.\n\n<h4>Removing an entry in a PMap<\/h4>\n\n<pre>\nPDB root users removeAt(\"steve\")\n<\/pre>\n\n<h4>Removing a persistent object<\/h4>\n\nThis is never done explicitly, instead calling:\n\n<pre>\nPDB collectGarbage\n<\/pre>\n\nWill remove all objects unreachable by the reference graph from the root PMap.\n\n<p>\nNotes: Currently, PDB is a singleton.\n","credits":"Steve Dekorte & Rich Collins\n","category":"Databases\n"},"ObsidianServer":{"module":"Obsidian","license":"BSD revised\n","copyright":"Steve Dekorte 2008\n","description":"\nA network interface for Obsidian.\n\n<h4>Starting a Server<\/h4>\n\n<pre>\noServer := ObsidianServer clone\noServer localObject setName(\"foo\") open\noServer start\n<\/pre>\n\n<h4>Example Client Code<\/h4>\n\n<pre>\nclient := MDOConnection clone setHost(\"127.0.0.1\") setPort(8000) connect\nclient onAtPut(\"1\", \"aKey\", \"aSlot\")\nclient onAtPut(\"1\", \"cKey\", \"cSlot\")\nclient onAtPut(\"1\", \"bKey\", \"bSlot\")\nclient first(\"1\", 5) println\na := client onAt(\"1\", \"aKey\")\nwriteln(\"a = \", a)\nb := client onAt(\"1\", \"bKey\")\nwriteln(\"b = \", b)\nclient close\n<\/pre>\n\nThe messages accepted by the Obsidian server include:\n\n<pre>\nonAtPut(id, key, value)\nonAt(id, key)\nonRemoveAt(id, key)\nonFirst(id, count)\nonLast(id, count)\nonAfter(id, key, count)\nonBefore(id, key, count)\n<\/pre>\n","category":"Databases\n","slots":{}}},"TagDB":{"TagDB":{"module":"TagDB","license":"BSD revised\n","copyright":"Steve Dekorte, 2007\n","description":"Binding for <a href=http:\/\/www.dekorte.com\/projects\/opensource\/tagdb\/>tagdb<\/a> - a tagging database usefull for flickr-like tag searches.\n<p>\nExample use:\n<pre>\ntdb := TagDB clone\n\ntdb setPath(\"test\")\ntdb open\n\nwriteln(\"size = \", tdb size)\ntdb atKeyPutTags(\"f430 for sale\", list(\"red\", \"ferrari\"))\ntdb atKeyPutTags(\"lotus esprit\", list(\"lotus\", \"esprit\"))\nwriteln(\"size = \", tdb size)\nkeys := tdb keysForTags(list(\"lotus\"))\nwriteln(\"keys = \", tdb symbolForId(keys at(0)))\ntdb close\ntdb delete\n<\/pre>\n","category":"Databases\n","slots":{"open":"\tOpen the tagdb. Returns self.\n","uniqueTagNames":"Returns a list of all unique tag names.\n","close":"\tClose the tagdb. Returns self.\n","allUniqueTagIds":"\tReturns a list of all unique tag ids.\n","idForSymbol(aSeq)":"\tReturns the TagDB id Number for the symbol specified by aSeq.\n","setPath(aPath)":"\tSets the path to the tag database. Returns self.\n","keyAtIndex(indexNumber)":"\tReturns the key at the specified index of nil if the index is out of range.\n","keysForTags(aTagNameList)":"\tReturns list of keys whose tags contain all of the tags in aTagNameList.\n","atKeyPutTags(key, tagNameList)":"\tSets the tags for key to those in tagNameList. Returns self.\n","removeKey(aKey)":"\tRemoves the specified key if it is present. Returns self.\n","symbolForId(aNumber)":"\tReturns the TagDB symbol for aNumber.\n","tagsAtKey(key)":"\tReturns the tags for the specified key.\n","size":"\tReturns number of keys in the database.\n","delete":"\tDeletes all keys in the database.\n"}}},"SQLite3":{"SQLite3":{"slots":{"debugOff":"\tTurns off debugging.\n","isOpen":"\tReturns true if the database is open, false otherwise.\n","lastInsertRowId":"\tReturns the number with the row id of the last row inserted.\n","setTimeoutSeconds(aNumber)":"\tSets the open timeout to aNumber. If aNumber is 0, an open\n\tcall will never timeout. Returns self.\n","columnNamesOfTable(tableName)":"\tReturns a list containing the names of all columns in the specified table.\n","version":"\tResults a string the version of SQLite being used.\n","debugOn":"\tTurns on debugging.\n","exec(aString)":"\tOpens the database if it is not already open and executes\n\taString as an sql command. Results a List of Map objects or Nil if\n\tthere was an error. Each map holds the contents of a row.\n\tThe key\/value pairs of the maps being column name\/column value\n\tpairs for a row.\n","timeoutSeconds":"\tReturns the number of seconds to wait before timing out an\n\topen call. If the number is 0, an open call will never timeout.\n","tableNames":"\tReturns a list containing the names of all tables in the database.\n","setPath":"\tSets the path to the database file. Returns self.\n","close":"\tCloses the database if it is open. Returns self. If the database is open when the open is garbage collected, it will be automatically closed.\n","path":"\tReturns the path to the database file.\n","escapeString(aString)":"\tReturns a translated version of aString by making two copies of \n\tevery single-quote (') character. This has the effect of escaping the \n\tend-of-string meaning of single-quote within a string literal.\n","open(optionalPathString)":"\tOpens the database. If there is an optionalPathString argument,\n\tthe path is set to it's value before opening the database. If path is \"\" or \":memory:\"\n\ta database will be created in-memory, otherwise the file specified by path is opened.\n\tReturns self or Nil upon failure.\n\n\tIf the databse is locked, \"yield\" will be called until it is accessable or\n\ttimeoutSeconds has expired. \"\"\n","error":"\tResults a string containing the current error. If there is no error, Nil is returned.\n","changes":"\tReturns the number of rows that were changed by the most\n\trecent SQL statement. Or Nil if the database is closed.\n","viewNames":"\tReturns a list containing the names of all\n\tviews in the database.\n"},"license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","module":"SQLite3","description":"\tSQLite provides a embedded simple and fast \n\t(2x faster than PostgreSQL or MySQL) SQL database. \n\tSee http:\/\/www.hwaci.com\/sw\/sqlite\/ for details. \n\tIt's SQL command set is described \n\tat http:\/\/www.hwaci.com\/sw\/sqlite\/lang.html. \n\tSQLite was written by Dr. Richard Hipp who offers consulting \n\tservices for custom modifications and support of SQLite. Example:\n\t<p>\n<pre>\t\ndb := SQLite clone\ndb setPath(\"myDatabase.sqlite\")\ndb open\ndb exec(\"CREATE TABLE Dbm (key, value)\")\ndb exec(\"CREATE INDEX DbmIndex ON Dbm (key)\")\ndb exec(\"INSERT INTO Dbm ('key', 'value') VALUES ('a', '123')\")\ndb exec(\"INSERT INTO Dbm ('key', 'value') VALUES ('a', 'efg')\")\nrows := db exec(\"SELECT key, value FROM Dbm WHERE key='a'\")\ndb exec(\"DELETE FROM Dbm WHERE key='a'\")\nrows := db exec(\"SELECT key, value FROM Dbm WHERE key='a'\")\ndb close\n<\/pre>\n","category":"\tDatabases\n"}},"MySQL":{"MySQL":{"module":"MySQL","license":"MIT License\n","copyright":"Min-hee Hong, 2007\n","description":"<a href=\"http:\/\/www.mysql.com\/\">MySQL<\/a> is a fast, multi-threaded,\nmulti-user SQL database server. IoMySQL is a MySQL binding for Io,\nby <a href=\"http:\/\/dahlia.pe.kr\/\">Min-hee Hong<\/a>.\n\n<pre><code>\nmy := MySQL establish(&quot;localhost&quot;, &quot;user&quot;, &quot;password&quot;, &quot;database&quot;)\n\n# Get rows by Map\nmy queryThenMap(&quot;SELECT * FROM rel&quot;) foreach(at(&quot;col&quot;) println)\n# Get rows by List\nmy query(&quot;SELECT * FROM rel&quot;) foreach(at(0) println)\n\nmy close\n<\/code><\/pre>\n","category":"Databases\n","slots":{"establish":"\tEstablish a connection to a MySQL database.\n","lastInsertRowId":"\tReturns the value generated for an AUTO_INCREMENT column by the previous INSERT or UPDATE statement.\n","connect(host, user, password, database, port, unixSocket, useSSL)":"\tConnect to a MySQL database.\n","query(aQueryString)":"\tPerform a SQL query and return a list of results.\n\t<pre>\n\tdb query(\"SELECT * FROM accounts\") foreach(println)\n\t<\/pre>\n","connected":"\tReturns true if connected to the database, false otherwise.\n","close":"\tCloses a previously opened connection.\n"}}},"SQLite":{"SQLite":{"module":"SQLite","license":"\tBSD revised\n","copyright":"\tSteve Dekorte, 2004\n","description":"SQLite provides a embedded simple and fast (2x faster than PostgreSQL or MySQL) SQL database. See http:\/\/www.hwaci.com\/sw\/sqlite\/ for details. It's SQL command set is described at http:\/\/www.hwaci.com\/sw\/sqlite\/lang.html. SQLite was written by Dr. Richard Hipp who offers consulting services for custom modifications and support of SQLite. Example:\n<pre>\t\ndb := SQLite clone\ndb setPath(\"myDatabase.sqlite\")\ndb open\ndb exec(\"CREATE TABLE Dbm (key, value)\")\ndb exec(\"CREATE INDEX DbmIndex ON Dbm (key)\")\ndb exec(\"INSERT INTO Dbm ('key', 'value') VALUES ('a', '123')\")\ndb exec(\"INSERT INTO Dbm ('key', 'value') VALUES ('a', 'efg')\")\nrows := db exec(\"SELECT key, value FROM Dbm WHERE key='a'\")\ndb exec(\"DELETE FROM Dbm WHERE key='a'\")\nrows := db exec(\"SELECT key, value FROM Dbm WHERE key='a'\")\ndb close\n<\/pre>\n","category":"\tDatabases\n","slots":{"debugOff":"\tTurns off debugging.\n","lastInsertRowId":"\tReturns the number with the row id of the last row inserted.\n","timeoutSeconds":"\tReturns the number of seconds to wait before timing out an open call. \n\tIf the number is 0, an open call will never timeout.\n","columnNamesOfTable(tableName)":"\tReturns a list containing the names of all columns in the specified table.\n","version":"\tResults a string the version of SQLite being used.\n","debugOn":"\tTurns on debugging.\n","exec(aString)":"\tOpens the database if it is not already open and executes\n\taString as an sql command. Results a List of Map objects or Nil if\n\tthere was an error. Each map holds the contents of a row.\n\tThe key\/value pairs of the maps being column name\/column value\n\tpairs for a row. \")\n","setPath(aSeq)":"\tSets the path to the database file. Returns self.\n","tableNames":"\tReturns a list containing the names of all tables in the database.\n","setTimeoutSeconds(aNumber)":"\tSets the open timeout to aNumber. If aNumber is 0, an open \n\tcall will never timeout. Returns self.\n","close":"\tCloses the database if it is open. Returns self. \n\tIf the database is open when the open is garbage collected, \n\tit will be automatically closed.\n","path":"\tReturns the path to the database file.\n","open(optionalPathString)":"\tOpens the database.Returns self on success or nil upon failure.\n\tIf the databse is locked, \"yield\" will be called until it is \n\taccessable or timeoutSeconds has expired.\n","escapeString(aString)":"\tReturns a translated version of aString by making two \n\tcopies of every single-quote (') character. This has the effect \n\tof escaping the end-of-string meaning of single-quote within a string literal.\n","isOpen":"\tReturns true if the database is open, false otherwise.\n","error":"\tResults a string containing the current error. \n\tIf there is no error, Nil is returned.\n","changes":"\tReturns the number of rows that were changed by the most \n\trecent SQL statement. Or Nil if the database is closed.\n","viewNames":"\tReturns a list containing the names of all views in the database.\n"}}},"SkipDB":{"SkipDB":{"module":"SkipDB","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"An ordered key\/value database implemented using a skiplist data structure.\n","category":"Databases\n","slots":{"size":"\tReturns the number of keys in the receiver.\n","atPut(keySymbol, valueSequence)":"\tSets the value of valueSequence with the key keySymbol. Returns self.\n","cursor":"\tReturns a new cursor to enumerate the receiver.\n","at(keySymbol)":"\tReturns a Sequence for the value at the given key or nil if there is no such key.\n","atRemove(keySymbol)":"\tRemoves the specified key. Returns self\n","headerPid":"\tReturns the headerPid number.\n"}},"SkipDBM":{"module":"SkipDB","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"SkipDB is a skip-list based key-value database. SkipDBM manages any number of skipdbs within the same file. \nThe root skipdb can be accessed using the root method.\n","category":"Databases\n","slots":{"commitTransaction":"\tCommit a transaction. Returns self.\n","setPath(aString)":"\tSets the path to the dbm folder. Returns self.\n","root":"\tReturns the root SkipDB.\n","path":"\tReturns the path to the dbm. Returns self.\n","beginTransaction":"\tBegin a transaction. Returns self.\n","open":"\tOpens the dbm. Returns self.\n","compact":"\tCompacts the database. Returns self.\n","at(pidNumber)":"\tReturns the SkipDB at the specified persistent ID or nil if it is not found.\n","delete":"\tDeletes the db. Returns self.\n","close":"\tCloses the dbm.\n"}},"SkipDBCursor":{"module":"SkipDB","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"An iterator object for a SkipDB.\n","category":"Databases\n","slots":{"key":"\tReturns the current cursor key, or nil if the cursor is out of range.\n","first":"\tMove cursor to first item. Returns self.\n","last":"\tMove cursor to last item. Returns self.\n","value":"\tReturns the current cursor key, or nil if the cursor is out of range.\n","next":"\tMove cursor to next item. Returns self.\n","goto(aKey)":"\tMove cursor to the specified key or nearest preceeding key. Returns self\n","previous":"\tMove cursor to previous item. Returns self.\n"}}},"TokyoCabinet":{"TokyoCabinet":{"module":"TokyoCabinet","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"An ordered key\/value database that supports transactions and arbitrary kay and value sizes.\n","category":"Databases\n","slots":{"prefixCursor":"\tReturns a new prefix cursor object.\n","abort":"\tAbort transaction. Returns self\n","sync":"\tSyncs the database. Returns self\n","at(keySymbol)":"\tReturns a Sequence for the value at the given key or nil if there is no such key.\n","compareType":"Returns the compare type function name used.\n","atRemove(keySymbol)":"\tRemoves the specified key. Returns self\n","sizeAt(keySymbol)":"\tReturns the size of the value at the given key or nil if there is no such key.\n","cursor":"\tReturns a new cursor object.\n","commit":"\tCommit transaction. Returns self\n","setCompareType(name)":"\tSets the compare type function used to compare keys in the database. Valid compare types include:\n\t\"lexical\", \"decimal\", \"int32\", \"int64\" and \"path\". Returns self.\n","close":"\tCloses the database.\n","begin":"\tBegin transaction. Returns self\n","path":"Returns the path of the database file.\n","atPut(keySymbol, valueSequence)":"\tSets the value of valueSequence with the key keySymbol. Returns self.\n","optimize":"\tOptimizes the database. Returns self\n","transactionalAtPut(key, value)":" Transactionally insert the given key and value. Returns self.\n","open(path)":"\tOpens the database.\n","atApple(keySymbol, valueSequence)":"\tAppends valueSequence to the current value at keySymbol. Returns self.\n","setPath(aPath)":" Sets the path of the database file. Returns self.\n","transactionalRemoveAt(key)":" Transactionally remove the given key. Returns self.\n","size":"\tReturns number of records in database. Returns self\n"}},"TokyoCabinetPrefixCursor":{"module":"TokyoCabinet","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"A database cursor.\n","category":"Databases\n","slots":{"close":"\tCloses the database.\n","key":"\tReturns current cursor key or nil.\n","first":"\tMove cursor to first record. Returns self\n","last":"\tMove cursor to last record. Returns self\n","value":"\tReturns current cursor value or nil.\n","put(value)":"\tSets the value at the current cursor postion. Returns self.\n","next":"\tMove cursor to next record. Returns true if there is another key, \n\tor false if there is no next record.\n","remove":"\tRemoves the current cursor postion. Returns self.\n","jump(key)":"\tMove cursor to record before key. Returns self\n","previous":"\tMove cursor to previous record. Returns true if there is another key, \n\tor false if there is no previous record.\n"}},"TokyoCabinetCursor":{"module":"TokyoCabinet","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"A database cursor.\n","category":"Databases\n","slots":{"close":"\tCloses the database.\n","key":"\tReturns current cursor key or nil.\n","first":"\tMove cursor to first record. Returns self\n","last":"\tMove cursor to last record. Returns self\n","value":"\tReturns current cursor value or nil.\n","put(value)":"\tSets the value at the current cursor postion. Returns self.\n","next":"\tMove cursor to next record. Returns true if there is another key, \n\tor false if there is no next record.\n","remove":"\tRemoves the current cursor postion. Returns self.\n","jump(key)":"\tMove cursor to record before key. Returns self\n","previous":"\tMove cursor to previous record. Returns true if there is another key, \n\tor false if there is no previous record.\n"}}},"Memcached":{"Memcached":{"license":"BSD revised\n","module":"Memcached","slots":{"delete(key[, time])":"Asks memcached to delete an item with the given key.\ntime is the amount of time in seconds (or Unix time until which)\nthe client wishes the server to refuse \"add\" and \"replace\" commands\nwith this key.\nReturns true on success, false if there is no item with the given key.\nOtherwise raises an exception.\n","prepend(key, value)":"Asks memcached to add this value to an existing key before existing value.\nReturns true on success, otherwise raises an exception.\nvalue should be a Sequence.\nSupported by memcached 1.2.4+\n","removeAt(key)":"\tAsks memcached to remove value with a given key. Returns self.\n","add(key, value[, expiration])":"Asks memcached to store the value identified by the key,\nbut only if the server *doesn't* already hold data for this key.\nReturns true on success, false in case of a collision.\nOtherwise raises an exception.\n","atPut(key, value[, expiration])":"\tAsks memcached to store the value identified by the key.\n\tSame as Memcached set, but returns self.\n","addServer(address)":"Adds a memcached server. address is a \"host:port\" string, e.g., \"127.0.0.1:11211\"\nReturns self.\n","at(key, optionalDefaultValue)":"\tAsks memcached to retrieve data corresponding to the key.\n\tReturns nil if the data is not there (or if the data *is* nil).\n","flushAll([expiration])":"Asks memcached to invalidate all existing items immediately (by default)\nor after the expiration specified.\nAlways returns true.\n","get(key)":"Asks memcached to retrieve data corresponding to the key.\nRaises \"NOT FOUND\" if the data is not there.\n","atIfAbsentPut(key, value[, expiration])":"\tIf a value is present at the specified key, its value is returned.\n\tOtherwise, inserts the new value and returns it.\n","incr([offset])":"Asks memcached to increment data for some item in place. The data for the item is\ntreated as decimal representation of a 64-bit unsigned integer. If the\ncurrent data value does not conform to such a representation, the\ncommands behave as if the value were 0.\nDefault offset is 1.\nReturns the new value.\n","replace(key, value[, expiration])":"Asks memcached to store the value identified by the key,\nbut only if the server *does* already hold data for this key.\nReturns true on success, false if there is already data for this key.\nOtherwise raises an exception.\n","decr([offset])":"Asks memcached to decrement data for some item in place. The data for the item is\ntreated as decimal representation of a 64-bit unsigned integer. If the\ncurrent data value does not conform to such a representation, the\ncommands behave as if the value were 0.\nDefault offset is 1.\nReturns the new value.\n","append(key, value)":"Asks memcached to add this value to an existing key after existing value.\nReturns true on success, otherwise raises an exception.\nvalue should be a Sequence.\nSupported by memcached 1.2.4+\n","stats":"Returns a Map with servers' statistics. Keys are server addresses,\nvalues are maps with actual stats.\n","with(servers)":"\tReturns a new instance of Memcached.\n\tAccepts a Sequence or a List of server addresses.\n","set(key, value[, expiration])":"Asks memcached to store the value identified by the key.\nReturns true on success, otherwise raises an exception.\n","getMulti(keys)":"Asks memcached to retrieve data corresponding to the list of keys.\nReturns a Map with the results.\nIf some of the keys appearing in a retrieval request are not sent back\nby the server in the item list this means that the server does not\nhold items with such keys\n"},"Aleksey":"Yeschenko, 2009\n","description":"<a href=\"http:\/\/www.danga.com\/memcached\/\">memcached<\/a> is a high-performance,\ndistributed memory object caching system, generic in nature,\nbut intended for use in speeding up dynamic web applications\nby alleviating database load. Memcached is an Io client library for memcached,\nbased on C <a href=\"http:\/\/tangent.org\/552\/libmemcached.html\">libmemcached<\/a>.\n","credits":"Aleksey Yeschenko, 2009\n","category":"Databases\n"}},"SqlDatabase":{"SqlDatabase":{"module":"SqlDatabase","category":"Databases\n","slots":{}}},"Postgres":{"Postgres":{"module":"Postgres","category":"Databases\n","slots":{}}},"DBI":{"DBIConn":{"module":"DBI","license":"BSD revised\n","copyright":"Jeremy Cowgar 2006\n","description":"An object that represents a DBI Connection.\n","category":"Databases\n","slots":{"option(key)":" Retrieve an option value for the connection.\n","driver":"Return database driver name.\n","sequenceNext([name])":"\tReturn the next sequence that will be used during an INSERT query.\n","optionsClear":"Clear all options associated with the connection\n","close":"Close the connection to the database.\n","optionPut(key,value)":" Add an option key, value pair to the connection.\n","quote(value)":"\tQuote a string value according to the database server's specifications.\n","optionClear(key)":" Clear a specific option associated with the connection.\n","sequenceLast([name])":"\tReturn the last inserted sequence value.\n","queryOne([object], sql)":"\tPerform a query and return the first\n\tresult.\n\n\tIf [object] is supplied, the object is populated with the contents of the\n\tresult, the result is marked done and the object is returned.\n","ping":"\tPing the database to see if it's alive. \n\tWill return true if it is, otherwise false.\n","options":"Retrieve an option list of the connection.\n","query(sql_query)":"\tPerform a database query returning a DBIResult object.\n","execute(sql_query)":"\tPerform a database query that expects no results. \n\tReturns the number of rows affected.\n","connect":"Connect to the database server.\n"}},"DBI":{"module":"DBI","license":"BSD revised\n","copyright":"Jeremy Cowgar, 2006\n","description":"An object for wrapping libdbi to allow Io access to\na multitude of database systems transparently.\n","category":"Databases\n","slots":{"version":"Return string version of libdbi being used.\n","with(driverName)":" Get a new connection with the given driver.\n","drivers":"\tGet a list of drivers and it's associated information:\n\n\t<ol>\n\t\t<li>name<\/li>\n\t\t<li>description<\/li>\n\t\t<li>filename<\/li>\n\t\t<li>version<\/li>\n\t\t<li>date compiled<\/li>\n\t\t<li>maintainer<\/li>\n\t\t<li>url<\/li>\n\t<\/ol>\n","initWithDriversPath":"\tInitialize the DBI environment with the specified libdbi driver path.\n","init":"Initialize the DBI environment with the default driver path.\n"}},"DBIResult":{"module":"DBI","license":"BSD revised\n","copyright":"Jeremy Cowgar, 2006\n","description":"A DBI Result created by a call to DBIConn query.\n","category":"Databases\n","slots":{"foreach([Object], value, message)":"Loops over the records in the result starting at either the first result \n(if the cursor has never been moved) or it's current location if moved. i.e.\n\n<pre>\nr := conn query(\"SELECT * FROM people\")\nr foreach(r, r at(1))\n<\/pre>\n\nThe above would start at the first row, however, you can move around in the\nresult set and then foreach would pickup where you left off, for instance, say\nyou wanted to skip the first three rows:\n\n<pre>\nr := conn query(\"SELECT * FROM people\")\nr seek(4)\nr foreach(r, r at (1))\n<\/pre>\n\nThe above would start at the record #4, not at the beginning.\n\nThe optional Object parameter would cause a decendent of DBIRecord to be\npopulate instead of the index being set. This allows for advanced\nfunctionality. Please see `DBIRecord' for further information and an example.\n","fields":"Returns a list of field names in the result.\n","populate(object)":"\tPopulates a decendent of DBIRecord with the current record's contents. \n\tSee `DBIRecord' for further explanation and an example.\n","first":"Move the cursor to the first record.\n","done":"\tClose and free the result. This <b>must<\/b> be called on\neach result. Failure to do so will cause memory leaks and open queries with\nthe database server.\n","last":"Move the cursor to the last record.\n","position":"Return the current row's position (or index).\n","next":"Move the cursor to the next record.\n","at(index_or_name)":"\t Returns the contents of the given field. \n\t The parameter can be a field index or a field name.\n","size":"Returns the number of rows available.\n","seek(row_number)":" Move the cursor to the nth record.\n","previous":"Move the cursor to the previous record.\n"}},"DBIRecord":{"module":"DBI","license":"BSD revised\n","copyrigth":"Jeremy Cowgar, 2006\n","description":"A DBI Record. When utilizing `foreach' or `populate' methods\nof a DBIResult object, you can pass an optional Object cloned from DBIRecord.\nThis object will be populated with the row contents making it possible to\nwrite objects that represent your SQL results. A simple example would be:\n\n<pre>\nPerson := DBIRecord clone do (fullName := method(firstName..\" \"..lastName))\nq := conn query(\"SELECT id, firstName, lastName FROM people\")\nq foreach(Person, p, writeln(\"Name = \", p fullName))\n<\/pre>\n\nAs you can see, fullName was not in the SQL query, however, a dynamic method\nin your Person class.\n\nDBIRecord in and of itself provides no real functionality. It simply acts\nas an Object and stores the values from the SQL query into a Map. You can\naccess the field information:\n\n<pre>\no := r populate(Person)\no firstName            \/\/ would retrieve the firstName value of the SQL query\no setFirstName(\"John\") \/\/ would update the object's firstName value to be John\n<\/pre>\n\nDo not confuse the above example as updating the actual database. The call\nto setFirstName <i>only<\/i> updates the objects representation of firstName.\n","category":"Databases\n","slots":{"with(aMap)":" Returns a new DBIRecord instance for the given value map.\n","forward":"Private method that implements getting and setting values.\n"}}}},"Digests":{"UUID":{"UUID":{"module":"UUID","license":"\tBSD revised\n","copyright":"\tJonathan Wright, 2006\n","description":"\tGenerates <a href=http:\/\/en.wikipedia.org\/wiki\/Universally_Unique_Identifier>Universally Unique Identifiers <\/a> (UUID\/GUID).\n","category":"\tDigests\n","slots":{"uuidRandom":"\tReturns a new random uuid (type 4) in string format.\n","uuid":"\tReturns a new uuid in string format.\n","uuidTime":"\tReturns a new time and mac uuid (type 1) in string format.\n","urn":"Returns the uuid with \"urn:uuid:\" prepended to it.\n"}}},"MD5":{"MD5":{"module":"MD5","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"An object for calculating MD5 hashes. Each has calculation should instiate it's own MD5 instance.\n<p>\nExample:\n<pre>\ndigest := MD5 clone\ndigest appendSeq(\"this is a message\")\nout := digest md5String\n<\/pre>\n","category":"Digests\n","slots":{"md5String":"\tReturns a string containing a hexadecimal representation of the md5 hash.\n","md5":"\tCompletes the MD5 calculation and returns the hash as a Buffer. Once this method is called, append() should not be called again on the receiver or it will raise an exception.\n","appendSeq(aSequence)":"\tAppends aSequence to the hash calculation. Returns self.\n"}}},"SHA1":{"SHA1":{"module":"SHA1","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"An object for calculating SHA1 hashes. Each has calculation \nshould instiate it's own SHA1 instance.\n\n<p>\nExample:\n<pre>\ndigest := SHA1 clone\ndigest appendSeq(\"this is a message\")\nout := digest md5String\n<\/pre>\n","category":"Digests\n","slots":{"sha1":"\tCompletes the SHA1 calculation and returns the hash as a Buffer.\n\tOnce this method is called, append() should not be called again on the receiver or it will raise an exception.\n","sha1String":"\tReturns a string containing a hexadecimal representation of the sha1 hash.\n","appendSeq(aSequence)":"\tAppends aSequence to the hash calculation. Returns self.\n"}}}},"Filesystem":{"AsyncRequest":{"AsyncRequest":{"module":"AsyncRequest","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"Used for doing asynchronous file i\/o. When this addon is loaded, it will override\nthe File proto's readToBufferLength, readBufferOfLength and write methods to \nautomatically use AsyncRequests. \n<p>\nNote: This addon is only needed for async file request - all socket ops are already\nasynchronous in Io.\n","category":"Filesystem\n","slots":{"cancel":"\tCancels the request. Returns nil on error or self otherwise.\n","setDescriptor(aDescriptorNumber)":"\tSets the descriptor for the receiver. Returns self.\n","sync":"\tWaits for the request to complete. Returns nil on error or self otherwise.\n","read(aSeq, numberOfBytes)":"\tSubmits an async read request. Returns nil on error, self otherwise.\n","position":"\tReturns a Number for the position of the descriptor.\n","write(fileOffset, aSeq, bufferOffset, numberOfBytesToWrite)":"\tSubmits an async write request. Returns nil on error, self otherwise.\n","error":"\tReturns sequence containing the last error or nil otherwise.\n","numberOfBytes":"\tReturns the number of bytes associated with the request.\n","copyBufferto(aSeq)":"\tCopies the request buffer's data to aSeq.\n\tReturns nil on error or self otherwise.\n","isDone":"\tReturns true if the request is done, false otherwise.\n","descriptor":"\tReturns the descriptor for the request.\n"}}}},"Server":{"User":{"User":{"copyright":"Steve Dekorte, 2004\n","module":"User","slots":{"homeDirectory":"\tReturns the current user's home directory as a Directory object.\n","name":"\tReturns the current user's name.\n"},"license":"BSD revised\n","description":"\tThis object provides access to the local operating system's information \n\tabout the current user.\n","credits":"Windows code by Mike Austin\n","category":"Server\n"}},"Syslog":{"Syslog":{"module":"Syslog","license":"\tRevised BSD Revised\n","copyright":"\tJeremy Tregunna, 2005\n","description":"Provides access to a Unix system's system logger.\n<p>\n<pre>\nlogger = Syslog clone do(\n\tidentity(\"SyslogTest\")\n\tfacility(facilityMap at(\"LOG_USER\"))\n\toptions(List append(optionsMap at(\"LOG_PID\"), optionsMap at(\"LOG_CONS\")))\n\tpriority(priorityMap at(\"LOG_INFO\"))\n\topen(facility, options)\n\tmask(List append(maskMap at(\"LOG_PRIMASK\")))\n\tlog(priority, \"*** Merely a test ***\")\n\tclose\n)\n<\/pre>\t\n\n<p>\nNote: This is partially tested. Please let me know of any problems you happen to stumble across, or if it could be better. --Jeremy Tregunna\n<p>\n","category":"Server\n","slots":{"facility(optionalFacility)":"\tSpecifies the logging facility, which can be one of any of the values \n\tfound in the facilityMap map. If optionalFacility is omitted, returns \n\tthe currently set facility.\n","mask(optionalMask)":"\tIf optionalMask is specified, optionalMask is a list which contains \n\tany one or more values stored in the maskMap hash that will be OR'd \n\ttogether, to provide the proper mask. Returns the logging mask (as a List).\n","priority(optionalPriority)":"\tIf optionalPriority is specified, sets the value, and returns it. \n\tIf no value is specified, will return the previously stored value if \n\tone has been set previously.\n","priorityMap":"\tContains key\/value pairs for logging priorities for use when calling the log() method. These include:\n\t<p>\n\t<ul>\n\t<li>LOG_EMERG<\/li>\n\t<li>LOG_ALERT<\/li>\n\t<li>LOG_CRIT<\/li>\n\t<li>LOG_ERR<\/li>\n\t<li>LOG_WARNING<\/li>\n\t<li>LOG_NOTICE<\/li>\n\t<li>LOG_INFO<\/li>\n\t<li>LOG_DEBUG<\/li>\n\t<\/ul>\n","maskMap":"\tContains keys\/value pairs which represent numbers that specify the \n\tlogging mask. These values may be any one (or more) of the following:\n\t<p>\n\t<ul>\n\t<li>LOG_PRIMASK<\/li>\n\t<li>LOG_FACMASK<\/li>\n\t<\/ul>\n","options(optionalOptions)":"\tIf optionalOptions is specified, it should represent a list of the logging \n\toptions you can find in the optionsMap slot. All the values in the supplied \n\taList will be OR'd together when you call the open or reopen slots. \n\tReturns the list of options if optionalFacility is omitted.\n","facilityMap":"\tContains the following keys, which represent numbers that can be used when opening a log:\n\t<p>\n\t<ul>\n\t <li>LOG_KERN<\/li>\n\t <li>LOG_USER<\/li>\n\t <li>LOG_MAIL<\/li>\n\t <li>LOG_DAEMON<\/li>\n\t <li>LOG_AUTH<\/li>\n\t <li>LOG_SYSLOG<\/li>\n\t <li>LOG_LPR<\/li>\n\t <li>LOG_NEWS<\/li>\n\t <li>LOG_UUCP<\/li>\n\t <li>LOG_CRON<\/li>\n\t <li>LOG_AUTHPRIV<\/li>\n\t <li>LOG_FTP<\/li>\n\t <li>LOG_RESERVED0<\/li>\n\t <li>LOG_RESERVED1<\/li>\n\t <li>LOG_RESERVED2<\/li>\n\t <li>LOG_RESERVED3<\/li>\n\t <li>LOG_LOCAL0<\/li>\n\t <li>LOG_LOCAL1<\/li>\n\t <li>LOG_LOCAL2<\/li>\n\t <li>LOG_LOCAL3<\/li>\n\t <li>LOG_LOCAL4<\/li>\n\t <li>LOG_LOCAL5<\/li>\n\t <li>LOG_LOCAL6<\/li>\n\t <li>LOG_LOCAL7<\/li>\n\t<\/ul>\n","log":"\tWrites the supplied data to the log. Requires 2 arguments:\n\t<p>\n\t<ul>\n\t<li>Logging Priority<\/li>\n\t<li>Message to log<\/li>\n\t<\/ul>\n","isOpen":"\tReturns self if the log is opened for writing. Otherwise, returns Nil.\")\n","optionsMap":"\tA map containing key\/value pairs holding all available options. These include:\n\t<p>\n\t<ul>\n\t<li>LOG_PID<\/li>\n\t<li>LOG_CONS<\/li>\n\t<li>LOG_ODELAY<\/li>\n\t<li>LOG_NDELAY<\/li>\n\t<li>LOG_NOWAIT<\/li>\n\t<li>LOG_PERROR<\/li>\n\t<\/ul>\n","open(aPriority, someOptions, optionalIdentity)":"\tOpens the syslog for writing. optionalIdentity need not be entered \n\tand will default to the name of the distribution of Io you are running \n\tor if you have embedded Io into your application and set \n\tLobby distribution = \"foo\", it will be set to \"foo\".\n","reopen(aFacility, someOptions, optionalIdentity)":"\tReopens an already open log session. This is useful if you wish to \n\tchange the facility you are logging to, the options you are logging \n\twith, or the identity of the session. Takes the same options as the open slot.\n","identity(optionalIdentity)":"\tIf optionalIdentity is specified, provides an identity for all of the messages you will be sending to the syslog daemon. Returns the identity.\")\n","close":"\tCloses a log that has previously been opened for writing.\")\n"}}},"NullAddon":{"NullAddon":{"module":"NullAddon","license":"BSD revised\n","copyright":"Samuel A. Falvo II, 2007\n","description":"A do-nothing addon for Io, primarily intended to serve as\na skeleton for writing your own addons, without having to\nrewrite all the boilerplate yourself. It implements only\none method, hello, which does the obvious job of greeting the world.\n","category":"Server\n","slots":{}}},"EditLine":{"EditLine":{"module":"EditLine","license":"BSD revised\n","copyright":"Jonathan Wright, 2007\n","description":"Binding to libedit (BSD version of readline).\n","category":"Server\n","slots":{}}},"Curses":{"Curses":{"copyright":"Steve Dekorte, 2004\n","module":"Curses","slots":{"echo":"\tEchoes user input to terminal. Returns self.\n","begin":"\tSets the terminal to curses mode. \n\tThis should be called before any other curses methods. \n\tReturns self.\n","getCh":"\tReads a single-byte character from the terminal associated with the \n\tcurrent or specified window. Returns a Number containing the byte.\n","x":"\tReturns the cursor x position.\n","setForegroundYellow":"\tSets the foreground color to yellow.\n","refresh":"\tCopies the current buffer to the screen. This must be called to make \n\tchanges to the screen. Returns self.\n","setForegroundBlue":"\tSets the foreground color to blue.\n","end":"\tEnds curses mode. This should be called before standard io's read \n\tand write methods are used. Returs self.\n","input(n)":"\tReturns user input up to a return, or a maximun of n characters.\n","cBreak(aString)":"\tDisables line buffering and erase\/kill character-processing. \n\tcBreak should be on for most purposes. Returns self.\n","setScrollingRegion(top, bottom)":"    Sets the scrolling region; top and bottom are the line numbers of the top\n    and button margin. Returns self.\n","setBackgroundCyan":"\tSets the background color to cyan.\n","setForegroundRed":"\tSets the foreground color to red.\n","scrollok(aBoolean)":"    Enables \/ Disables automatic scrolling. Return self.\n","nodelay(aBoolean)":"\tEnables or disables block during read. \n\tIf aNumber is zero, nodelay is set to be false, otherwise it is set to be true.\n","setBackgroundMagenta":"\tSets the background color to magenta.\n","insert(aString)":"\tInserts the string at the current position on the terminal, \n\tpushing existing text to the right. Returns self.\n","setForegroundGreen":"\tSets the foreground color to green.\n","setBackgroundYellow":"\tSets the background color to yellow.\n","height":"\tReturns a Number containing the height of the current screen.\n","setForegroundCyan":"\tSets the foreground color to cyan.\n","hasColors":"\tReturns true if the terminal supports color, false otherwise.\n","setBackgroundBlue":"\tSets the background color to blue.\n","clearToEndOfLine":"\tClears the text from the cursor to the end of the line. Returns self.\n","setForegroundMagenta":"\tSets the foreground color to magenta.\n","y":"\tReturns the cursor y position.\n","move(x, y)":"\tMoves the cursor to column y and row x on the terminal. \n\t(0, 0) is at the top-left of the terminal. Returns self.\n","scroll(num)":"    Scrolls up num lines.\n    num is optional and defaults to 1. Returns self.\n","writeCharacter(aCharacter)":"\tPrints the aCharacter to the current position on the terminal, \n\toverwriting existing text on the terminal. Returns self.\n","noCBreak":"\tAllows line buffering and erase\/kill character-processing. \n\tcBreak should be on for most purposes. Returns self.\n","clear":"\tClears the terminal. Nicer than erase. Returns self.\n","setBackgroundGreen":"\tSets the background color to green.\n","setBackgroundBlack":"\tSets the background color to black.\n","width":"\tReturns a Number containing the width of the current screen.\n","setForegroundWhite":"\tSets the foreground color to white.\n","setBackgroundRed":"\tSets the background color to red.\n","setForegroundBlack":"\tSets the foreground color to black.\n","noEcho":"\tDoes not echo user input to terminal. Returns self.\n","setBackgroundWhite":"\tSets the background color to white.\n","delete(n)":"\tDeletes n characters at the current position. Text to the right is shifted left. \n\tn is optional and defaults to 1. Returns self.\n","get(n)":"\tReturns n characters from the terminal. n is optional and defaults to 1.\n","print(aString)":"\tPrints the string to the current position on the terminal, \n\toverwriting existing text on the terminal. Returns self.\n"},"license":"BSD revised\n","description":"Curses allows writing and reading at arbitrary positions on the terminal. You have to call init to set the terminal to curses mode and end to end curses mode. The terminal is not updated until refresh is called. It is a bad idea to use the standard io's read and write methods when the terminal is in curses mode. The Curses primitive was written by Edwin Zacharias.\n<BR><BR>\nHere's an example that prints Hello at column 5 and row 7;\n<p>\n<pre>\nCurses init\nCurses move(5, 7) print(\\\"Hello\\\")\nCurses refresh\nCurses end\n<\/pre>\n","credits":"Original version by Edwin Zacharias. getCh method by Scott Dunlop.\n","category":"Server\n"}},"SystemCall":{"SystemCall":{"module":"SystemCall","license":"BSD revised\n","description":"A binding for \"callsystem - system() on steorids\"\n\n<UL>\n<LI> asynchonous running of a child process\n<LI> setup of the environment\n<LI> substitution of environment variables\n<LI> connect all 3 standard streams to pipes, null devices, or files\n<LI> pathname handling\n<\/UL>\n\nExample use;\n<pre>\t\nsc = SystemCall clone\n<\/pre>\n","category":"Server\n","slots":{"asyncRun(command, argList, envMap)":" Run the system call.\n"}}},"ReadLine":{"ReadLine":{"module":"ReadLine","license":"BSD revised\n","copyright":"Jonaa Eschenburg, 2007\n","description":"Binding to GNU readline.\n","category":"Server\n","slots":{}}}},"Physics":{"ODE":{"ODEWorld":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","description":"ODEWorld binding\n","category":"Physics\n","slots":{}},"ODEHinge":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","description":"ODEHinge binding\n","category":"Physics\n","slots":{}},"ODEJoint":{"license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","module":"ODE","slots":{},"Jonathan":"Wright\", 2006)\n","copyrigth":"Jonathan Wright, 2006\n","description":"ODEJoint binding\n","category":"Physics\n"},"ODESimpleSpace":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","description":"ODESimpleSpace binding\n","category":"Physics\n","slots":{}},"ODEContactJoint":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","description":"ODEContactJoint binding\n","category":"Physics\n","slots":{}},"ODEBox":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","description":"ODEBox binding\n","category":"Physics\n","slots":{}},"ODEContact":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","description":"ODEContact binding\n","category":"Physics\n","slots":{}},"ODEBody":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","description":"ODEBody binding\n","category":"Physics\n","slots":{}},"ODEBall":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","description":"ODEBall binding\n","category":"Physics\n","slots":{}},"ODEFixed":{"module":"ODE","copy":"Jonathan Wright\", 2006)\n","license":"BSD revised\n","description":"ODEFixed binding\n","category":"Physics\n","slots":{}},"ODEJointGroup":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","description":"ODEJointGroup binding\n","category":"Physics\n","slots":{}},"ODEMass":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright, 2006\n","description":"ODEMass binding\n","category":"Physics\n","slots":{}},"ODEPlane":{"module":"ODE","license":"BSD revised\n","copyrigth":"Jonathan Wright, 2006\n","description":"ODEPlane binding\n","category":"Physics\n","slots":{}},"ODEHinge2":{"module":"ODE","license":"BSD revised\n","copyright":"Jonathan Wright\", 2006)\n","description":"ODEJoint binding\n","category":"Physics\n","slots":{}}}},"Compression":{"Zlib":{"ZlibDecoder":{"module":"Zlib","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"For <a href=http:\/\/en.wikipedia.org\/wiki\/Zlib>Zlib<\/a> uncompression.\nExample use;\n<pre>\t\nz = ZlibDecoder clone\nz beginProcessing\nz inputBuffer appendSeq(inputData)\nz process\nz endProcess\nresult := z outputBuffer \n<\/pre>\n","category":"Compression\n","slots":{"inputBuffer":"The input buffer for decoding.\n","outputBuffer":"The output buffer for decoding.\n","process":"\tProcess the inputBuffer and appends the result to the outputBuffer.\n\tThe processed inputBuffer is empties except for the spare bytes at the end which don't fit into a cipher block.\n","beginProcessing":"\tInitializes the algorithm.\n","endProcessing":"\tFinish processing remaining bytes of inputBuffer.\n"}},"ZlibEncoder":{"module":"Zlib","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"For <a href=http:\/\/en.wikipedia.org\/wiki\/Zlib>Zlib<\/a> compression.\nExample use:\n<p>\n<pre>\t\nz = ZlibEncoder clone\nz beginProcessing\nz inputBuffer appendSeq(\"this is a message\")\nz process\nz endProcess\nresult := z outputBuffer\n<\/pre>\n","category":"Compression\n","slots":{"inputBuffer":"The input buffer for decoding.\n","outputBuffer":"The output buffer for decoding.\n","process":"\tProcess the inputBuffer and appends the result to the outputBuffer.\n\tThe processed inputBuffer is empties except for the spare bytes at \n\tthe end which don't fit into a cipher block.\n","beginProcessing":"\tInitializes the algorithm.\n","endProcessing":"\tFinish processing remaining bytes of inputBuffer.\n"}},"Zlib":{"module":"Zlib","description":"The Zlib object can be used to compress and uncompress data using the \n<a href=http:\/\/en.wikipedia.org\/wiki\/Zlib>zlib<\/a> \nlossless data compression algorithm.\n<p>\nExample use;\n<pre>\ncompressedData := Zlib compress(uncompressedData)\nuncompressedData := Zlib uncompress(compressedData)\n<\/pre>\n","category":"Compression\n","slots":{"compress(aSeq)":" Returns a compressed version of aSeq.\n","uncompress(aSeq)":" Returns a uncompressed version of aSeq.\n"}}},"LZO":{"LZO":{"module":"LZO","description":"The LZO object can be used to compress and uncompress data using the \n<a href=http:\/\/en.wikipedia.org\/wiki\/Lempel-Ziv-Oberhumer> Lempel-Ziv-Oberhumer (LZO)<\/a> \nlossless data compression algorithm.\n<p>\nExample use;\n<pre>\ncompressedData := LZO compress(uncompressedData)\nuncompressedData := LZO uncompress(compressedData)\n<\/pre>\n","category":"Compression\n","slots":{"compress(aSeq)":" Returns a compressed version of aSeq.\n","uncompress(aSeq)":" Returns a uncompressed version of aSeq.\n"}},"LZOEncoder":{"module":"LZO","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"The LZOEncoder object can be used to compress  data using the \n<a href=http:\/\/en.wikipedia.org\/wiki\/Lempel-Ziv-Oberhumer> Lempel-Ziv-Oberhumer (LZO)<\/a> \nlossless data compression algorithm.\n<p>\nExample use;\n<pre>\t\nz = LZOEncoder clone\nz beginProcessing\nz inputBuffer appendSeq(\"this is a message\")\nz process\nz endProcess\nresult := z outputBuffer \n<\/pre>\n","category":"Compression\n","slots":{"beginProcessing":"\tInitializes the algorithm.\n","process":"\tProcess the inputBuffer and appends the result to the outputBuffer.\n\tThe processed inputBuffer is empties except for the spare bytes at \n\tthe end which don't fit into a cipher block.\n","endProcessing":"\tFinish processing remaining bytes of inputBuffer.\n"}},"LZODecoder":{"module":"LZO","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"The LZO object can be used to  uncompress data using the \n<a href=http:\/\/en.wikipedia.org\/wiki\/Lempel-Ziv-Oberhumer> Lempel-Ziv-Oberhumer (LZO)<\/a> \nlossless data compression algorithm.\n<p>\nExample use;\n<pre>\t\nz = LZODecoder clone\nz beginProcessing\nz inputBuffer appendSeq(\"this is a message\")\nz process\nz endProcess\nresult := z outputBuffer \n<\/pre>\n","category":"Compression\n","slots":{"beginProcessing":"\tInitializes the algorithm.\n","process":"\tProcess the inputBuffer and appends the result to the outputBuffer.\n\tThe processed inputBuffer is empties except for the spare bytes at \n\tthe end which don't fit into a cipher block.\n","endProcessing":"\tFinish processing remaining bytes of inputBuffer.\n"}}}},"Parsers":{"Libxml2":{"XmlReader":{"module":"Libxml2","category":"Parsers\n","slots":{}},"XmlWriter":{"module":"Libxml2","category":"Parsers\n","slots":{}}},"SGML":{"SGMLElement":{"Representation":"of an SGML \/ HTML \/ XML tag.\n","module":"Generys","category":"Parsers\n","slots":{"asString":"Returns a String representation of the tag and all of it's subitems.\n","addClassName(className)":" Adds class name to caller if absent.\n","root":"Returns root element.\n","positionInParent()":" Returns index at which current element is in its parent.\n","subitems":"Returns a List containing the tag's subitems.\n","removeClassName(className)":" Removes class name from caller.\n","name":"Returns the tag name\n","elementsBySelector(selector, results)":"  Returns direct children of current element which are matched by <code>selector<\/code>. It can be either Sequence or decomposed selector (Map returned by <code>SelectorDecomposer decompose()<\/code>).\n  <code>results<\/code> is an optional argument which may contain List of other elements\n","insertBefore(element)":" Inserts element before caller in caller's parent.\n","next([move])":" Returns element after the caller.\n","findFirst(query)":" Returns first item of result returned by <code>SGMLElement find()<\/code>.\n","insertAfter(element)":" Inserts element after caller in caller's parent.\n","adopt(htmlCode)":" Converts <code>htmlCode<\/code> to SGMLElement and sets caller as its parent.\n","append(element)":" Appends <code>element<\/code> at the end of the caller element.\n","find(query)":" Returns all child elements (List) relative to the caller which match query.\n","attributes":"Returns a Map containing the tag's attributes.\n","prepend(element)":" Appends <code>element<\/code> at the bottom of the caller element.\n","prev([move])":" Returns element before the caller.\n","isMatchedBySelector(anSelector)":" Tests if element matches <code>anSelector<\/code>.\n","setName(aString)":" Sets the tag name. Returns self.\n","setAttribute(attributeName, value)":" Sets attribute.\n"}},"SGMLParser":{"module":"SGML","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"This object can be used to parse SGML \/ HTML \/ XML.\n","category":"Parsers\n","slots":{"parse(aSequence)":"\tParses aSequence and calls the following methods on self;\n<pre>\t\nstartElement(name)\nendElement(name)\nnewAttribute(key, value)\nnewText(text)\n<\/pre>\t\nfor each of the items it finds. Returns self.\n","tagForString(aSequence)":"Parses aSequence and returns an SGMLTag object.\n"}}},"Fnmatch":{"Fnmatch":{"module":"Fnmatch","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"The fnmatch add on adds support for the unix fnmatch function. \n(See fnmatch man page for details). \nNote: not all options are supported on all platforms.\n","category":"Parsers\n","slots":{"pathNameOff":"\tSee pathNameOn.\n","noEscapeOn":"\tIf not set, a backslash character (\\) in pattern followed by any other \n\tcharacter will match that second character in string. \n\tIn particular, \"\\\\\" will match a backslash in string. \n\tIf set, a backslash character will be treated as an ordinary character.\n","noEscapeOff":"\tSee noEscapeOn.\n","caseFoldOff":"\tSee caseFoldOn.\n","periodOff":"\t\"See periodOn.\n","pathNameOn":"\tIf set, a slash (\/) character in string will be explicitly matched \n\tby a slash in pattern; it will not be matched by either the asterisk (*) \n\tor question-mark (?) special characters, nor by a bracket ([]) expression. \n\tIf not set, the slash character is treated as an ordinary character.\n","leadingDirOn":"\tIgnore rest after successful pattern matching.\n","setString(aString)":"\tSets the string to do matching on.\n","hasMatch":"\tReturns true if a match is found, false otherwise.\n","caseFoldOn":"\tIgnore case distinctions in both the pattern and the string.\n","string":"\tThe string to do matching on.\n","leadingDirOff":"\tSee leadingDirOn.\n","matchFor(aString)":"\tReturns self if aString matches the pattern, otherwise returns nil.\n","setPattern(aString)":"\tSets the pattern string. Returns self.\n","pattern":"\tReturns the pattern string.\n","periodOn":"\tIf set, a leading period in string will match a period in pattern; where the location of ``leading'' is indicated by the value of FNM_PATHNAME:\n<UL>\n<LI>If FNM_PATHNAME is set, a period is ``leading'' if it is the first character in string or if it immediately follows a slash.\n\n<LI>If FNM_PATHNAME is not set, a period is ``leading'' only if it is the first character of string.\n<\/UL>\n<p>\nIf not set, no special restrictions are placed on matching a period.\n"}}},"Yajl":{"YajlParser":{"module":"Yajl","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"This object can be used to parse Yajl \/ HTML \/ XML.\n","category":"Parsers\n","slots":{}},"YajlGenParser":{"module":"Yajl","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"This object can be used to parse YajlGen \/ HTML \/ XML.\n","category":"Parsers\n","slots":{}}},"Regex":{"RegexMatch":{"module":"Regex","description":"Contains the result of a regular expression match operation.\nIt acts as a read-only list of captured strings.\nThe first item is the entire matched string.\nEach item after that is a captured sub pattern (anything inbetween\nparenthesis in the pattern).\n\n<pre>\nIo> match := \"37signals\" findRegex(\"([0-9]+)([a-z]+)(!!)?\")\n==> RegexMatch: \"37signals\" \n\n# Item 0 is the entire matched string:\nIo> match at(0)\n==> 37signals\n\n# Item 1 is the first capture (\"[0-9]+\"):\nIo> match at(1)\n==> 37\n\n# Item 2 is the second capture (\"[a-z]+\"):\nIo> match at(2)\n==> signals\n\n# The third sub pattern wasn't part of the match, so item 3 is nil:\nIo> match at(3)\n==> nil\n\n# You can access captures by name:\nIo> match at(\"number\")\n==> 37\nIo> match at(\"word\")\n==> signals\n<\/pre>\n","category":"Parsers\n","slots":{"nameOf(index)":"\tReturns the name of the capture with the given index.\n","range":"\tReturns the range of the match in the subject.\n","prefix":"\tReturns a slice of the subject string that contains all text before this match.\n\tEquivalent to:\n\t<pre>\n\tmatch subject slice(0, match start)\n\t<\/pre>\n","end":"\tReturns the index into the subject at which the match ends.\n","rangeOf(indexOrName)":"\tReturns the range of the capture with the given index or name.\n","indexOf(name)":"\tReturns the index of the capture with the given name.\n","sizeInChars":"\tReturns the length of the match, in characters.\n","at(indexOrName)":"\tReturns the capture with the given index or name. <code>at(0)<\/code> is the entire match.\n","expandTo(templateString)":"\tReturns <em>templateString<\/em> with capture placeholders replaced with what they represent.\n\t<code>$0<\/code> is replaced with the whole match, <code>$1<\/code> is replaced with the first\n\tsub capture, etc. <code>${name}<\/code> is replaced with the capture of that name.\n","ranges":"\tReturns a list containing the range of each capture.\n","names":"\tReturns a list of the name of each named capture.\n\tIf there are no named captures, the list will be empty.\n","foreach([index], capture, message)":"\tLoops through the captures, assigns each capture to <em>capture<\/em>, and evaluates <em>message<\/em>.\n\tReturns a list with the result of each evaluation.\n","string":"\tReturns the matched string.\n","postfix":"\tReturns a slice of the subject string that contains all text after this match.\n\tEquivalent to:\n\t<pre>\n\tmatch subject slice(match end)\n\t<\/pre>\n","asString":"\tReturns a string containing a textual representation of the receiver.\n","size":"\tReturns the number of captures.\n","captures":"\tReturns a list of captured strings. The first element is the whole match.\n","regex":"\tReturns the Regex that was used to find this match.\n","endOf(indexOrName)":"\tReturns the index into the subject at which the capture with the given index or name ends.\n","start":"\tReturns the index into the subject at which the match starts.\n","map([index], capture, message)":"\tLike <code>foreach<\/code>, but the result of each evaluation of <em>message<\/em> is returned in a list.\n","startOf(indexOrName)":"\tReturns the index into the subject at which the capture with the given index or name starts.\n","subject":"\tReturns the string that this match was found in.\n","select([index], capture, message)":"\tLike <code>foreach<\/code>, but the values for which the result of evaluating <em>message<\/em> are non-nil are returned\n\tin a list.\n","slice(startIndex, [endIndex])":"\tReturns a new list containing the subset of the receiver from the <em>startIndex<\/em> to the <em>endIndex<\/em>.\n\tThe <em>endIndex<\/em> argument is optional. If not given, it is assumed to be the end of the capture list.\n"}},"RegexMatche":{"module":"Regex","license":"BSD revised\n","copyright":"Daniel Rosengren danne.rosengren@gmail.com\n","description":"","category":"Parsers\n","slots":{}},"RegexMatches":{"module":"Regex","license":"BSD revised\n","copyright":"Daniel Rosengren danne.rosengren@gmail.com\n","description":"A regular expression match iterator.\n","category":"Parsers\n","slots":{"replaceAllWith(templateString)":"\tSame as:\n\t<pre>\n\treplace(match, match expandTo(templateString))\n\t<\/pre>\n","string":"\tReturns the string that the receiver finds matches in.\n","all":"\tReturns a list containing all matches in the string.\n","allowEmptyMatches":"\tTells the receiver to allow zero length matches. Empty matches are allowed by default.\n\tReturns self.\n","next":"\tReturns the next match, or nil if there is none.\n","setRegex(aRegexOrString)":"\tSets the regex to find matches in. Returns self.\n","map(value, message)":"\tLike <code>foreach<\/code>, but the result of each evaluation of <em>message<\/em> is returned\n\tin a list.\n","regex":"\tReturns the Regex that the receiver uses for finding matching.\n","setString(aString)":"\tSets the string to find matches in. Returns self.\n","disallowEmptyMatches":"\tTells the receiver not to allow zero length matches. Returns self.\n","replace(name, message)":"\tReplaces each match in the string with the result of <em>message<\/em> and returns\n\tthe resulting string.\n","anchored":"\tLike <code>next<\/code>, but will only match at the current search position.\n","foreachInterval(value, matchMessage, nonMatchMessage)":"\tLike <code>foreach<\/code>, but takes an extra message that will be evaluated for the non-matching\n\ttext before each match, and the non-matching text after the last match.\n","setEndPosition(anIndex)":"\tSets the index in the string where the receiver should stop searching. It will be as\n\tif the string ends at that index. If <em>index<\/em> is nil, the end position will be set\n\tto the end of string.\n\tReturns self.\n\n\t<pre>\n\tIo> \"funkadelic\" matchesOfRegex(\"\\\\w+\") setEndPosition(4) next string\n\t==> funk\n\n\tIo> \"funkadelic\" matchesOfRegex(\"\\\\w+\") setEndPosition(nil) next string\n\t==> funkadelic\n\t<\/pre>\n","last":"\tReturns the last match in the string.\n","splitString":"\tSplits the string being matched against into pieces using the regex as the delimiter\n\tand returns the piece as a list of strings.\n","reset":"\tResets the search position to the beginning of the string. Returns self.\n","position":"\tReturns the search position as an index in the string.\n","foreach(value, message)":"\tLoops through the matches, assigns each match to <em>value<\/em>, and evaluates <em>message<\/em>.\n\tReturns the result of the last evaluation.\n","endPosition":"\tReturns the index in the string where the receiver stops searching.\n","allowsEmptyMatches":"\tReturns true if the receiver allows empty matches, false if not.\n","setPosition(aRegexOrString)":"\tSets the search position to the given index in the string. Returns self.\n"}},"Regex":{"module":"Regex","license":"BSD revised\n","copyright":"Steve Dekorte 2005, Daniel Rosengren 2007\n","description":"<p>The Regex addon adds support for Perl regular expressions\nusing the <a href=http:\/\/www.pcre.org\/>PCRE<\/a> library by Philip Hazel.<\/p>\n\n<h4>Example 1<\/h4>\n<pre>\t\nIo> re := \"is.*a\" asRegex\nIo> \"This is a test. This is also a test.\" \\\n    allMatchesOfRegex(\"is.*a\") replaceAllWith(\"is not a\")\n==> \"This is not a test. This is not a test.\n<\/pre>\n\n<h4>Example 2<\/h4>\n<pre>\t\nIo> \"11aabb\" allMatchesOfRegex(\"aa*\")\n==> list(\"a\", \"a\")\n\nIo> re := \"(wom)(bat)\" asRegex\nIo> \"wombats are cuddly\" matchesOfRegex(re) replaceAllWith(\"$2$1!\")\n==> batwom!s are cuddly\n<\/pre>\n","category":"Parsers\n","slots":{"isMultiline":"\tReturns true if the receiver is in multiline mode, false if not.\n","isExtended":"\tReturns true if the receiver is in extended mode, false if not.\n","notMultiline":"\tThe reverse of multiline.\n","matchesIn(aString)":"\tReturns a RegexMatches object that enumerates the matches of the receiver\n\tin the given string.\n","multiline":"\t<p>Returns a clone of the receiver with the multiline option turned on,\n\tor self if the receiver itself has the option turned on.<\/p>\n\n\t<p>In multiline mode, \"^\" matches at the beginning of the string and at\n\tthe beginning of each line; and \"$\" matches at the end of the string,\n\tand at the end of each line.\n\tBy default \"^\" only matches at the beginning of the string, and \"$\"\n\tonly matches at the end of the string.<\/p>\n\n\t<pre>\t\n\tIo> \"A\\nB\\nC\" allMatchesForRegex(\"^.\")\n\t==> list(\"A\")\n\n\tIo> \"A\\nB\\nC\" allMatchesForRegex(\"^.\" asRegex multiline)\n\t==> list(\"A\", \"B\", \"C\")\n\t<\/pre>\n","captureCount":"\tReturns the number of captures defined by the pattern.\n","asString":"\tReturns a string containing a textual representation of the receiver.\n","names":"\tReturns a list of the name of each named capture.\n\tIf there are no named captures, the list will be empty.\n","namedCaptures":"\tReturns a Map that contains the index of each named group.\n","caseless":"\tReturns a case insensitive clone of the receiver, or self if the receiver itself is\n\tcase insensitive:\n\n\t<pre>\t\n\tIo> \"WORD\" matchesRegex(\"[a-z]+\")\n\t==> false\n\n\tIo> \"WORD\" matchesRegex(\"[a-z]+\" asRegex caseless)\n\t==> true\n\t<\/pre>\n","nameTable":"\tReturns a list with the name of each capture.\n\tThe first element will always be nil, because it corresponds to the whole match.\n\tThe second element will contain the name of the first capture, or nil if the first\n\tcapture has no name.\n\tAnd so on.\n","pattern":"\tReturns the pattern string that the receiver was created from.\n","with(pattern)":"\tReturns a new Regex created from the given pattern string.\n","notCaseless":"\tThe reverse of caseless.\n","notExtended":"\tThe reverse of extended.\n","notDotAll":"\tThe reverse of dotAll.\n","isDotAll":"\tReturns true if the receiver is in dotall mode, false if not.\n","version":"\tReturns a string with PCRE version information.\n","isCaseless":"\tReturns true if the receiver is case insensitive, false if not.\n","dotAll":"\t<p>Returns a clone of the receiver with the dotall option turned on,\n\tor self if the receiver itself has the option turned on.<\/p>\n\n\t<p>In dotall mode, \".\" matches any character, including newline. By default\n\tit matches any character <em>except<\/em> newline.<\/p>\n\n\t<pre>\t\n\tIo> \"A\\nB\" matchesOfRegex(\".+\") next string\n\t==> A\n\n\tIo> \"A\\nB\" matchesOfRegex(\".+\" asRegex dotAll) next string\n\t==> A\\nB\n\t<\/pre>\n","extended":"\t<p>Returns a clone of the receiver with the extended option turned on,\n\tor self if the receiver itself has the option turned on.<\/p>\n\n\t<p>In extended mode, a Regex ignores any whitespace character in the pattern\texcept\n\twhen escaped or inside a character class. This allows you to write clearer patterns\n\tthat may be broken up into several lines.<\/p>\n\n\t<p>Additionally, you can put comments in the pattern. A comment starts with a \"#\"\n\tcharacter and continues to the end of the line, unless the \"#\" is escaped or is\n\tinside a character class.<\/p>\n","asRegex":"\tReturns self.\n"}}}},"Core":{"Core":{"Compiler":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"Contains methods related to the compiling code.\n","category":"Core\n","slots":{"messageForString(aString, optionalLabelString)":"\tReturns the compiled message object for aString.\n","messageForTokens(aList)":"\tReturns the compiled message object for the given token list.\n","tokensForString(aString)":"\tReturns a list of token objects lexed from the input string.\n","messageForString2(aString)":"\tReturns the compiled message object for aString. (Runs raw string against lexer directly.)\n"}},"Sandbox":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"Sandbox can be used to run separate instances of Io within the same process.\n","category":"Core\n","slots":{"messageCount":"\tReturns a number containing the messageCount limit of the Sandbox.\n","printCallback(string)":" default implementation is; method(string, string print)\n","setMessageCount(anInteger)":"\tSets the messageCount limit of the receiver.\n","setTimeLimit(aDouble)":"\tSets the time limit of the Sandbox.\n","doSandboxString(aString)":"\tEvaluate aString inside the Sandbox.\n","timeLimit":"\tReturns a number containing the time limit of calls made to the Sandbox.\n"}},"Object":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"An Object is a key\/value dictionary with string keys and values of any type.\nThe prototype Object contains a clone slot that is a CFuntion that creates new objects.\nWhen cloned, an Object will call it's init slot (with no arguments).\n","category":"Core\n","slots":{"returnIfNonNil":"\tReturns the receiver from the current execution block if it is non nil. \n\tOtherwise returns the receiver locally.\n","forward":"Called when the receiver is sent a message it doesn't recognize.\nDefault implementation raises an \"Object doesNotRespond\" exception.\nSubclasses can override this method to implement proxies or special error handling.\n<p>\nExample:\n<p>\n<pre>\nmyProxy forward = method(\n\tmessageName := thisMessage name\n\targuments := thisMessage arguments\n\tmyObject doMessage(thisMessage)\n)\n<\/pre>\n","do(expression)":"\tEvaluates the message in the context of the receiver. Returns self.\n","thisMessage":"\tReturns the calling message (i.e. thisMessage itself, huh).\n","doFile(pathString)":"\tEvaluates the File in the context of the receiver. Returns the result.\n\tpathString is relative to the current working directory.\n","uniqueHexId":"  Returns uniqueId in a hexadecimal form (with a \"0x\" prefix)\n  <pre>\n  Io> Object uniqueId\n  ==> 3146784\n  Io> Object uniqueHexId\n  ==> 0x300420\n  <\/pre>\n","write(<any number of arguments>)":"\tSends a print message to the evaluated result of each argument. Returns Nil.\n","not":"Returns nil.\n","wait(s)":"Pauses current coroutine for at least <tt>s<\/tt> seconds.\n<br\/>\nNote: current coroutine may wait much longer than designated number of seconds\ndepending on circumstances.\n","yield":"  Yields to another coroutine. Does nothing if yieldingCoros queue is empty.\n  <br\/>\n  See Coroutine documentation for more details.\n","updateSlot(slotNameString, valueObject)":"\tSame as setSlot(), but raises an error if the slot does not\n\talready exist in the receiver's slot lookup path.\n","persistMetaData":"Force immediate persistence of this object's type data into PDB\n","persistData":"Force immediate persistence of this object's serialized form (using asSerialization)\ninto PDB, if possible.\n","setIsActivatable(aValue)":"\tWhen called with a non-Nil aValue, sets the object\n\tto call it's activate slot when accessed as a value. Turns this behavior\n\toff if aValue is Nil. Only works on Objects which are not Activatable\n\tPrimitives (such as CFunction or Block). Returns self.\n","shallowCopy":"\tReturns a shallow copy of the receiver.\n","@":"  Sends asynchronous message to an object, returns a FutureProxy.\n  <br\/>\n  Caller coroutine is paused when proxy is accessed (i.e. message is sent)\n  till result is ready. Proxy will become an actual result when it is ready.\n  <br\/>\n  See IoGuide for more information.\n  <br\/>\n  Usage: obj @someMethod(a, b, c)\n","stopStatus":"\tReturns the internal IoState->stopStatus.\n","clone":"\tReturns a clone of the receiver.\n","isIdenticalTo(aValue)":"\tReturns true if the receiver is identical to aValue, false otherwise.\n","removeAllSlots":"\tRemoves all of the receiver's slots. Returns self.\n","(expression)":"\tThe '' method evaluates the argument and returns the result.\n","if(<condition>, <trueMessage>, <optionalFalseMessage>)":"\tEvaluates trueMessage if condition evaluates to a non-Nil.\n\tOtherwise evaluates optionalFalseMessage if it is present.\n\tReturns the result of the evaluated message or Nil if none was evaluated.\n","setProto(anObject)":"\tSets the first proto of the receiver to anObject, replacing the\n\tcurrent one, if any. Returns self.\n","compactState":"\tAttempt to compact the memory of the IoState if possible.\n","compare(anObject)":"\tReturns a number containing the comparison value of the target with anObject.\n","setPpid":"PDB extension to set the value returned by ppid.\n","and(arg)":" Evaluates argument and returns the result.\n","ifNil(arg)":" Does nothing, returns self.\n","setSlotWithType(slotNameString, valueObject)":"\tSets the slot slotNameString in the receiver to\n\thold valueObject and sets the type slot of valueObject\n\tto be slotNameString. Returns valueObject.\n","super(aMessage)":"\tSends the message aMessage to the receiver's proto with the context of self. Example:\n\t<pre>\n\tself test(1, 2)   \/\/ performs test(1, 2) on self\n\tsuper(test(1, 2)) \/\/ performs test(1, 2) on self proto but with the context of self\n\t<\/pre>\n","setProtos(aList)":"\tReplaces the receiver's protos with a copy of aList. Returns self.\n","thisLocalContext":"\tReturns current locals.\n","inlineMethod":"  Creates a method which is executed directly in a receiver (no Locals object is created).\n  <br\/>\n  <pre>\n  Io> m := inlineMethod(x := x*2)\n  Io> x := 1\n  ==> 1\n  Io> m\n  ==> 2\n  Io> m\n  ==> 4\n  Io> m\n  ==> 8\n  <\/pre>\n","thisContext":"\tSynonym to self.\n","for(<counter>, <start>, <end>, <do message>)":"\tA for-loop control structure. See the io Programming Guide for a full description.\n","!=(aValue)":"\tReturns true the receiver is not equal to aValue, false otherwise.\n","self":"\tReturns self.\n","block(args..., body)":"\tCreates a block and binds it to the sender context (i.e. lexical context).\n\tIn other words, block locals' proto is sender's locals.\n\t<tt>args<\/tt> is a list of formal arguments (can be empty). <br\/>\n\t<tt>body<\/tt> is evaluated in the context of Locals object.<br\/>\n\tSee also <tt>Object method<\/tt>.\n\t<br\/>\n\t<pre>\n\tIo> block(x, x*2) scope == thisContext\n  ==> true\n\t<\/pre>\n","debugOn":"Sets debugWriteln to writeln. Returns self.\n","try(code)":"  Executes particular code in a new coroutine.\n  Returns exception or nil if no exception is caught.\n  <br\/>\n  See also documentation for Exception catch and pass.\n","getLocalSlot(slotNameString)":"\tReturns the value of the slot named slotNameString\n\t(not looking in the object's protos) or nil if no such slot is found.\n","slotNames":"\tReturns a list of strings containing the names of the\n\tslots in the receiver (but not in it's lookup path).\n","pSlots":"PDB extension to set a list of slots to persist with PDB.\nCreates the specified slots using newSlot and sets them to nil.\n","coroDo(code)":"  Creates a new coro to be run in a context of sender and yields to it.\n  Returns a coro.\n","while(<condition>, expression)":"\tKeeps evaluating message until condition return Nil.\n\tReturns the result of the last message evaluated or Nil if none were evaluated.\n",">(expression)":"\tEvaluates argument and returns self if self is greater than it, or Nil if not.\n","loop(expression)":"\tKeeps evaluating message until a break.\n","isError":"Returns false if not an error.\n","cloneWithoutInit":"\tReturns a clone of the receiver but does not call init.\n","ifNonNilEval(arg)":" Evaluates argument and returns the result.\n","markClean":"Cleans object's slots.\n","@@":"  Same as Object @, but returns nil instead of FutureProxy.\n  <br\/>\n  Might be useful in a command line or as a last expression in a block\/method when\n  you don't want to return a future.\n","or(arg)":" Returns true.\n","removeAllProtos":"\tRemoves all of the receiver's protos. Returns self.\n","apropos":"Prints out <tt>Protos Core<\/tt> slot descriptions.\n","prependProto(anObject)":"\tPrepends anObject to the receiver's proto list. Returns self.\n","raiseIfError":"Does nothing, returns self.\n","asJson()":" Converts Object to JSON Sequence.\n","asSimpleString":"Returns <type>_<uniqueHexId> string.\n","hasProto(anObject)":"\tReturns true if anObject is found in the proto path of the target, false otherwise.\n","<=(expression)":"\tEvaluates argument and returns self if self is less\n\tthan or equal to it, or Nil if not.\n","isTrue":"Returns true.\n","proto":"\tSame as; method(self protos first)\n","handleActorException(exception)":"  Callback for handling exceptions during asynchronous message processing.\n  <br\/>\n  Default value: method(e, e showStack)\n","memorySize":"\tReturn the amount of memory used by the object.\n","performWithArgList(methodName, argList)":"\tPerforms the method corresponding to methodName with the arguments in the argList.\n","currentCoro":"Returns the currently running coroutine.\n","perform(methodName, <arg1>, <arg2>, ...)":"\tPerforms the method corresponding to methodName with the arguments supplied.\n","evalArg(expression)":"\tThe '' method evaluates the argument and returns the result.\n","coroWith(code)":"  Returns a new coro to be run in a context of receiver.\n","removeProto(anObject)":"\tRemoves anObject from the receiver's proto list if it\n\tis present. Returns self.\n","unpersist":"PDB extension to populate this object with the data associated with this object's ppid from PDB.\n","evalArgAndReturnNil(expression)":"\tEvaluates the argument and returns nil.\n","==(aValue)":"\tReturns true if receiver and aValue are equal, false otherwise.\n","doMessage(aMessage, optionalContext)":"\tEvaluates the message object in the context of the receiver.\n\tReturns the result. optionalContext can be used to specific the locals\n\tcontext in which the message is evaluated.\n","-(aNumber)":"\tReturns the negative version of aNumber.\n\tRaises an exception if argument is not a number.\n","type":"\tReturns a string containing the name of the type of Object (Number, String, etc).\n","doURL(urlString)":" Fetches the URL and evals it in the context of the receiver.\n","method(args..., body)":"\tCreates a method. \n\t<tt>args<\/tt> is a list of formal arguments (can be empty). <br\/>\n\t<tt>body<\/tt> is evaluated in the context of Locals object.<br\/>\n\tLocals' proto is a message receiver (i.e. self).\n\t<br\/>\n\tSlot with a method is <em>activatable<\/em>. Use getSlot(name) to retrieve \n\tmethod object without activating it (i.e. calling).\n\t<br\/>\n\tSee also <tt>Object block<\/tt>.\n","continue":"\tSkip the rest of the current loop iteration and start on\n\tthe next, if any.\n","debugOff":"Sets debugWriteln to nil. Returns self.\n","..(arg)":" .. is an alias for: method(arg, self asString append(arg asString))\n","doRelativeFile(pathString)":"\t\tEvaluates the File in the context of the receiver. Returns the result. \n\t\tpathString is relative to the file calling doRelativeFile. (Duplicate of relativeDoFile)\n","setSlot(slotNameString, valueObject)":"\tSets the slot slotNameString in the receiver to\n\thold valueObject. Returns valueObject.\n","return(anObject)":"\tReturn anObject from the current execution block.\n","in(aList)":" Same as: aList contains(self)\n","NullCharacter":"A sequence with a single zero byte.\n","checkMemory()":"\taccesses memory in the IoObjectData struct that should be accessible.  Should cause a memory access\n\texception if memory is corrupt.\n","tailCall(expression)":"Does a tailCall on the currently executing Block. Example:\n<pre>\t\nIo> a := method(x, x = x + 1; if(x > 10, return x); tailCall(x))\n==> method(x, updateSlot(\"x\", x +(1));\n\t\tif(x >(10), return(x));\n\t\ttailCall(x))\nIo> a(1)\n==> 11\n<\/pre>\n","contextWithSlot(slotName)":"\tReturns the first context (starting with the receiver and following the lookup path)\n\tthat contains a slot of the specified name or Nil if none is found.\n","justSerialized(stream)":"  Writes serialized representation to a SerializationStream. Returns stream contents. \n  [This is unintended side effect! Returned value may change in the future.]\n","print":"\tPrints a string representation of the object. Returns Nil.\n","?(aMessage)":"\tdescription: Sends the message aMessage to the receiver if it can respond to it. Example:\n\t<pre>\n\tMyObject test \/\/ performs test\n\tMyObject ?test \/\/ performs test if MyObject has a slot named test\n\t<\/pre>\n\tThe search for the slot only follows the receivers proto chain.\n","list(...)":" Returns a List containing the arguments.\n","coroDoLater(code)":"  Returns a new coro to be run in a context of sender.\n  New coro is moved to the top of the yieldingCoros queue to be executed \n  when current coro yields.\n  <br\/>\n  Note: run target is <tt>self<\/tt> (i.e. receiver), not <tt>call sender<\/tt> as in coroDo.\n","launchFile(pathString)":" Eval file at pathString as if from the command line in it's folder.\n","coroFor(code)":"  Returns a new coro to be run in a context of sender.\n","memorySizeOfState":"\tReturns the number of bytes in the IoState\n\t(this may not include memory allocated by C libraries).\n","squareBrackets(...)":" Alias for list(). <code><pre>[1, 2, 3, 4]<\/pre><\/code>\n","localsForward":"\tCFunction used by Locals prototype for forwarding.\n","deprecatedWarning(optionalNewName)":"\tPrints a warning message that the current method is deprecated.\n\tIf optionalNewName is supplied, the warning will suggest using that instead.\n\tReturns self.\n","uniqueId":"\tReturns a Number containing a unique id for the receiver.\n","getSlot(slotNameString)":"\tReturns the value of the slot named slotNameString\n\t(following the lookup path) or nil if no such slot is found.\n","shouldPersistByDefault":"PDB boolean flag indicating whether this object should be considered for persistence\nwhen persistence has not been specifically requested by calling ppid() or PDB addObjectToPersist.\nAlways false by default for Object.\n","ownsSlots":"  A debug method.\n","isKindOf(anObject)":" Returns true if anObject is in the receiver's ancestors.\n","slotSummary":"  Returns a formatted <tt>slotDescriptionMap<\/tt>.\n  <br\/>\n  <pre>\n  Io> slotSummary\n  ==>  Object_0x30c590:\n    Lobby            = Object_0x30c590\n    Protos           = Object_0x30c880\n    exit             = method(...)\n    forward          = method(...)\n  <\/pre>\n","hasSlot(name)":"  Returns <tt>true<\/tt> if slot is found somewhere in the inheritance chain \n  (including receiver itself).\n","switch(<key1>, <expression1>, <key2>, <expression2>, ...)":"\tExecute an expression depending on the value of the caller. (This is an equivalent to C switch\/case)\n\t<code>\n\thour := Date hour switch(\n\t\t12, \"midday\",\n\t\t0, \"midnight\",\n\t\t17, \"teatime\",\n\t\tDate hour asString\n\t)\n\t<\/code>\n","lazySlot(code)":"  Defines a slot with a lazy initialization code. \n  Code is run only once: the first time slot is accessed. \n  Returned value is stored in a regular slot.\n  <br\/>\n  <pre>\n  Io> x := lazySlot(\"Evaluated!\" println; 17)\n  Io> x\n  Evaluated!\n  ==> 17\n  Io> x\n  ==> 17\n  Io> x\n  ==> 17\n  <\/pre>\n  <br\/>\n  Another form is <tt>lazySlot(name, code)<\/tt>:\n  <br\/>\n  <pre>\n  Io> lazySlot(\"x\", \"Evaluated!\" println; 17)\n  Io> x\n  Evaluated!\n  ==> 17\n  Io> x\n  ==> 17\n  Io> x\n  ==> 17\n  <\/pre>\n","message(expression)":"\tReturn the message object for the argument or Nil if there is no argument.\n\tNote: returned object is a mutable singleton. Use \"message(foo) clone\" if\n  you wish to modify it.\n","removeSlot(slotNameString)":"\tRemoves the specified slot (only) in the receiver if it exists. Returns self.\n","persist":"Force immediate persistence of this object with PDB.\n","foreach([name,] value, message)":"For each slot, set name to the slot's\nname and value to the slot's value and execute message. Examples:\n<p>\n<pre>\nmyObject foreach(n, v,\n\twriteln(\"slot \", n, \" = \", v type)\n)\n\nmyObject foreach(v,\n\twriteln(\"slot type \", v type)\n)\n<\/pre>\n","ancestors":"Returns a list of all of the receiver's ancestors as found by recursively following the protos links.\n","asString":"Same as <tt>slotSummary<\/tt>.\n","become(anotherObject)":"\tReplaces receiver with <tt>anotherObject<\/tt> and returns self.\n\tUseful for implementing transparent proxies. See also <tt>FutureProxy<\/tt> and <tt>Object @<\/tt>.\n\t<br\/>\n\tNote: primitives cannot become new values.\n","actorRun":"Starts actor mode if not started already. Basically, sets actorProcessQueue for later execution.\n","isActivatable":"\tReturns true if the receiver is activatable, false otherwise.\n","<(expression)":"\tEvaluates argument and returns self if self is less or Nil if not.\n","ancestorWithSlot(slotName)":"\tReturns the first ancestor of the receiver that contains\n\ta slot of the specified name or Nil if none is found.\n","ifNonNil(arg)":" Evaluates argument and returns self.\n","writeln(<any number of arguments>)":"\tSame as write() but also writes a return character at the end. Returns Nil.\n","doString(aString)":"\tEvaluates the string in the context of the receiver. Returns the result.\n","argIsActivationRecord":"  Note: seems to be an obsolete method.\n","hasLocalSlot(slotNameString)":"\tReturns true if the slot exists in the receiver or false otherwise.\n","evalArgAndReturnSelf(expression)":"\tEvaluates the argument and returns the target.\n","ifDebug(code)":" Executes code if debugWriteln is not nil.\n","pause":"\tRemoves current coroutine from the yieldingCoros queue and\n\tyields to another coro. Exits if no coros left.\n\t<br\/>\n  See Coroutine documentation for more details.\n",">=(expression)":"\tEvaluates argument and returns self if self is greater\n\tthan or equal to it, or Nil if not.\n","ifError":"Does nothing, returns self.\n","localsUpdateSlot(slotNameString, valueObject)":"\tLocal's version of updateSlot mthod.\n","debugWriteln":"Method for writing debug messages (nil\/writeln by default)\n","ppid":"This PDB extension returns a unique identifier for this object and registers it\nfor persistence with PDB.\n","relativeDoFile(pathString)":"\t\tEvaluates the File in the context of the receiver. Returns the result. \n\t\tpathString is relative to the file calling doRelativeFile. (Duplicate of doRelativeFile)\n","resend":"\tSend the message used to activate the current method to the Object's proto.\n  For example:\n  <pre>\n  Dog := Mammal clone do(\n    init := method(\n  \t  resend\n    )\n  )\n  <\/pre>\n\tCalling Dog init will send an init method to Mammal, but using the Dog's context.\n","curlyBrackets(...)":"  JavaScript syntax for Map.<br\/>\n  Note that order will not be preserved, as well as that quotes are not allowed around propery names (as in JSON specification).\n  <code><pre>\n  prices:= {\n    vanilla:    12.20,\n    chocolate:  12.25,\n    strawberry: 13.30\n  }<\/pre><\/code>\n","println":"Same as print, but also prints a new line. Returns self.\n","isNil":"Returns false.\n","isLaunchScript":"Returns true if the current file was run on the command line. Io's version of Python's __file__ == \"__main__\"\n","slotDescriptionMap":"  Returns raw map of slot names and short values' descriptions.\n  See also <tt>Object slotSummary<\/tt>.\n","protos":"\tReturns a copy of the receiver's protos list.\n","actorProcessQueue":"Processes each message in a queue, yielding between each message.\n","serialized":"  Returns a serialized representation of the receiver.\n  <br\/>\n  <pre>\n  Io> Object clone do(x:=1) serialized\n  ==> Object clone do(\n  \tx := 1\n  )\n  <\/pre>\n","foreachSlot(slotName, slotValue, code)":"  Iterates over all the slots in a receiver. Provides slotValue (non-activated)\n  along with slotName. Code is executed in context of sender. <tt>slotName<\/tt> and <tt>slotValue<\/tt>\n  become visible in the receiver (no Locals created! Maybe, it is not the best decision).\n  <br\/>\n  <pre>\n  Io> thisContext foreachSlot(n, v, n println)\n  Lobby\n  Protos\n  exit\n  forward\n  n\n  v\n  ==> false\n  <\/pre>\n","asMap()":" Converts Object to Map\n","break(optionalReturnValue)":"\tBreak the current loop, if any.\n","slotValues":"\tReturns a list of the values held in the slots of the receiver.\n","serializedSlots(stream)":" Writes all slots to a stream.\n","ifNilEval(arg)":" Does nothing, returns self.\n","compact":"\tCompact the memory for the object if possible. Returns self.\n","appendProto(anObject)":"\tAppends anObject to the receiver's proto list. Returns self.\n","serializedSlotsWithNames(names, stream)":" Writes selected slots to a stream.\n","argIsCall(arg)":"\tReturns true if arg is an activation context (i.e. Call object)\n\t<br\/>\n\tNote: this is used internally in one place only (Coroutine callStack).\n\tRefactoring should be considered.\n","persistSlots":"Force immediate persistence of this object's dirty slots into PDB.\n","returnIfError":"Does nothing, returns self.\n","newSlot(slotName, aValue)":"\tCreates a getter and setter for the slot with the name slotName\n\tand sets it's default the value aValue. Returns self. For example,\n\tnewSlot(\"foo\", 1) would create slot named foo with the value 1 as well as a setter method setFoo().\n"}},"Number":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"A container for a double (a 64bit floating point number on most platforms).\n","category":"Core\n","slots":{"toBase(base)":" Returns the number in another base. 42 toBase(2) -> \"101010\"\n","asLowercase":"\tReturns a new Number containing a lower case version of the receiver.\n","isHexDigit":"\tReturns true if \n\tthe receiver is a hexadecimal character value\n\t, false otherwise.\n","permutations(size)":" Returns the permutations where the receiver is the number of different objects and size is the number to be arranged.\n","squared":"\tReturns the square of the receiver.\n","asOctal":"Returns the number as octal digits inside a string. 436 asOctal -> \"664\"\n","isNan":"\tReturns true if the receiver is not a number. Otherwise returns false.\n","asUint32Buffer":"\tReturns a Sequence containing a 4 byte representation of the uint32 value of the receiver.\n","minMax(low, high)":" Returns a number between or equal to low and high. If the receiver is equal to or between low and high, the reciever is returned. If the reciever is less than low, low is returned. If the receiver is greater than high, high is returned.\n","atan2(aNumber)":"\tReturns a number with the arc tangent of y\/x where y is the receiver and x is aNumber.\n","integerMin":"\tReturns the minimum integer value.\n","tan":"\tReturns the tangent of the receiver.\n","&(aNumber)":"\tReturns a new number with the bitwise AND of the receiver and aNumber.\n","isEven":"\tReturns true if \n\tinteger form of the receiver is even\n\t, false otherwise.\n","asin":"\tReturns a number with the arc sine of the receiver.\n","isUppercase":"\tReturns true if \n\tthe receiver is a uppercase character value\n\t, false otherwise.\n","%(aNumber)":"\tReturns the receiver modulus aNumber.\n","factorial":"\tReturns the factorial of the receiver.\n","shortMax":"\tReturns the maximum short value.\n","asHex":"Returns the number as hex digits inside a string. 97 asHex -> \"61\"\n","clip(aNumber1, aNumber2)":"\tReturns self if the receiver is between aNumber1 and aNumber2.\n\tReturns aNumber1 if it is less than aNumber1. Returns aNumber2 if it is greater than aNumber2.\n","negate":"\tReturns new number that is negated version of the receiver.\n","isPrint":"\tReturns true if \n\tthe receiver is a printing character value, including space\n\t, false otherwise.\n","justSerialized(stream)":" Writes the receiver's code into the stream.\n","print":"\tPrints the number.\n","*(aNumber)":"\tReturns a new number that is the product of the receiver and aNumber.\n","atan":"\tReturns a number with the arc tangent of the receiver.\n","isControlCharacter":"\tReturns true if \n\treceiver is a control character value\n\t, false otherwise.\n","cos":"\tReturns the cosine of the receiver.\n","max(aNumber)":"\tReturns the greater of the receiver and aNumber.\n","toggle":"\tReturns 1 if the receiver is 0. Returns 0 otherwise.\n","mod(aNumber)":"\tReturns the receiver modulus aNumber.\n","bitwiseAnd(aNumber)":"\tReturns a new number with the bitwise AND of the receiver and aNumber.\n","asUppercase":"\tReturns a new Number containing a upper case version of the receiver.\n","between(aNumber1, aNumber2)":"\tReturns the true if the receiver's value is between or\n\tequal to aNumber1 and aNumber2, otherwise returns false.\n","|(aNumber)":"\tReturns a new number with the bitwise OR of the receiver and aNumber.\n","isLetter":"\tReturns true if \n\treceiver is a letter character value\n\t, false otherwise.\n",">>(aNumber)":"\tShifts the bits of the receiver right by the number of places specified by aNumber.\n","constants":"Object containing number constants e, inf, nan and pi.\n","pi":"Returns the constant pi.\n","e":"Returns the constant e.\n","asCharacter":"\tReturns a String containing a single character whose\n\tvalue is the value of the first byte of the receiver.\n\tReturns nil if the number has no valid UCS mapping.\n","longMin":"\tReturns the minimum long value.\n","nan":"Returns a infinity constant.\n","acos":"\tReturns a number with the arc cosine of the receiver.\n","isAlphaNumeric":"\tReturns true if \n\treceiver is an alphanumeric character value\n\t, false otherwise.\n","bitwiseOr(aNumber)":"\tReturns a new number with the bitwise AND of the receiver and aNumber.\n","isDigit":"\tReturns true if \n\treceiver is a numeric digit value\n\t, false otherwise.\n","integerMax":"\tReturns the maximum integer value.\n","sqrt":"\tReturns the square root of the receiver.\n","doubleMin":"\tReturns the minimum double precision float value.\n","ceil":"\tReturns the a number with the receiver's value rounded up to\n\tthe nearest integer if it's fractional component is greater than 0.\n","asNumber":"\tReturns self.\n","toBaseWholeBytes(base)":" Returns the number in another base printing out entire bytes. 42 toBaseWholeBytes(2) -> \"00101010\"\n","<<(aNumber)":"\tShifts the bits of the receiver left by the number of places specified by aNumber.\n","asBuffer(optionalNumberOfBytes)":"\tReturns a Buffer containing a the number of bytes specified by\n\toptionalNumberOfBytes (up to the size of a double on the platform) of the reciever.\n\tIf no optionalNumberOfBytes is specified, it is assumed to be the number of bytes\n\tin a double on the host platform.\n","isLowercase":"\tReturns true if \n\tthe receiver is a lowercase character value\n\t, false otherwise.\n","asBinary":"Returns the number as binary digits inside a string. 42 asBinary -> \"101010\"\n","floatMax":"\tReturns the maximum double precision float value.\n","isGraph":"\tReturns true if \n\tthe receiver is a printing character value except space\n\t, false otherwise.\n","longMax":"\tReturns the maximum long value.\n","min(aNumber)":"\tReturns the lesser of the receiver and aNumber.\n","abs":"\tReturns a number with the absolute value of the receiver.\n","at(bitIndexNumber)":"\tReturns a new Number containing 1 if the receiver cast to a long\n\thas it's bit set to 1 at bitIndexNumber. Otherwise returns 0.\n","isSpace":"\tReturns true if \n\tthe receiver is a space, formfeed, newline carriage return, tab or vertical tab character value\n\t, false otherwise.\n","floatMin":"\tReturns the minimum float value.\n","shortMin":"\tReturns the minimum short value.\n","bitwiseXor(aNumber)":"\tReturns a new number with the bitwise XOR of the receiver and aNumber.\n","\/(aNumber)":"\tReturns a new number with the value of the receiver diveded by aNumber.\n","log":"\tReturns the logarithm of the receiver.  The base\n\tis taken as the value of the first argument or the constant e if\n\tthe first argument is omitted.\n","^(aNumber)":"\tReturns the bitwise xor with the receiver (both numbers are converted to longs for the operation).\n","isPunctuation":"\tReturns true if \n\tthe receiver is a punctuation character value\n\t, false otherwise.\n","exp":"\tReturns e to the power of the receiver.\n","asString(optionalIntegerDigits, optionalFactionDigits)":"Returns a string representation of the receiver. For example:\n<pre>\n1234.5678 asString(0, 2)\n<\/pre>\t\nwould return:\n<pre>\n1234.57\n<\/pre>\n","unsignedIntMax":"\tReturns the maximum unsigned int value.\n","log2":"\tReturns the base 2 logarithm of the receiver.\n","round":"\tReturns the a number with the receiver's value rounded up to\n\tthe nearest integer if it's fraction component is >= .5 or rounded up the the nearest integer otherwises..\n","inf":"Returns a not-a-number constant.\n","**(aNumber)":"\tSame as pow(aNumber).\n","-(aNumber)":"\tReturns a new number that is the difference of the receiver and aNumber.\n","bitwiseComplement":"\tReturns a new number with the bitwise complement of the\n\treceiver. (Turns the 0 bits of become 1s and the 1 bits become 0s. )\n","cubed":"\tReturns the cube of the receiver.\n","unsignedLongMax":"\tReturns the maximum unsigned long value.\n","+(aNumber)":"\tReturns a new number that is the sum of the receiver and aNumber.\n","sin":"\tReturns the sine of the receiver.\n","combinations(size)":" Returns the combinations where the receiver is the number of different objects and size is the number to be arranged.\n","roundDown":"\tReturns the a number with the receiver's value rounded down to\n\tthe nearest integer if it's fraction component is <= .5 or rounded up the the nearest integer otherwises.\n","log10":"\tReturns the base 10 logarithm of the receiver.\n","floor":"\tReturns the a number with the receiver's value rounded\n\tdown to the nearest integer if it's fractional component is not 0.\n","unsignedShortMax":"\tReturns the minimum unsigned int value.\n","pow(aNumber)":"\tReturns the value of the receiver to the aNumber power.\n","isInASequenceSet":"Return true if receiver is in one of the Sequence sequenceSets, otherwise false.\n","repeat(optionalIndex, expression)":"\tEvaluates message a number of times that corresponds to the receivers\n\tinteger value. This is significantly  faster than a for() or while() loop.\n","isOdd":"\tReturns true if \n\tinteger form of the receiver is odd\n\t, false otherwise.\n"}},"Debugger":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"Contains methods related to the IoVM debugger.\n","category":"Core\n","slots":{"debuggerCoroutine":"Returns the coroutine used for the debugger.\n","start":"Starts the debugger.\n","vmWillSendMessage":"Override this method to implement your own debugging mechanisms. Default behavior is to print every message sent.\n","description":"\tTo start debugging a coroutine, call\n\t<code>\n\tCoroutine currentCoroutine setMessageDebugging(true)\n\t<\/code>\n\tThen each message sent within that coroutine will cause the Debugger \n\tvmWillSendMessage slot to be activated and the Debugger slots: \n\tmessageCoroutine, messageSelf, messageLocals, and message will be set with the \n\tvalues related to the current message send. You can override vmWillSendMessage to \n\timplement your own debugging mechanisms.\n"}},"Message":{"module":"Core","license":"\tBSD revised\n","copyright":"\tSteve Dekorte; Jonathan Wright, 2002, 2006\n","description":"A Message object encapsulates the action of a message send. \nBlocks are composed of a Message and its children.\n<p>\nTerminology\n<pre>\nExample:\n  Io> msg := message(A B(C D); E F)\n  ==> A B(C D); E F\n  \nIn the above example:\n  msg name            =>  A\n  msg next            =>  B(C D); E F\n  msg next arguments  =>  list(C D)\n  msg next next name  =>  ;\n  msg next next next  =>  E F\n<\/pre>\nImportant: Modifying the message tree of a block currently in use may cause\na crash if a garbage collection cycle occurs. If the implementation were\nchanged to retain every called message, this could be avoided.\nBut the cost to performance seems to outweigh the need to cover this case for now.\n","category":"Core\n","slots":{"characterNumber":"\tReturns the message character number. The charcter number is typically\n\tthe beggining character index in the source text from with the message was read.\n","description":"Returns a string containing a short description of the method.\n","asString":"\tSame as code().\n","setCachedArgs(listOfValues)":" Appends evaluated arguments to a message. Returns self.\n","setLabel(aString)":"\tSets the label of the message and its children. Returns self.\n","union(other) Creates a union of the receiver and the other parameter.":"\tReturns a new message object with the receivers message as the first argument of the returned message, \n\tand the other parameter's arguments as each successive argument to the new message.\n\t<br\/>\n\t<pre>\n  Io> message(a) union(message(b))\n  ==> [unnamed](a, b)\n  <\/pre>\n","setArguments(aListOfMessages)":"\tSets the arguments of the receiver to deep copies of\n\tthose contained in aListOfMessages.  Returns self.\n","name":"\tReturns the name of the receiver.\n","arguments":"\tReturns a list of the message objects that act as the\n\treceiver's arguments. Modifying this list will not alter the actual\n\tlist of arguments. Use the arguments_() method to do that.\n","previous":"\tReturns the previous message in the message chain or Nil if there is no previous message.\n","appendCachedArg(aValue)":"\tAdds aValue to the argument list of receiver as a cachedResult.\n","code":"\tReturns a String containing a decompiled code representation of the receiver.\n","next":"\tReturns the next message in the message chain or nil if there is no next message.\n","setNext(aMessageOrNil)":"\tSets the next message in the message chain to a deep copy of\n\taMessage or it removes the next message if aMessage is nil.\n","argAt(indexNumber)":"\tReturns Message object for the specified argument or Nil if none exists.\n","argCount":"Returns the number of arguments this message has. A faster way to do, msg arguments size. Examples,\n<pre>\t\nIo> message(a(1,2,3)) argCount\n==> 3\n\nIo> message(a) argCount\n==> 0\n<\/pre>\n","setLineNumber(aNumber)":"\tSets the line number of the message. Returns self.\n","nextIgnoreEndOfLines":"\tReturns the next message in the message chain which is not an \n\tEndOfLine or nil if there is no next message.\n","fluxSource":" The directory of Flux where Flux.io is located. This directory is added to the Importer searchPaths.\n","setPrevious(aMessageOrNil)":"\tSets the previous message in the message chain to a deep copy of\n\taMessage or it removes the previous message if aMessage is Nil.\n","fluxPath":" The directory where the .io files for the Flux views are located. This directory is added to the Importer searchPaths.\n","label":"\tReturns the message label. The label is typically set the the\n\tname of the file from which the source code for the message was read.\n","last":"\tReturns the last message in the chain.\n","clone":"\tReturns a Message that is a deep copy of the receiver.\n","fromString(aString)":"\tReturns a new Message object for the compiled(but not executed)\n\tresult of aString.\n","hasCachedResult":"\tReturns true if there is a cached result. Nil is a valid cached result.\n","asMessageWithEvaluatedArgs(optionalContext)":"\tReturns a copy of receiver with arguments evaluated in the context of sender if\n\toptionalContext is nil.\n","argsEvaluatedIn(anObject)":"\tReturns a List containing the argument messages evaluated in the\n\tcontext of anObject.\n","cachedResult":"\tReturns the cached result of the Message or Nil if there is none.\n","asStackEntry":"Returns a string containing message name, file and line.\n","asSimpleString":"Returns one-line string representation up to 40 characters long.\n","setCachedResult(anObject)":"\tSets the cached result of the message. Returns self.\n","removeCachedResult":"\tRemoves the cached result of the Message.\n","evaluatedArgs":"\tReturns a List containing the argument messages evaluated in the context.\n","doInContext(anObject, locals)":"\tEvaluates the receiver in the context of anObject. Optional <tt>locals<\/tt> \n\tobject is used as message sender. <tt>anObject<\/tt> is used as sender otherwise.\n","isEndOfLine":"\tReturns true if the message marks the end of the line. A ';' message.\n","lineNumber":"\tReturns the line number of the message. The charcter number\n\tis typically the line number in the source text from with the message was read.\n","lastBeforeEndOfLine":"\tReturns the last message in the chain before the EndOfLine or nil.\n","setArgAt(index, value)":" Clones message arguments and replaces value of a argument at <code>index<\/code>.\n","setCharacterNumber(aNumber)":"\tSets the character number of the message. Returns self.\n","codeOfLength(n)":"  Same as <tt>Message code<\/tt>, but returns first <tt>n<\/tt> characters only.\n","setName(aString)":"\tSets the name of the receiver. Returns self.\n","appendArg(aMessage)":"Adds aMessage to the argument list of receiver. Examples,\n<pre>\t\nIo> message(a) appendArg(message(b))\n==> a(b)\n\nIo> message(a(1,2)) appendArg(message(3))\n==> a(1, 2, 3)\n<\/pre>\n"}},"Collector":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"A singleton containing methods related to Io's garbage collector. \nIo currently uses a incremental, non-moving, generational \ncollector based on the tri-color (black\/gray\/white) \nalgorithm with a write-barrier.\n<p>\nEvery N number of object allocs, the collector will walk \nsome of the objects marked as gray, marking their connected \nwhite objects as gray and turning themselves black. \nEvery M allocs, it will pause for a sweep where it makes sure \nall grays are marked black and io_frees all whites.\n<p>\nIf the sweepsPerGeneration is set to zero, it will immediately mark \nall blacks as white again and mark the root objects as gray. Otherwise, \nit will wait until the sweepsPerGeneration count is reached to do this. \nBy adjusting the allocsPerSweep and sweepsPerGeneration appropriately, the \ncollector can be tuned efficiently for various usage cases. \n\nGenerally, the more objects in your heap, the larger you'll want this number.\n","category":"Core\n","slots":{"reset":"\tResets the profilerTime on all Block objects in the system.\n","allocatedStep":"\tReturn the allocation step value as a Number.\n","maxAllocatedBytes":"\tReturns the maximum number of bytes allocated by the collector.\n","resetMaxAllocatedBytes":"\tResets maximum number of bytes allocated by the collector. Returns self.\n","setMarksPerAlloc(aNumber)":"\tSets the number of incremental collector marks per object \n\tallocation (can be fractional). Returns self.\n","setAllocatedStep(aNumber)":"\tSets the allocatedStep (can have a fractional component, \n\tbut must be larger than 1). A collector sweep is forced when the \n\tnumber of allocated objects exceeds the allocatedSweepLevel. \n\tAfter a sweep, the allocatedSweepLevel is set to the allocated \n\tobject count times the allocatedStep. Returns self.\n","objectWithUniqueId(aNumber)":"\tReturns an object whose uniqueId is aNumber or nil if no match is found. \n\tWarning: This lookup currently scans all objects, so it is not efficient, \n\tthough it should handle thousands of lookups per second.\n","dirtyObjects":"\tReturns a List containing all dirty objects known to the collector.\n","showStats":"\tPrints the collector's stats to standard output.\n","allObjects":"\tReturns a List containing all objects known to the collector.\n","cleanAllObjects":"\tSets all objects as clean. Returns self.\n","timeUsed":"\tReturn the time used so far by the collector in seconds.\n","timedObjects":"\tReturns a list of objects found in the system that have profile times.\n","collect":"\tRuns garbage collector. Returns the number of items collected.\n","marksPerAlloc":"\tReturn the number of allocations per collector mark pass.\n","setDebug(aBool)":"\tTurns on\/off printing of collector debugging messages. Returns self.\n"}},"Sequence":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"A Sequence is a container for a list of data elements. \nImmutable Sequences are also called \"Symbols\".\n","category":"Core\n","slots":{"-=(aSeq)":"\tVector subtraction - subtracts the values of aSeq to those of the receiver.\n\tOnly works on Sequences whose item type is numeric. Returns self.\n","containsSeq(aSequence)":"\tReturns true if the receiver contains the substring\n\taSequence, false otherwise.\n","dotProduct(aSeq)":"\tReturns a new Sequence containing the dot product of the receiver with aSeq.\n","*=(aSeq)":"\tMultiplies the values of aSeq to the corresponding values of the receiver.\n\tOnly works on Sequences whose item type is numeric. Returns self.\n","append(aNumber)":"\tAppends aNumber (cast to a byte) to the receiver. Returns self.\n","beginsWithSeq(aSequence)":"\tReturns true if the receiver begins with aSequence, false otherwise.\n","asLowercase":"\tReturns a symbol containing the reveiver made Lowercase.\n","atInsertSeq(indexNumber, object)":"\tCalls asString on object and inserts the string at position indexNumber. Returns self.\n","bitAt(bitIndex)":"Returns a Number containing the bit at the bit index value.\n","replaceMap(aMap)":"\tIn the receiver, the keys of aMap replaced with it's values. Returns self.\n","cosh":"Sets each value of the Sequence to the hyperbolic cosine of it's value.\nReturns self.\n","removeEvenIndexes":"Removes even indexes in the receiver.\nFor example, list(1,2,3) removeEvenIndexes == list(1, 3). Returns self.\n","reverseInPlace":"\tReverses the bytes in the receiver, in-place.\n","slicesBetween(startSeq, endSeq)":"  Returns a list of slices delimited \n  by <tt>startSeq<\/tt> and <tt>endSeq<\/tt>.\n  <br>\n  <pre>\n  Io> \"<a><b><\/b><\/a>\" slicesBetween(\"<\", \">\")\n  ==> list(\"a\", \"b\", \"\/b\", \"\/a\")\n  <\/pre>\n","lessThan(aSeq)":"\tReturns true if the receiver is lass than aSeq, false otherwise.\n","itemSize":"\tReturns number of bytes in each element.\n","asHTML":"SGML extension to interpret the Sequence as HTML and return an SGML object using SGMLParser elementForString\n","normalize":"Divides each value of the Sequence by the max value of the sequence.\nReturns self.\n","asURL":"Returns a new URL object instance with the receiver as it's url string.\n","isUppercase":"\tReturns self if all the characters in the string are upper case.\n","sin":"Sets each value of the Sequence to the trigomentic sine of it's value.\nReturns self.\n","preallocateToSize(aNumber)":"\tIf needed, resize the memory alloced for the receivers\n\tbyte array to be large enough to fit the number of bytes specified by\n\taNumber. This is useful for pio_reallocating the memory so it doesn't\n\tkeep getting allocated as the Sequence is appended to. This operation\n\twill not change the Sequence's length or contents. Returns self.\n","bitCount":"Returns the number of bits in the sequence.\n","cloneAppendPath(aSequence)":"\tAppends argument to a copy the receiver such that there is one\n\tand only one path separator between the two and returns the result.\n","asUCS4":"\tReturns a new copy of the receiver converted to UCS4 (fixed character width UTF32) encoding.\n","lessThanOrEqualTo(aSeq)":"\tReturns true if the receiver is lass than or equal to aSeq, false otherwise.\n","containsAnyCaseSeq(aSequence)":"\tReturns true if the receiver contains the aSequence\n\tregardless of casing, false otherwise.\n","whiteSpaceStrings":"\tReturns a List of strings. Each string contains a different\n\twhitespace character.\n","cos":"Sets each value of the Sequence to the trigomentic cosine of it's value.\nReturns self.\n","copy(aSequence)":"\tReplaces the bytes of the receiver with a copy of those in aSequence. Returns self.\n","asRegex":"\t\tReturns a new Regex created from the receiver.\n","reverseFindSeq(aSequence, startIndex)":"\tReturns a number with the first occurrence of aSequence in\n\tthe receiver before the startIndex. The startIndex argument is optional.\n\tBy default reverseFind starts at the end of the string. Nil is\n\treturned if no occurrences are found.\n","appendSeq(object1, object2, ...)":"\tCalls asString on the arguments and appends the string to the receiver. Returns self.\n","occurancesOfSeq(aSeq)":"\tReturns count of aSeq in the receiver.\n","alignRight(width, [padding])":"\tExample:\n\t<p>\n\t<code>\n\tIo> \"abc\" alignRight(10, \"-\")\n\t==> -------abc\n\tIo> \"abc\" alignRight(10, \"-=\")\n\t==> -=-=-=-abc\n\t<\/code>\n","removeSlice(startIndex, endIndex)":"\tRemoves the items from startIndex to endIndex.\n\tReturns self.\n","pathComponent":"\tReturns a slice of the receiver before the last path separator as a symbol.\n","convertToItemType(aTypeName)":"\tConverts the underlying machine type for the elements, expanding or contracting\n\tthe size of the Sequence as needed. \n\tValid names are uint8, uint16, uint32, uint64, int8, int16, int32, \n\tint64, float32, and float64. Note that 64 bit types are only available \n\ton platforms that support such types. Returns self.\n","replaceSeq(aSequence, anotherSequence)":"\tReturns a new Sequence with all occurances of aSequence\n\treplaced with anotherSequence in the receiver. Returns self.\n","itemCopy":"Returns a new sequence containing the items from the receiver.\n","isLowercase":"\tReturns self if all the characters in the string are lower case.\n","acos":"Sets each value of the Sequence to the trigomentic arcsine of it's value.\nReturns self.\n","encoding":"\tReturns the encoding of the elements.\n","tanh":"Sets each value of the Sequence to the hyperbolic tangent of it's value.\nReturns self.\n","split Returns a list containing the sub-sequences of the receiver divided by the given arguments.":"\t\tIf no arguments are given the sequence is split on white space.\n","greaterThanOrEqualTo(aSeq)":"\tReturns true if the receiver is greater than or equal to aSeq, false otherwise.\n","+(aSeq)":"\tVector addition - Adds the values of aSeq to the corresponding values of the receiver \n\treturning a new vector with the result.\n\tOnly works on Sequences whose item type is numeric.\n","sqrt":"Sets each value of the Sequence to the square root of it's value.\nReturns self.\n","repeated(n)":" Returns a new sequence containing the receiver repeated n number of times.\n","interpolateInPlace(optionalContext)":"\tReplaces all #{expression} with expression evaluated in the optionalContext. \n\tIf optionalContext not given, the current context is used.  Returns self.\n","translate(fromChars, toChars)":"\tIn the receiver, the characters in fromChars are replaced with those in the same positions in toChars. Returns self.\n","itemType":"\tReturns machine type of elements.\n","clipBeforeEndOfSeq(aSequence)":"\tRemoves the contents of the receiver before the end of\n\tthe first occurance of aSequence. Returns true if anything was\n\tremoved, or false otherwise.\n","asJson":"Converts to form that could be interpreted as json if it already contains json, e.g. {\"aaa\":\"bbb\"} --> \"{\\\"aaa\\\":\\\"bbb\\\"}\"\n","empty":"\tSets all bytes in the receiver to 0x0 and sets\n\tit's length to 0. Returns self.\n","setSize(aNumber)":"\tSets the length in bytes of the receiver to aNumber. Return self.\n","atPut(aNumberIndex, aNumber)":"\tSets the value at the index specified by aNumberIndex to aNumber. Returns self.\n","isEqualAnyCase(aSequence)":"\tReturns true if aSequence is equal to the receiver\n\tignoring case differences, false otherwise.\n","alignCenter(width, [padding]) \"\"":"\tExample:\n\t<code>\n\tIo> \"abc\" alignCenter(10, \"-\")\n\t==> ---abc----\n\tIo> \"abc\" alignCenter(10, \"-=\")\n\t==> -=-abc-=-=\n\t<\/code>\n","exclusiveSlice(inclusiveStartIndex, exclusiveEndIndex)":"\tReturns a new string containing the subset of the\n\treceiver from the inclusiveStartIndex to the exclusiveEndIndex. The exclusiveEndIndex argument\n\tis optional. If not given, it is assumed to be one beyond the end of the string.\n","\/=(aSeq)":"\tDivides the values of aSeq to the corresponding values of the receiver.\n\tOnly works on Sequences whose item type is numeric. Returns self.\n","log10":"Sets each value of the Sequence to the base 10 log of it's value.\nReturns self.\n","asStruct(memberList)":"For a sequence that contains the data for a raw memory data structure (as used in C),\nthis method can be used to extract it's members into an Object. The memberList argument\nspecifies the layout of the datastructure. It's form is:\n<p>\nlist(memberType1, memberName1, memberType2, memberName2, ...)\n<p>\nMember types include: \n<pre>\nint8, int16, int32, int64\nuint8, uint16, uint32, uint64\nfloat32, float64 \n<\/pre>\nExample:\n<pre>\npointObject := structPointSeq asStruct(list(\"float32\", \"x\", \"float32\", \"y\"))\n<\/pre>\nThe output pointObject would contain x and y slots with Number objects.\n","abs":"Sets each value of the Sequence to it's absolute value.\nReturns self.\n","pathExtension":"\tReturns a string containing the receiver clipped up to the last period.\n","hash":"Returns a Number containing a hash of the Sequence.\n","afterSeq(aSequence)":"\tReturns the slice of the receiver (as a Symbol) after aSequence or\n\tnil if aSequence is not found. If aSequence is empty, the receiver\n\t(or a copy of the receiver if it is mutable) is returned.\n","splitAtRegex(aRegexOrString)":"\t\tSplits the receiver into pieces using the given regex as the delimiter and\n\t\treturns the pieces as a list of strings.\n","asJid":"Converts Sequence to JID object. <pre><code>\"cow@moo.com\/Scandinavia\" asJid<\/code><\/pre>\n","size":"Returns the length in number of items (which may or may not\nbe the number of bytes, depending on the item type) of the receiver. For example,\n<p>\n<pre>\t\n\"abc\" size == 3\n<\/pre>\n","asUCS2":"\tReturns a new copy of the receiver converted to UCS2 (fixed character width UTF16) encoding.\n","bitwiseNot(aSequence)":"Updates the receiver to be the result of a bitwiseNot with aSequence. Returns self.\n","rstrip(aSequence)":"Strips the characters in\naSequence stripped from the end of the receiver. Example:\n<pre>\t\n\"Cut the tail off\" rstrip(\" afilot\")\n==> \"Cut the\"\n<\/pre>\n","bitwiseOr(aSequence)":"Updates the receiver to be the result of a bitwiseOr with aSequence. Returns self.\n","log":"Sets each value of the Sequence to the natural log of it's value.\nReturns self.\n","exp":"Sets each value of the Sequence to e**value.\nReturns self.\n","+=(aSeq)":"\tVector addition - adds the values of aSeq to those of the receiver.\n\tOnly works on Sequences whose item type is numeric. Returns self.\n","removePrefix(aSequence)":"\tIf the receiver begins with aSequence, it is removed. Returns self.\n","sort":"Sorts the characters\/numbers the array. Returns self.\n","clear":"Set all values in the sequence to 0. Returns self.\n","foreach(optionalIndex, value, message)":"For each element, set index to the index of the\nelement and value the element value and execute message. \nExample:\n<pre>\t\naSequence foreach(i, v, writeln(\"value at index \", i, \" is \", v))\naSequence foreach(v, writeln(\"value \", v))\n<\/pre>\n","findSeq(aSequence, optionalStartIndex)":"\tReturns a number with the first occurrence of aSequence in\n\tthe receiver after the startIndex. If no startIndex is specified,\n\tthe search starts at index 0.\n\tnil is returned if no occurences are found.\n","prependSeq(object1, object2, ...)":" Prepends given objects asString in reverse order to the receiver.  Returns self.\")\n","asMutable":"\tReturns a mutable copy of the receiver.\n","replaceFirstSeq(aSequence, anotherSequence, optionalStartIndex)":"\tReturns a new Sequence with the first occurance of aSequence\n\treplaced with anotherSequence in the receiver. If optionalStartIndex is\n\tprovided, the search for aSequence begins at that index. Returns self.\n","at(aNumber)":"\tReturns a value at the index specified by aNumber.\n\tReturns nil if the index is out of bounds.\n","isZero":"\tReturns true if all elements are 0, false otherwise.\n","findSeqs(listOfSequences, optionalStartIndex)":"\tReturns a object with two slots - an \\\"index\\\" slot which contains \n\tthe first occurrence of any of the sequences in listOfSequences found \n\tin the receiver after the startIndex, and a \\\"match\\\" slot, which \n\tcontains a reference to the matching sequence from listOfSequences. \n\tIf no startIndex is specified, the search starts at index 0. \n\tnil is returned if no occurences are found.\n","\/(aSeq)":"\tDivides the values of aSeq to the corresponding values of the receiver \n\treturning a new vector with the result.\n\tOnly works on Sequences whose item type is numeric.\n","setItemsToLong(aNumber)":"\tSets all items in the Sequence to the long integer value of aNumber.\n","atan":"Sets each value of the Sequence to the trigomentic arctangent of it's value.\nReturns self.\n","betweenSeq(aSequence, anotherSequence)":"\tReturns a new Sequence containing the bytes between the\n\toccurance of aSequence and anotherSequence in the receiver. \n\tIf aSequence is empty, this method is equivalent to beforeSeq(anotherSequence).\n\tIf anotherSequence is nil, this method is equivalent to afterSeq(aSequence).\n\tnil is returned if no match is found.\n","removeSuffix(aSequence)":"\tIf the receiver end with aSequence, it is removed. Returns self.\n","toBase(aNumber)":"\tReturns a Sequence containing the receiver(which is\n\tassumed to be a base 10 number) converted to the specified base.\n\tOnly base 8 and 16 are currently supported.\n","meanSquare":"Returns the arithmetic mean of the sequence's values after they have been squared.\n","isEmpty":"\tReturns true if the size of the receiver is 0, false otherwise.\n","asSymbol":"\tReturns a immutable Sequence (aka Symbol) version of the receiver.\n","inclusiveSlice(inclusiveStartIndex, inclusiveEndIndex)":"\tReturns a new string containing the subset of the\n\treceiver from the inclusiveStartIndex to the inclusiveEndIndex. The inclusiveEndIndex argument\n\tis optional. If not given, it is assumed to be the end of the string.\n","sum":"Returns the sum of the Sequence.\n","alignLeftInPlace(width, [padding])":" Same as align left but operation is performed on the receiver.\n","reverse":"Reverses the ordering of all the items of the receiver. Returns copy of receiver.\n","asOSPath":"Returns a OS style path for an Io style path.\n","tan":"Sets each value of the Sequence to the trigomentic tangent of it's value.\nReturns self.\n","isMutable":"\tReturns true if the receiver is a mutable Sequence or false otherwise.\n","sinh":"Sets each value of the Sequence to the hyperbolic sine of it's value.\nReturns self.\n","unescape":"\tEscape codes replaced with escape characters. Returns self.\n","withStruct(memberList)":"This method is useful for producing a Sequence containing a raw datastructure with\nthe specified types and values. The memberList format is:\n<p>\nlist(memberType1, memberName1, memberType2, memberName2, ...)\n<p>\nMember types include: \n<pre>\nint8, int16, int32, int64\nuint8, uint16, uint32, uint64\nfloat32, float64 \n<\/pre>\nExample:\n<pre>\npointStructSeq := Sequence withStruct(list(\"float32\", 1.2, \"float32\", 3.5))\n<\/pre>\nThe output pointStructSeq would contain 2 raw 32 bit floats.\n","findNthSeq(aSequence, n)":" Returns a number with the nth occurence of aSequence.\n","asSGML":"SGML extension to interpret the Sequence as SGML and return an SGML object using SGMLParser elementForString\n","lowercase":"\tMakes all the uppercase characters in the receiver lowercase. Returns self.\n","lstrip(aSequence)":"Strips the characters in aSequence\nstripped from the beginning of the receiver. Example:\n<p>\n<pre>\t\n\"Keep the tail\" lstrip(\" eKp\")\n==> \"the tail\"\n<\/pre>\n","justSerialized(stream)":" Writes the receiver's code into the stream.\n","print":"Prints contents of a sequence.\n","mean":"Returns the arithmetic mean of the sequence.\n","fileName":"\tReturns the last path component sans the path extension.\n","asBase64(optionalCharactersPerLine)":"\tReturns an immutable, base64 encoded (according to RFC 1421) version of self. \n\toptionalCharactersPerLine describes the number of characters between line breaks and defaults to 0.\n","logicalAnd(aSequence)":"Updates the receive's values to be the result of a logical OR operatiosn with the values of aSequence. Returns self.\n","bitwiseAnd(aSequence)":"Updates the receiver to be the result of a bitwiseAnd with aSequence. Returns self.\n","strip(optionalSequence)":"Trims the whitespace (or optionalSequence) off both ends:\n<p>\n<pre>\t\n\"   Trim this string   \\r\\n\" strip\n==> \"Trim this string\"\n<\/pre>\n","rangeFill":"Sets the values of the Sequence to their index values.\nReturns self.\n","fromBase64":"\tReturns an immutable, base64 decoded (according to RFC 1421) version of self.\n","*(aSeq)":"\tMultiplies the values of aSeq to the corresponding values of the receiver \n\treturning a new vector with the result.\n\tOnly works on Sequences whose item type is numeric.\n","setItemsToDouble(aNumber)":"\tSets all items in the Sequence to the double floating point value of aNumber.\n","asCapitalized":"\tReturns a copy of the receiver with the first charater made uppercase.\n","asUppercase":"\tReturns a symbol containing the reveiver made uppercase.\n","clipBeforeSeq(aSequence)":"\tClips receiver before aSequence.\n","negate":"Negates the values of the receiver.\nReturns self.\n","asBinaryNumber":"\tReturns a Number containing the first 8 bytes of the\n\treceiver without casting them to a double. Endian is same as machine.\n","setItemType(aTypeName)":"\tSets the underlying machine type for the elements. \n\tValid names are uint8, uint16, uint32, uint64, int8, int16, int32, \n\tint64, float32, and float64. Note that 64 bit types are only available \n\ton platforms that support such types. Returns self.\n","duplicateIndexes":"Duplicates all indexes in the receiver.\nFor example, list(1,2,3) duplicateIndexes == list(1,1,2,2,3,3). Returns self.\n","product":"Returns the product of all the sequence's values multipled together.\n","interpolate(ctx)":"\tReturns immutable copy of self with interpolateInPlace(ctx) passed to the copy.\n","set(aNumber1, aNumber2, ...)":"\tSets the values of the receiver to the sequences of numbers in the arguments.\n\tUnset values will remain unchanged.\n\tReturns self.\n","removeLast":"\tRemoves the last element from the receiver. Returns self.\n","makeFirstCharacterLowercase":"  Receiver must be mutable (see also asMutable). Returns receiver.\n  <br\/>\n  <pre>\n  Io> \"ABC\" asMutable makeFirstCharacterLowercase\n  ==> aBC\n  <\/pre>\n","asBinaryUnsignedInteger":"\tReturns a Number with the bytes of the receiver interpreted as a binary unsigned integer. Endian is same as machine.\n","square":"Sets each value of the Sequence to the square of it's value.\nReturns self.\n","with(aSequence, ...)":"\tReturns a new Sequence which is the concatination of the arguments.\n\tThe returned sequence will have the same mutability status as the receiver.\n","split(optionalArg1, optionalArg2, ...)":"Returns a list containing the sub-sequences of the receiver divided by the given arguments.\nIf no arguments are given the sequence is split on white space.\nExamples:\n<pre>\t\n\"a b c d\" split == list(\"a\", \"b\", \"c\", \"d\")\n\"a*b*c*d\" split(\"*\") == list(\"a\", \"b\", \"c\", \"d\")\n\"a*b|c,d\" split(\"*\", \"|\", \",\") == list(\"a\", \"b\", \"c\", \"d\")\n\"a   b  c d\" split == list(\"a\", \"\", \"\", \"\", \"b\", \"\", \"\", \"c\", \"\", \"d\")\n<\/pre>\n","ceil":"Round each value to smallest integral value not less than x.\nReturns self.\n","asNumber":"\tReturns the receiver converted to a number.\n\tInitial whitespace is ignored.\n","asUTF8":"\tReturns a new copy of the receiver converted to utf8 encoding.\n","asBinarySignedInteger":"\tReturns a Number with the bytes of the receiver interpreted as a binary signed integer. Endian is same as machine.\n","asFixedSizeType":"\tReturns a new sequence with the receiver encoded in the \n\tminimal fixed width text encoding that it's characters can fit \n\tinto (either, ascii, utf8, utf16 or utf32).\n","clipAfterStartOfSeq(aSequence)":"\tRemoves the contents of the receiver after the beginning of\n\tthe first occurance of aSequence. Returns true if anything was\n\tremoved, or false otherwise.\n","slice":"Deprecated method. Use exSlice instead.\n","findRegex(aRegexOrString, [startIndex])":"\t\tReturns the first match of the given regex in the receiver, after the given start index.\n\t\tIf you don't specify a start index, the search will start at the beginning of the receiver.\n\t\tThe method returns nil if no match is found.\n","allMatchesOfRegex(aRegexOrString)":"\t\tReturns a List containing all matches of the given regex found in the receiver.\n","setEncoding(encodingName)":"\tSets the encoding flag of the receiver (only the encoding flag, \n\titemSize and itemType will change, no conversion is done between UTF\n\tencodings - you can use convertToUTF8, etc methods for conversions). \n\tValid encodings are number, utf8, utf16, and utf32. Returns self.\n","matchesRegex(aRegexOrString)":"\t\tReturns true if the receiver matches the given regex, false if not.\n","byteAt(byteIndex)":"Returns a Number containing the byte at the byte index value.\n","removeOddIndexes":"Removes odd indexes in the receiver.\nFor example, list(1,2,3) removeOddIndexes == list(2). Returns self.\n","Min":"Returns the minimum value in the sequence.\n","distanceTo(aSeq)":"\tReturns a number with the square root of the sum of the square \n\tof the differences of the items between the sequences.\n","endsWithSeq(aSequence)":"\tReturns true if the receiver ends with aSequence, false otherwise.\n","clipAfterSeq(aSequence)":"\tRemoves the contents of the receiver after the end of\n\tthe first occurance of aSequence. Returns true if anything was\n\tremoved, or false otherwise.\n","splitAt(indexNumber)":"\tReturns a list containing the two parts of the receiver as split at the given index.\n","sizeInBytes":"\tReturns the length in bytes of the receiver.\n","greaterThan(aSeq)":"\tReturns true if the receiver is greater than aSeq, false otherwise.\n","asFile":"Returns a new File object with the receiver as it's path.\n","contains(aNumber)":"\tReturns true if the receiver contains an element equal in value to aNumber, false otherwise.\n","asMessage(optionalLabel)":"\tReturns the compiled message object for the string.\n","fromBase(aNumber)":"\tReturns a number with a base 10 representation of the receiver\n\tconverted from the specified base. Only base 2 through 32 are currently supported.\n","max":"Returns the maximum value of the Sequence.\n","escapeRegexChars":"\t\tReturns a clone of the receiver with all special regular expression characters\n\t\t(\"^\", \"$\", etc) backslashed. Useful if you have a string that contains such characters,\n\t\tbut want it to be treated as a literal string.\n","hasMatchOfRegex(aRegexOrString)":"\t\tReturns true if the string contains one or more matches of the given regex.\n","linePrint":"\tPrints the Sequence and a newline character.\n","Max":"Returns the maximum value in the sequence.\n","matchesOfRegex(aRegexOrString)":"\t\tReturns a RegexMatches object that enumerates all matches of the given regex in the receiver.\n","logicalOr(aSequence)":"Updates the receive's values to be the result of a logical OR operatiosn with the values of aSequence. Returns self.\n","uppercase":"\tMakes all characters of the receiver uppercase.\n","escape":"\tEscape characters in the receiver are replaced with escape codes.\n\tFor example a string containing a single return character would contain the\n\tfollowing 2 characters after being escaped: \"\\n\". Returns self.\n","asIoPath":"Returns a Io style path for an OS style path.\n","beforeSeq(aSequence)":"\tReturns the slice of the receiver (as a Symbol) before\n\taSequence or self if aSequence is not found.\n","splitNoEmpties(optionalArg1, optionalArg2, ...)":"\t\tReturns a list containing the non-empty sub-sequences of the receiver divided by the given arguments.\n\t\tIf no arguments are given the sequence is split on white space.\n\t\tExamples:\n\t\t<code>\n\t\t\"a   b  c d\" splitNoEmpties => list(\"a\", \"b\", \"c\", \"d\")\n\t\t\"a***b**c*d\" splitNoEmpties(\"*\") => list(\"a\", \"b\", \"c\", \"d\")\n\t\t\"a***b||c,d\" splitNoEmpties(\"*\", \"|\", \",\") => list(\"a\", \"b\", \"c\", \"d\")\n\t\t<\/code>\n","removeAt(index)":"\tRemoves the item at index. Returns self.\n","capitalize":"\tFirst charater of the receiver is made uppercase.\n","asin":"Sets each value of the Sequence to the trigomentic arcsine of it's value.\nReturns self.\n","min":"Returns the minimum value of the Sequence.\n","..(aSequence)":"\tReturns a copy of the receiver with aSequence appended to it.\n","asXML":"SGML extension to interpret the Sequence as XML and return an SGML object using SGMLParser elementForString\n","removeSeq(aSequence)":"\tRemoves occurances of aSequence from the receiver.\n","lastPathComponent":"\tReturns a string containing the receiver clipped up\n\tto the last path separator.\n","appendPathSeq(aSeq)":"\tAppends argument to the receiver such that there is one\n\tand only one path separator between the two. Returns self.\n","asHex":"Returns a hex string for the receiving sequence, e.g., \\\"abc\\\" asHex -> \\\"616263\\\".\")\n","alignLeft(width, [padding])":"\tExample:\n\t<p>\n\t<code>\n\tIo> \"abc\" alignLeft(10, \"+\")\n\t==> abc+++++++\n\tIo> \"abc\" alignLeft(10, \"-=\")\n\t==> abc-=-=-=-\n\t<\/code>\n","floor":"Round each value to largest integral value not greater than x.\nReturns self.\n","makeFirstCharacterUppercase":"  Receiver must be mutable (see also asMutable). Returns receiver.\n  <br\/>\n  <pre>\n  Io> \"abc\" asMutable makeFirstCharacterUppercase\n  ==> Abc\n  <\/pre>\n","isSymbol":"\tReturns true if the receiver is a\n\timmutable Sequence (aka, a Symbol) or false otherwise.\n","bitwiseXor(aSequence)":"Updates the receiver to be the result of a bitwiseXor with aSequence. Returns self.\n"}},"Profiler":{"module":"Core","description":"","category":"Core\n","slots":{}},"Block":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"Blocks are anonymous functions (messages with their own locals object). \nThey are typically used to represent object methods.\n","category":"Core\n","slots":{"code":"\tReturns a string containing the decompiled code of the receiver.\n","setCode(aString)":"\tSet's the reciever's message to a compiled version of aString. Returns self\n","print":"\tprints an Io source code representation of the block\/method\n","Formatter":"Helper object for the <tt>asString<\/tt> method.\n","setProfilerOn(aBool)":"\tIf aBool is true, the global block profiler is enabled, if false it is disabled. Returns self.\n","asString":"Returns a full description of the receiver with decompiled code.\n","scope":"\tReturns the scope used when the block is activated or\n\tNil if the target of the message is the scope.\n","setArgumentNames(aListOfStrings)":"\tSets the receiver's argument names to those specified in\n\taListOfStrings. Returns self.\n","call(arg0, arg1, ...)":"\tActivates the receiver with the provided arguments.\n","justSerialized(stream)":" Writes the receiver's code into the stream.\n","profilerTime":"\tReturns clock() time spent in compiler in seconds.\n","setMessage(aMessage)":"\tSets the root message of the receiver to aMessage.\n","passStops":"\tReturns whether or not the receiver passes return\/continue\/break to caller.\n","asSimpleString":"Returns a short description of the receiver.\n","argumentNames":"\tReturns a List of strings containing the argument names of the receiver.\n","setScope(anObjectOrNil)":"\tIf argument is an object, when the block is activated,\n\tit will set the proto and self slots of it's locals to the specified\n\tobject. If Nil, it will set them to the target of the message.\n","performOn(anObject, optionalLocals, optionalMessage, optionalSlotContext)":"\tActivates the receiver in the target context of anObject.\n\tReturns the result.\n","asJson":"Returns \"null\".\n","setPassStops(aBool)":"\tSets whether the receiver passes return\/continue\/break to caller.\n","message":"\tReturns the root message of the receiver.\n","println":"Same as <tt>print<\/tt>.\n"}},"DynLib":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"A DLL Loader by Kentaro A. Kurahone.\n","category":"Core\n","slots":{"open":"\tOpens the dynamic library and returns self or raises a DynLoad.open Error if there is an error.\n","initFuncName":"\tReturns the initialization function name.\n","isOpen":"\tReturns true if the library is open, or false otherwise.\n","path":"\tReturns the path to the dynamic library.\n","call(functionName, <arg1>, <arg2>, ...)":"\tCall's the dll function of the specified name with the arguments provided. \n\tReturns the a Number with the result value.\n","freeFuncName":"\tReturns the io_free function name.\n","voidCall(functionName, <arg1>, <arg2>, ...)":"\tSame as call but for functions with no return value. Returns nil.\n","callPluginInit(functionName)":"\tCall's the dll function of the specified name. \n\tReturns the result as a Number or raises an exception on error.\n","setFreeFuncName(aString)":"\tSets the io_free function name. Returns self.\n","setInitFuncName(aString)":"\tSets the initialization function name for the dynamic library. Returns self.\n","setPath(aString)":"\tSets the path to the dynamic library. Returns self.\n","close":"\tCloses the library. Returns self.\n"}},"System":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte, 2002\n","description":"Contains methods related to the IoVM.\n","category":"Core\n","slots":{"maxRecycledObjects":"\tReturns the max number of recycled objects used.\n","userInterruptHandler":"Called when control-c is hit. Override to add custom behavior. Returns self.\n","sleep(secondsNumber)":"\tPerforms a *blocking* sleep call for specified number of seconds.\n","runCommand":"Calls system and redirects stdout\/err to tmp files.  Returns object with exitStatus, stdout and stderr slots.\n","launchPath":"Returns a pathComponent of the launch file.\n","distribution":"\tReturns the Io distribution name as a string.\n","platform":"\tReturns a string description of the platform.\n","setMaxRecycledObjects(aNumber)":"\tSets the max number of recycled objects used.\n","errorNumber":"\tReturns the C errno string.\n","version":"\tReturns a version number for Io.\n","installPrefix":"\tReturns the root path where io was install. The default is \/usr\/local.\n","args":"\tReturns the list of command line argument strings the program was run with.\")\n","getOptions(args)":"\tThis primitive is used to get command line options similar to Cs getopt().\n\tIt returns a map in containing the left side of the argument, with the\n\tvalue of the right side. (The key will not contain\n\tthe beginning dashes (--).\n\t<p>\n\tExample:\n\t<pre>\n\toptions := System getOptions(args)\n\toptions foreach(k, v,\n\t  if(v type == List type,\n\t\tv foreach(i, j, writeln(\\\"Got unnamed argument with value: \\\" .. j))\n\t\tcontinue\n\t  )\n\t  writeln(\\\"Got option: \\\" .. k .. \\\" with value: \\\" .. v)\n\t)\n\t<\/pre>\n","ioPath":"Returns the path of io installation. The default is $INSTALL_PREFIX\/lib\/io.\n","recycledObjectCount":"\tReturns the current number of objects being held for recycling.\n","symbols":"\tReturns a List containing all Symbols currently in the system.\n","exit(optionalReturnCodeNumber)":"\tShutdown the IoState (io_free all objects) and return\ncontrol to the calling program (if any).\n","setEnvironmentVariable(keyString, valueString)":"\tSets the environment variable keyString to the value valueString.\n","getEnvironmentVariable(nameString)":"\tReturns a string with the value of the environment \n\tvariable whose name is specified by nameString.\n","launchScript":"Returns the path of the io file run on the command line. Returns nil if no file was run.\n","daemon(dontChroot, dontRedirectOutputStreams)":"\tBecome a daemon process.  If dontChroot is false, the process will change its directory to \/.  If dontRedirectOutputStreams is false, stdout and stderr are redirected to \/dev\/null.\n","system(aString)":"\tMakes a system call and returns a Number for the return value.\n","thisProcessPid()":"\tReturn the process id (pid) for this Io process.\n","platformVersion":"\tReturns the version id of the OS.\n","activeCpus":"\tReturns the number of active CPUs.\n","setLobby(anObject)":"\tSets the root object of the garbage collector.\n"}},"Coroutine":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"Object wrapper for an Io coroutine.\n","category":"Core\n","slots":{"runMessage":"The message to send to the runTarget when the coroutine starts.\n","yieldingCoros":"Reference to Scheduler yieldingCoros.\n","parentCoroutine":"Returns the parent coroutine this one was chained from or nil if it wasn't chained. When a Coroutine ends, it will attempt to resume it's parent.\n","setException":"","resume":"\tYields to the receiver. Runs the receiver if it is not running yet. \n\tReturns self.\n","setLabel":"","raiseException":"Sets exception in the receiver and resumes parent coroutine.\n","resumeParentCoroutine":"Pauses current coroutine and resumes parent.\n","runLocals":"The locals object in whose context the coroutine will send it's run message.\n","freeStack":"\tFrees all the internal data from the receiver's stack. Returns self.\n","showStack":"Writes backTraceString to STDOUT.\n","exception":"Returns the current exception or nil if there is none.\n","main":"[Seems to be obsolete!] Executes runMessage, resumes parent coroutine.\n","typeId":"Returns <type>_<uniqueHexId> string.\n","setRunMessage":"","ignoredCoroutineMethodNames":"List of methods to ignore when building a <tt>callStack<\/tt>.\n","resumeLater":"  Promotes receiver to the top of the yieldingCoros queue, but not yielding to it.\n  When current coroutine yields, receiver will resume.\n","setRunTarget":"","setRunLocals":"","showYielding":"Prints a list of yielding coroutines to STDOUT.\n","implementation":"\tReturns coroutine implementation type: \"fibers\", \"ucontext\" or \"setjmp\"\n","backTraceString":"Returns a formatted callStack output along with exception info (if any). In case of CGI script, wraps output with &lt;code&gt; tag.\n","isCurrent":"\tReturns true if the receiver is currently running coroutine.\n","ioStack":"\tReturns List of values on this coroutine's stack.\n","runTarget":"The object which the coroutine will send a message to when it starts.\n","setParentCoroutine":"","setMessageDebugging(aBoolean)":"\tTurns on message level debugging for this coro. When on, this\n\tcoro will send a vmWillSendMessage message to the Debugger object before\n\teach message send and pause itself. See the Debugger object documentation\n\tfor more information.\n","label":"A label slot useful for debugging purposes.\n","yield":"  Yields to another coroutine in the yieldingCoros queue.\n  Does nothing if yieldingCoros is empty.\n","pause":"\tRemoves current coroutine from the yieldingCoros queue and\n\tyields to another coro. <tt>System exit<\/tt> is executed if no coros left.\n\t<br\/>\n\tYou can resume a coroutine using either <tt>resume<\/tt> or <tt>resumeLater<\/tt> message.\n","isYielding":"Returns true if the receiver is yielding (not paused or running).\n","run":"\tRuns receiver and returns self.\n","setYieldingCoros":"","setStackSize":"","setResult":"","debugWriteln":"(See <tt>Object debugWriteln<\/tt>.)\n","inException":"Set to true when processing an exception in the coroutine.\n","result":"The result set when the coroutine ends.\n","callStack":"Returns a list of Call objects.\n","stackSize":"Stack size allocated for each new coroutine. Coroutines will automatically chain themselves as need if more stack space is required.\n","pauseCurrentAndResumeSelf":"Pauses current coroutine and yields to a receiver.\n","setInException":"","yieldCurrentAndResumeSelf":"Yields to a receiver.\n","currentCoroutine":"\tReturns currently running coroutine in Io state.\n"}},"CFunction":{"module":"Core","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"A container for a pointer to a C function binding. \nCFunction's can only be defined from the C side and act \nlike blocks in that when placed in a slot, are called when the \nslot is activated. The for, if, while and clone methods of the Lobby \nare examples of CFunctions. CFunctions are useful for implementing \nmethods that require the speed of C or binding to a C library.\n","category":"Core\n","slots":{"id":"\tReturns a number containing a unique id for the receiver's internal C function.\n","asString":"Same as asSimpleString.\n","asSimpleString":"Returns the CFunction name.\n","==(anObject)":"\tReturns self if the argument is a CFunction with the same internal C function pointer.\n","name":"Returns the CFunction name in the form CFunction_Pointer.\")\n","typeName":"\tReturns the owning type of the CFunction or nil if the CFunction can be called on any object.\n","uniqueName":"\tReturns the name given to the CFunction.\n","performOn(target, blockLocals, optionalMessage, optionalContext)":"\tActivates the CFunctions with the supplied settings.\n"}}},"Range":{"Range":{"module":"Range","license":"BSD\n","copyright":"Jeremy Tregunna, 2006\n","description":"Simple datastructure representing the items at and between two specific points.\n","category":"Core\n","slots":{"first":"\tMoves the current cursor to the beginning of the range, and returns it.\n","value":"\tReturns the value of the current item in the range.\n","index":"Returns the current index number starting from zero and extending \noutward up to the maximum number of items in the range.\n","toBy(endpoint, increment)":" Convenience constructor that returns a range of sequences from the receiver to the endpoint argument. Increments over each item in that range by the value of the increment parameter. The increment parameter must be positive.\n","map([value], body)":" Returns a new list which contains the result of the 'body' for every element stepped over in the range, from the starting point to the ending point inclusive.\n","asList":"Returns a list containing all the items within and including the ranges starting and ending points.\n","next":"\t\tSets the current item in the range to the next item in the range, \n\t\tand returns a boolean value indicating whether it is not at the end of the range.\n","contains":"Returns a boolean value if the range contains the argument. This works independant of any increment value.\n","foreach(optionalIndex, value, message)":"\tIterates over each item beginning with the starting point, and finishing at \n\tthe ending point inclusive. This method can operate several ways; these include: \n\t(1) Takes one argument, the message tree to be executed during each iteration; (2) \n\tTakes two arguments, the first argument is the name of the current value being \n\titerated over, and the second is the message tree to be executed during each \n\titeration; (3) Takes three arguments: the first is the current index within the \n\trange, the second is the name of the current value being iterated over, and the \n\tthird is the message tree to be executed during each iteration. \n\tFor example:\n<pre>\n\/\/ First method (operating on numbers)\n1 to(10) foreach(\"iterating\" print) \/\/ prints \"iterating\" 10 times\n\/\/ Second method (operating on numbers)\n1 to(10) foreach(v, v print) \/\/ prints each value\n\/\/ Third method (operating on numbers)\n1 to(10) foreach(i, v, writeln(i .. \": \" .. v)) \/\/ prints \"index: value\"\n<\/pre>\n","toBy(endingPoint, incrementValue)":" Convenience constructor that returns a cursor object representing the range of numbers from the receiver to the 'endingPoint' parameter. Increments over each item in that range by the 'incrementValue' parameter.\n","levenshtein(other)":" Returns the levenshtein distance to other.\n","setRange(start, end, increment)":"\tHas several modes of operation. First, if only two parameters are specified, \n\tthe increment value is set to 1 by default, while the first parameter represents\n\tthe point to start from, and the second parameter represents the point to end at. \n\tIf the second parameter is smaller than the first, the range will operate backwards. \n\tIf the third parameter is specified, a custom iteration value will be used instead of 1.\n","nextInSequence(skipVal)":" Returns the next item in the sequence.  The optional skipVal parameter allows you to skip ahead skipVal places.\n","at(position)":" Rewinds the range, skips forward until we're at the supplied position then returns the value at that position. Raises an exception if the position is out of bounds.\n","rewind":"\tSets the current item and the index to the values the receiver started out with.\n","to(endpoint)":" Convenience constructor that returns a range of sequences from the receiver to the endpoint argument. Increments over each item in that range by 1.\n","indexOf(aValue)":" Calculates each value, checking to see if it matches the aValue parameter. If so, return the position within the range. NOTE: This method rewinds the range before searching. If you need to revert back to your original position, make a duplicate of the range, and use indexOf on it instead.\n","last":"\tMoves the current cursor to the end of the range, and returns it.\n","to":"Convenience constructor that returns a cursor object representing the range of numbers from the receiver to the 'endingPoint' parameter. Increments over each item in that range by 1.\n","slice(start, end, [by])":" Returns a list containing the values from the Range starting at the start parameter, ending at the end parameter, and optionally incremented by the by parameter.\n","select":"Operates the same as 'List select'\n","previous":"\tSets the current item in the range to the previous item in the range, \n\tand returns a boolean value indicating whether it is not at the beginning of the range.\n"}}},"NotificationCenter":{"NotificationCenter":{"module":"NotificationCenter","description":"\nAn NotificationCenter similar to the one found in Apple's FoundationKit.\n<p>\nExample use:\n<pre>\n\/\/ in listener\nlistener := NotificationListener clone setTarget(self) setName(\"FeedDownloadedFile\") start\n\n\/\/ in sender\nNotification clone setSender(self) setName(\"FeedDownloadedFile\") post\n\n\/\/ note: notifications can also be reused, and any extra data can be added in it's slots\n\n\/\/ to stop listening\nlistener stop\n<\/pre>\n","category":"Core\n","slots":{"listeners":"Returns list of NotificationListeners.\n","postNotification(aNotification)":"Sends aNotification to be handled by listeners. Returns self.  \nImplementation:\n<pre>\nlisteners foreach(handleNotification(n))\n<\/pre>\n","addListener(aNotificationListener)":" Removes aNotificationListener from listeners list. Returns self.\n"}},"Notification":{"module":"NotificationCenter","category":"Core\n","slots":{"post":"Posts the notification to the NotificationCenter.\n","setSender(anObject)":" Sets the sender of the Notification. Returns self.\n","setName(anObject)":" Sets the name of the Notification. Returns self.\n","name":"Returns the name of the notification.\n","sender":"Returns the sender of the notification.\n"}},"NotificationListener":{"module":"NotificationCenter","category":"Core\n","slots":{"start":"Removes the receiver to the NotificationCenter set of listeners. Returns self.\n","target":"Returns the target that the receiver sends matching messages to.\n","action":"Returns the name of the message that is sent to the target when a matching notification is found.\n","sender":"Returns the sender that the listener wants to receive messages from.\n","setTarget(anObject)":" Sets the target that the receiver sends matching messages to. Returns self.\n","setName(aSeq)":" Sets the message name that the listener wants to receive messages for. Returns self.\n","setSender(anObject)":" Sets the sender that the listener wants to receive messages from. Returns self.\n","name":"Returns the message name that the listener wants to receive messages for.\n","handleNotification(aNotification)":"Checks to see if aNotification matches the listener criteria and if so, sends it to the target. Implementation:\n<pre>\nif((name == nil or name == n name) and(object == nil or sender == n sender),\n\ttarget perform(action, n)\n)\n<\/pre>\n","setAction(messageName)":" Sets the name of the message that is sent to the target when a matching notification is found. Returns self.\n"}}},"Flux":{"Message":{"module":"Core","license":"\tBSD revised\n","copyright":"\tSteve Dekorte; Jonathan Wright, 2002, 2006\n","description":"A Message object encapsulates the action of a message send. \nBlocks are composed of a Message and its children.\n<p>\nTerminology\n<pre>\nExample:\n  Io> msg := message(A B(C D); E F)\n  ==> A B(C D); E F\n  \nIn the above example:\n  msg name            =>  A\n  msg next            =>  B(C D); E F\n  msg next arguments  =>  list(C D)\n  msg next next name  =>  ;\n  msg next next next  =>  E F\n<\/pre>\nImportant: Modifying the message tree of a block currently in use may cause\na crash if a garbage collection cycle occurs. If the implementation were\nchanged to retain every called message, this could be avoided.\nBut the cost to performance seems to outweigh the need to cover this case for now.\n","category":"Core\n","slots":{"characterNumber":"\tReturns the message character number. The charcter number is typically\n\tthe beggining character index in the source text from with the message was read.\n","description":"Returns a string containing a short description of the method.\n","asString":"\tSame as code().\n","setCachedArgs(listOfValues)":" Appends evaluated arguments to a message. Returns self.\n","setLabel(aString)":"\tSets the label of the message and its children. Returns self.\n","union(other) Creates a union of the receiver and the other parameter.":"\tReturns a new message object with the receivers message as the first argument of the returned message, \n\tand the other parameter's arguments as each successive argument to the new message.\n\t<br\/>\n\t<pre>\n  Io> message(a) union(message(b))\n  ==> [unnamed](a, b)\n  <\/pre>\n","setArguments(aListOfMessages)":"\tSets the arguments of the receiver to deep copies of\n\tthose contained in aListOfMessages.  Returns self.\n","name":"\tReturns the name of the receiver.\n","arguments":"\tReturns a list of the message objects that act as the\n\treceiver's arguments. Modifying this list will not alter the actual\n\tlist of arguments. Use the arguments_() method to do that.\n","previous":"\tReturns the previous message in the message chain or Nil if there is no previous message.\n","appendCachedArg(aValue)":"\tAdds aValue to the argument list of receiver as a cachedResult.\n","code":"\tReturns a String containing a decompiled code representation of the receiver.\n","next":"\tReturns the next message in the message chain or nil if there is no next message.\n","setNext(aMessageOrNil)":"\tSets the next message in the message chain to a deep copy of\n\taMessage or it removes the next message if aMessage is nil.\n","argAt(indexNumber)":"\tReturns Message object for the specified argument or Nil if none exists.\n","argCount":"Returns the number of arguments this message has. A faster way to do, msg arguments size. Examples,\n<pre>\t\nIo> message(a(1,2,3)) argCount\n==> 3\n\nIo> message(a) argCount\n==> 0\n<\/pre>\n","setLineNumber(aNumber)":"\tSets the line number of the message. Returns self.\n","nextIgnoreEndOfLines":"\tReturns the next message in the message chain which is not an \n\tEndOfLine or nil if there is no next message.\n","fluxSource":" The directory of Flux where Flux.io is located. This directory is added to the Importer searchPaths.\n","setPrevious(aMessageOrNil)":"\tSets the previous message in the message chain to a deep copy of\n\taMessage or it removes the previous message if aMessage is Nil.\n","fluxPath":" The directory where the .io files for the Flux views are located. This directory is added to the Importer searchPaths.\n","label":"\tReturns the message label. The label is typically set the the\n\tname of the file from which the source code for the message was read.\n","last":"\tReturns the last message in the chain.\n","clone":"\tReturns a Message that is a deep copy of the receiver.\n","fromString(aString)":"\tReturns a new Message object for the compiled(but not executed)\n\tresult of aString.\n","hasCachedResult":"\tReturns true if there is a cached result. Nil is a valid cached result.\n","asMessageWithEvaluatedArgs(optionalContext)":"\tReturns a copy of receiver with arguments evaluated in the context of sender if\n\toptionalContext is nil.\n","argsEvaluatedIn(anObject)":"\tReturns a List containing the argument messages evaluated in the\n\tcontext of anObject.\n","cachedResult":"\tReturns the cached result of the Message or Nil if there is none.\n","asStackEntry":"Returns a string containing message name, file and line.\n","asSimpleString":"Returns one-line string representation up to 40 characters long.\n","setCachedResult(anObject)":"\tSets the cached result of the message. Returns self.\n","removeCachedResult":"\tRemoves the cached result of the Message.\n","evaluatedArgs":"\tReturns a List containing the argument messages evaluated in the context.\n","doInContext(anObject, locals)":"\tEvaluates the receiver in the context of anObject. Optional <tt>locals<\/tt> \n\tobject is used as message sender. <tt>anObject<\/tt> is used as sender otherwise.\n","isEndOfLine":"\tReturns true if the message marks the end of the line. A ';' message.\n","lineNumber":"\tReturns the line number of the message. The charcter number\n\tis typically the line number in the source text from with the message was read.\n","lastBeforeEndOfLine":"\tReturns the last message in the chain before the EndOfLine or nil.\n","setArgAt(index, value)":" Clones message arguments and replaces value of a argument at <code>index<\/code>.\n","setCharacterNumber(aNumber)":"\tSets the character number of the message. Returns self.\n","codeOfLength(n)":"  Same as <tt>Message code<\/tt>, but returns first <tt>n<\/tt> characters only.\n","setName(aString)":"\tSets the name of the receiver. Returns self.\n","appendArg(aMessage)":"Adds aMessage to the argument list of receiver. Examples,\n<pre>\t\nIo> message(a) appendArg(message(b))\n==> a(b)\n\nIo> message(a(1,2)) appendArg(message(3))\n==> a(1, 2, 3)\n<\/pre>\n"}}}},"Math":{"Random":{"Random":{"module":"Random","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"A high quality and reasonably fast random number generator based on \nMakoto Matsumoto, Takuji Nishimura, and Eric Landry's implementation \nof the <a href=http:\/\/www.math.sci.hiroshima-u.ac.jp\/~m-mat\/MT\/emt.html>Mersenne Twister<\/a> algorithm. The default seed is and xor of \nthe ANSI C time() and clock() return values.\n","category":"Math\n","slots":{"bytes(count)":"\tReturns a Sequence of size count containing random bytes.\n","value(optionalArg1, optionalArg2)":"\tIf called with:\n\t<ul>\n\t<li> no arguments, it returns a floating point\n\trandom Number between 0 and 1.\n\t<li> one argument, it returns a floating point random\n\tNumber between 0 and optionalArg1.\n\t<li> two arguments, it returns a floating point random\n\tNumber between optionalArg1 and optionalArg2.\n\t<\/ul>\n","gaussian(optionalMean, optionalStandardDeviation)":"\tReturns a pseudo random number between 0 and 1 with a gaussian distribution.\n","setSeed(aNumber)":"\tSets the random number generator seed to the unsign int version of aNumber.\n","flip":"\tReturns a random bit as a true or false object.\n"}}},"Box":{"Box":{"module":"Box","license":"BSD revised\n","copyright":"Steve Dekorte 2002\n","description":"A primitive for fast operations on rectangles.\n","category":"Math\n","slots":{"height":"\tSame as; size y\n","print":"\tPrints a string representation of the receiver to the standard output.\n","width":"\tSame as; size x\n","copy(aBox)":"\tCopies the values of aBox to the receiver.\n","set(origin, size)":"\tCopies the values in origin and size to set the box's origin and size.\n","intersectsBox(aBox)":"\tReturns true if aBox is within the receiver's bounds, false otherwise.\n","setOrigin(aPoint)":"\tCopies the values in aPoint to the box's origin point.\n","Union(aBox)":"\tReturns a new box containing the 2d union of the receiver and aBox.\n","containsPoint(aPoint)":"\tReturns true if aPoint is within the receiver's bounds, false otherwise.\n","setSize(aPoint)":"\tCopies the values in aPoint to the box's size point.\n","depth":"\tSame as; size z\n","size":"\tReturns the point object for the size of the box.\n","origin":"\tReturns the point object for the origin of the box.\n"}}},"ContinuedFraction":{"ContinuedFraction":{"module":"ContinuedFraction","description":"?\n","category":"Math\n","slots":{}}},"BigNum":{"BigNum":{"module":"BigNum","description":"A wrapper for <a href=http:\/\/gmplib.org\/>GNU MP Bignum (arbitrary precision math) library<\/a>. \nWarning: GMP uses the restrictive GNU license which can be a problem if you are hard linking it into a distrbuted application.\n","category":"Math\n","slots":{"jacobi(aNum)":"  ?\n","pow(aNum)":" Returns power of receiver to aNum.\n","tstbit(aNum)":"  ?\n","root(aNum)":" Returns the aNum root of the receiver.\n","hamdist(aNum)":"  Returns hamming distance between receiver and aNum.\n","legendre(aNum)":" ?\n","&(aNum)":"  AND op. Returns result.\n","asString":"Returns a string representation of the receiver.\n","sqrt":"Returns square root of the receiver.\n","\/(aNum)":" Divide op. Returns result.\n","asNumber":"Returns an Io Number for the receiving BigNum.\n","gcd(aNum)":" Greatest common denominator op. Returns result.\n","<<(aNum)":" Shift left (towards higher bits) op. Returns result.\n","kronecker":"?\n","popcount":"?\n","scan1(aNum)":"  ?\n","|(aNum)":"  OR op. Returns result.\n","*(aNum)":" Multiply op. Returns result.\n","+(aNum)":" Add op. Returns result.\n","asSimpleString":"Returns simple string representation of the receiver.\n","**(aNum)":" Power op. Returns result.\n","lcm(aNum)":" Least common denominator op. Returns result.\n",">>(aNum)":" Shift right (towards lower bits) op. Returns result.\n","neg":"Returns negative version of receiver.\n","abs":"absolute op. Returns result.\n","powm(aNum)":" ?\n","nextprime":"Returns next prime larger than the receiver.\n","^(aNum)":" XOR op. Returns result.\n","invert(aNum)":"  ?\n","mod(aNum)":" Modulus op (same as %). Returns result.\n","-(aNum)":" Subtract op. Returns result.\n","with(aNumber)":" Returns a BigNum version of the Io number aNumber.\n","scan0(aNum)":"  ?\n","%(aNum)":" Modulus op (same as mod()). Returns result.\n"}}},"Rational":{"Rational":{"slots":{"pow(aNum)":" Returns the value of the receiver to the power of aNum.\n","compare(other)":" Compares two numbers against one another. Returns a positive, zero or negative value based on whether the receiver is larger, equal or less than the argument.\n","asString":"Returns a text string representing the Rational number.\n","divmod(aNum)":" Returns a list containing the integer value and the receiver modulus aNum.\n","\/(aNum)":" Returns the value of the receiver divided by aNum.\n","asNumber":"Converts the Rational number to a floating point number.\n","gcd(aNum)":" Calculates the greatest common denominator between the receiver and the argument.\n","with(aNumerator, aDenominator)":" Convenience constructor. Returns a new Rational number whose numerator and denominator are represented by the arguments aNumerator and aDenominator respectively.\")\n","asRational":"Converts the number to a Rational number. CAVEAT: Numbers in Io are floating point entities, which means since they are imprecise, this conversion may yield values not expected.\")\n","serialized":"Returns a bit of code which can be used to serialize the Rational number.\n","reduce":"Reduces the numerator and denominator to their lowest terms.\n","==(other)":" Compares two numbers against one another. Returns true if they are equal (represent the same number), false otherwise.\n","negate":"Negates the Rational number.\n","*(aNum)":" Returns the value of the receiver multiplied by aNum.\n","numerator":"Returns the numerator.\n","!=(other)":" Compares two numbers against one another. Returns true if they are equal (represent the same number), false otherwise.\n","setDenominator(aNumber)":" Sets the denominator. Returns self.\n","abs":"Returns a Rational number with the absolute value of the receiver.\n","+(aNum)":" Returns the value of the receiver added to aNum.\n","setNumerator(aNumber)":" Sets the numerator. Returns self.\n","-(aNum)":" Returns the value of the receiver subtracted from aNum.\n","denominator":"Returns the denominator.\n","%(aNum)":" Returns the receiver modulus aNum\n"},"license":"BSD\n","copyright":"Jeremy Tregunna, 2006\n","module":"Rational","category":"Math\n","Number description":"Example use:\n<pre>\nr1 := Rational with(1, 2) \/* 1\/2\n"}}},"Compilers":{"Loki":{"Linker":{"module":"Loki","license":"BSD revised\n","copyright":"Marc Fauconneau, 2006\n","description":"\tAn object that enables low level introspection into a running Io VM.\n","category":"Compilers\n","slots":{"makeCFunction(aSeq, slotName, object)":"Creates a CFunction which users the beginning address of the data in aSeq as it's function pointer and \nadds the CFunction to the given object on slot slotName.\n","hexSeqToBytes(aSeq)":"Returns a Sequence containing a binary representation of the hex data in aSeq.\n","bytesToHexSeq(aSeq)":"Returns a Sequence containing a hex representation of aSeq.\n"}}}},"Encryption":{"Blowfish":{"Blowfish":{"module":"Blowfish","license":"BSD revised\n","copyright":"Steve Dekorte, 2004\n","description":"The Blowfish object can be used to do encryption and decryption using \nthe <a href=http:\/\/en.wikipedia.org\/wiki\/Blowfish_(cipher)>Blowfish<\/a> keyed, symmetric block cipher.\n<p>\nExample encryption and decription;\n\n<pre>\t\nkey := \"secret\"\ndata := \"this is a message\"\n\nencryptedData := Blowfish clone setKey(key) encrypt(data)\ndecryptedData := Blowfish clone setKey(key) decrypt(encryptedData)\n<\/pre>\t\n\nOr using the stream API:\n<pre>\t\nkey := \"secret\"\ndata := \"this is a message\"\n\ncipher = Blowfish clone\ncipher setIsEncrypting(true)\ncipher setKey(key)\ncipher beginProcessing\ncipher inputBuffer appendSeq(data)\ncipher process\ncipher endProcess\nencryptedData := cipher outputBuffer\n\ncipher = Blowfish clone\ncipher setIsEncrypting(false)\ncipher setKey(key)\ncipher beginProcessing\ncipher inputBuffer appendSeq(encryptedData)\ncipher process\ncipher endProcess\ndecryptedData := cipher outputBuffer\n<\/pre>\n","category":"Encryption\n","slots":{"process":"\tProcess the inputBuffer and appends the result to the outputBuffer.\n\tThe processed inputBuffer is empties except for the spare \n\tbytes at the end which don't fit into a cipher block.\n","inputBuffer":"Returns the input buffer.\n","outputBuffer":"Returns the output buffer.\n","setIsEncrypting(aBool)":"\tIf aBool is true, encrypting mode is on, otherwise, decrypting mode is on.\n","encrypt(aSequence)":" Returns an encrypted version of aSequence.\n","decrypt(aSequence)":" Returns an decrypted version of aSequence.\n","beginProcessing":"\tSets the key from the key slot and initializes the cipher.\n","endProcessing":"\tFinish processing remaining bytes of inputBuffer.\n"}}}}}